
BreazeControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000c6c  00000d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800106  00800106  00000d06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d9  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ed  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000272  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c3  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001f9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_23>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_29>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	8e 00       	.word	0x008e	; ????
  ae:	9f 00       	.word	0x009f	; ????
  b0:	b0 00       	.word	0x00b0	; ????
  b2:	c1 00       	.word	0x00c1	; ????
  b4:	d2 00       	.word	0x00d2	; ????
  b6:	e3 00       	.word	0x00e3	; ????
  b8:	f4 00       	.word	0x00f4	; ????
  ba:	05 01       	movw	r0, r10
  bc:	2a 01       	movw	r4, r20
  be:	33 01       	movw	r6, r6
  c0:	3c 01       	movw	r6, r24
  c2:	45 01       	movw	r8, r10
  c4:	4e 01       	movw	r8, r28
  c6:	57 01       	movw	r10, r14
  c8:	60 01       	movw	r12, r0
  ca:	69 01       	movw	r12, r18

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	da e0       	ldi	r29, 0x0A	; 10
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a6 e0       	ldi	r26, 0x06	; 6
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	af 32       	cpi	r26, 0x2F	; 47
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	ec e6       	ldi	r30, 0x6C	; 108
  f0:	fc e0       	ldi	r31, 0x0C	; 12
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	a6 30       	cpi	r26, 0x06	; 6
  fa:	b1 07       	cpc	r27, r17
  fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>
  fe:	0e 94 21 02 	call	0x442	; 0x442 <main>
 102:	0c 94 34 06 	jmp	0xc68	; 0xc68 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <chooseInput>:
float spd = 0;

volatile char newcycle = 0;

void chooseInput(int i) {
	switch (i) {
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	91 05       	cpc	r25, r1
 10e:	08 f0       	brcs	.+2      	; 0x112 <chooseInput+0x8>
 110:	8c c0       	rjmp	.+280    	; 0x22a <chooseInput+0x120>
 112:	fc 01       	movw	r30, r24
 114:	ea 5a       	subi	r30, 0xAA	; 170
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__tablejump2__>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
 11c:	eb e7       	ldi	r30, 0x7B	; 123
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 130:	80 81       	ld	r24, Z
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 136:	80 81       	ld	r24, Z
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	80 83       	st	Z, r24
		break;
 13c:	08 95       	ret
		
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
 13e:	eb e7       	ldi	r30, 0x7B	; 123
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 152:	80 81       	ld	r24, Z
 154:	8d 7f       	andi	r24, 0xFD	; 253
 156:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
		break;
 15e:	08 95       	ret
		
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
 160:	eb e7       	ldi	r30, 0x7B	; 123
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8f 7d       	andi	r24, 0xDF	; 223
 168:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 16a:	ec e7       	ldi	r30, 0x7C	; 124
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	84 60       	ori	r24, 0x04	; 4
 172:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 174:	80 81       	ld	r24, Z
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 17a:	80 81       	ld	r24, Z
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	80 83       	st	Z, r24
		break;
 180:	08 95       	ret
		
		case 3:
		clear(ADCSRB, MUX5);//Set analog input (F5)
 182:	eb e7       	ldi	r30, 0x7B	; 123
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 18c:	ec e7       	ldi	r30, 0x7C	; 124
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	84 60       	ori	r24, 0x04	; 4
 194:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 196:	80 81       	ld	r24, Z
 198:	8d 7f       	andi	r24, 0xFD	; 253
 19a:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 19c:	80 81       	ld	r24, Z
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	80 83       	st	Z, r24
		break;
 1a2:	08 95       	ret
		
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
 1a4:	eb e7       	ldi	r30, 0x7B	; 123
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 7d       	andi	r24, 0xDF	; 223
 1ac:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 1ae:	ec e7       	ldi	r30, 0x7C	; 124
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
 1b8:	80 81       	ld	r24, Z
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1be:	80 81       	ld	r24, Z
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	80 83       	st	Z, r24
		break;
 1c4:	08 95       	ret
		
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
 1c6:	eb e7       	ldi	r30, 0x7B	; 123
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1da:	80 81       	ld	r24, Z
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1e0:	80 81       	ld	r24, Z
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	80 83       	st	Z, r24
		break;
 1e6:	08 95       	ret
		
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
 1e8:	eb e7       	ldi	r30, 0x7B	; 123
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1f2:	ec e7       	ldi	r30, 0x7C	; 124
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8b 7f       	andi	r24, 0xFB	; 251
 1fa:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1fc:	80 81       	ld	r24, Z
 1fe:	8d 7f       	andi	r24, 0xFD	; 253
 200:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 202:	80 81       	ld	r24, Z
 204:	81 60       	ori	r24, 0x01	; 1
 206:	80 83       	st	Z, r24
		break;
 208:	08 95       	ret
		
		case 7:
		clear(ADCSRB, MUX5);//Set analog input (F7)
 20a:	eb e7       	ldi	r30, 0x7B	; 123
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8f 7d       	andi	r24, 0xDF	; 223
 212:	80 83       	st	Z, r24
		set(ADMUX, MUX2);
 214:	ec e7       	ldi	r30, 0x7C	; 124
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	80 83       	st	Z, r24
		set(ADMUX, MUX1);
 21e:	80 81       	ld	r24, Z
 220:	82 60       	ori	r24, 0x02	; 2
 222:	80 83       	st	Z, r24
		set(ADMUX, MUX0);
 224:	80 81       	ld	r24, Z
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <getADC>:
int ADC6 = 0;
int ADC7 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
 22c:	80 91 06 01 	lds	r24, 0x0106
 230:	90 91 07 01 	lds	r25, 0x0107
 234:	89 2b       	or	r24, r25
 236:	09 f4       	brne	.+2      	; 0x23a <getADC+0xe>
 238:	8a c0       	rjmp	.+276    	; 0x34e <getADC+0x122>
		switch (flag) {
 23a:	80 91 29 01 	lds	r24, 0x0129
 23e:	90 91 2a 01 	lds	r25, 0x012A
 242:	88 30       	cpi	r24, 0x08	; 8
 244:	91 05       	cpc	r25, r1
 246:	08 f0       	brcs	.+2      	; 0x24a <getADC+0x1e>
 248:	4c c0       	rjmp	.+152    	; 0x2e2 <getADC+0xb6>
 24a:	fc 01       	movw	r30, r24
 24c:	e2 5a       	subi	r30, 0xA2	; 162
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__tablejump2__>
			case 0:
			ADC0 = ADC;
 254:	80 91 78 00 	lds	r24, 0x0078
 258:	90 91 79 00 	lds	r25, 0x0079
 25c:	90 93 17 01 	sts	0x0117, r25
 260:	80 93 16 01 	sts	0x0116, r24
			break;
 264:	3e c0       	rjmp	.+124    	; 0x2e2 <getADC+0xb6>
			case 1:
			ADC1 = ADC;
 266:	80 91 78 00 	lds	r24, 0x0078
 26a:	90 91 79 00 	lds	r25, 0x0079
 26e:	90 93 15 01 	sts	0x0115, r25
 272:	80 93 14 01 	sts	0x0114, r24
			break;
 276:	35 c0       	rjmp	.+106    	; 0x2e2 <getADC+0xb6>
			case 2:
			ADC2 = ADC;
 278:	80 91 78 00 	lds	r24, 0x0078
 27c:	90 91 79 00 	lds	r25, 0x0079
 280:	90 93 13 01 	sts	0x0113, r25
 284:	80 93 12 01 	sts	0x0112, r24
			break;
 288:	2c c0       	rjmp	.+88     	; 0x2e2 <getADC+0xb6>
			case 3:
			ADC3 = ADC;
 28a:	80 91 78 00 	lds	r24, 0x0078
 28e:	90 91 79 00 	lds	r25, 0x0079
 292:	90 93 11 01 	sts	0x0111, r25
 296:	80 93 10 01 	sts	0x0110, r24
			break;
 29a:	23 c0       	rjmp	.+70     	; 0x2e2 <getADC+0xb6>
			case 4:
			ADC4 = ADC;
 29c:	80 91 78 00 	lds	r24, 0x0078
 2a0:	90 91 79 00 	lds	r25, 0x0079
 2a4:	90 93 0f 01 	sts	0x010F, r25
 2a8:	80 93 0e 01 	sts	0x010E, r24
			break;
 2ac:	1a c0       	rjmp	.+52     	; 0x2e2 <getADC+0xb6>
			case 5:
			ADC5 = ADC;
 2ae:	80 91 78 00 	lds	r24, 0x0078
 2b2:	90 91 79 00 	lds	r25, 0x0079
 2b6:	90 93 0d 01 	sts	0x010D, r25
 2ba:	80 93 0c 01 	sts	0x010C, r24
			break;
 2be:	11 c0       	rjmp	.+34     	; 0x2e2 <getADC+0xb6>
			case 6:
			ADC6 = ADC;
 2c0:	80 91 78 00 	lds	r24, 0x0078
 2c4:	90 91 79 00 	lds	r25, 0x0079
 2c8:	90 93 0b 01 	sts	0x010B, r25
 2cc:	80 93 0a 01 	sts	0x010A, r24
			break;
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <getADC+0xb6>
			case 7:
			ADC7 = ADC;
 2d2:	80 91 78 00 	lds	r24, 0x0078
 2d6:	90 91 79 00 	lds	r25, 0x0079
 2da:	90 93 09 01 	sts	0x0109, r25
 2de:	80 93 08 01 	sts	0x0108, r24
			break;
		}
		clear(ADCSRA, ADEN);	//Enable/Start conversion
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	8f 77       	andi	r24, 0x7F	; 127
 2ea:	80 83       	st	Z, r24
		clear(ADCSRA, ADSC);	//^
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 7b       	andi	r24, 0xBF	; 191
 2f0:	80 83       	st	Z, r24
		clear(ADCSRA, ADATE);
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 7d       	andi	r24, 0xDF	; 223
 2f6:	80 83       	st	Z, r24
		clear(ADCSRA, ADIF);
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 7e       	andi	r24, 0xEF	; 239
 2fc:	80 83       	st	Z, r24
		if (flag >= 0 && flag < 8) {
 2fe:	80 91 29 01 	lds	r24, 0x0129
 302:	90 91 2a 01 	lds	r25, 0x012A
 306:	88 30       	cpi	r24, 0x08	; 8
 308:	91 05       	cpc	r25, r1
 30a:	78 f4       	brcc	.+30     	; 0x32a <getADC+0xfe>
			flag = (flag + 1) % 8;
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	87 70       	andi	r24, 0x07	; 7
 310:	90 78       	andi	r25, 0x80	; 128
 312:	99 23       	and	r25, r25
 314:	24 f4       	brge	.+8      	; 0x31e <getADC+0xf2>
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	88 6f       	ori	r24, 0xF8	; 248
 31a:	9f 6f       	ori	r25, 0xFF	; 255
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	90 93 2a 01 	sts	0x012A, r25
 322:	80 93 29 01 	sts	0x0129, r24
			chooseInput(flag);
 326:	0e 94 85 00 	call	0x10a	; 0x10a <chooseInput>
		}
		set(ADCSRA, ADATE);	//Set trigger to free-running mode
 32a:	ea e7       	ldi	r30, 0x7A	; 122
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 62       	ori	r24, 0x20	; 32
 332:	80 83       	st	Z, r24
		set(ADCSRA, ADEN);	//Enable/Start conversion
 334:	80 81       	ld	r24, Z
 336:	80 68       	ori	r24, 0x80	; 128
 338:	80 83       	st	Z, r24
		set(ADCSRA, ADSC);	//^
 33a:	80 81       	ld	r24, Z
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	80 83       	st	Z, r24
		
		set(ADCSRA, ADIF);	//Enable reading results
 340:	80 81       	ld	r24, Z
 342:	80 61       	ori	r24, 0x10	; 16
 344:	80 83       	st	Z, r24
		conversion = 0;
 346:	10 92 07 01 	sts	0x0107, r1
 34a:	10 92 06 01 	sts	0x0106, r1
	}

	ADCarr[0] = ADC0;
 34e:	80 91 16 01 	lds	r24, 0x0116
 352:	90 91 17 01 	lds	r25, 0x0117
 356:	90 93 1a 01 	sts	0x011A, r25
 35a:	80 93 19 01 	sts	0x0119, r24
	ADCarr[1] = ADC1;
 35e:	80 91 14 01 	lds	r24, 0x0114
 362:	90 91 15 01 	lds	r25, 0x0115
 366:	90 93 1c 01 	sts	0x011C, r25
 36a:	80 93 1b 01 	sts	0x011B, r24
	ADCarr[2] = ADC2;
 36e:	80 91 12 01 	lds	r24, 0x0112
 372:	90 91 13 01 	lds	r25, 0x0113
 376:	90 93 1e 01 	sts	0x011E, r25
 37a:	80 93 1d 01 	sts	0x011D, r24
	ADCarr[3] = ADC3;
 37e:	80 91 10 01 	lds	r24, 0x0110
 382:	90 91 11 01 	lds	r25, 0x0111
 386:	90 93 20 01 	sts	0x0120, r25
 38a:	80 93 1f 01 	sts	0x011F, r24
	ADCarr[4] = ADC4;
 38e:	80 91 0e 01 	lds	r24, 0x010E
 392:	90 91 0f 01 	lds	r25, 0x010F
 396:	90 93 22 01 	sts	0x0122, r25
 39a:	80 93 21 01 	sts	0x0121, r24
	ADCarr[5] = ADC5;
 39e:	80 91 0c 01 	lds	r24, 0x010C
 3a2:	90 91 0d 01 	lds	r25, 0x010D
 3a6:	90 93 24 01 	sts	0x0124, r25
 3aa:	80 93 23 01 	sts	0x0123, r24
	ADCarr[6] = ADC6;
 3ae:	80 91 0a 01 	lds	r24, 0x010A
 3b2:	90 91 0b 01 	lds	r25, 0x010B
 3b6:	90 93 26 01 	sts	0x0126, r25
 3ba:	80 93 25 01 	sts	0x0125, r24
	ADCarr[7] = ADC7;
 3be:	80 91 08 01 	lds	r24, 0x0108
 3c2:	90 91 09 01 	lds	r25, 0x0109
 3c6:	90 93 28 01 	sts	0x0128, r25
 3ca:	80 93 27 01 	sts	0x0127, r24
 3ce:	08 95       	ret

000003d0 <drive_straight>:
}

void drive_straight(char dir, float speed) {
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	6a 01       	movw	r12, r20
 3da:	7b 01       	movw	r14, r22
	switch (dir) {
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	19 f0       	breq	.+6      	; 0x3e6 <drive_straight+0x16>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	21 f0       	breq	.+8      	; 0x3ec <drive_straight+0x1c>
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <drive_straight+0x20>
		case WAIT:
			break;
		case FORWARD:
			set(PORTB, 2);
 3e6:	2a 9a       	sbi	0x05, 2	; 5
			set(PORTB, 3);
 3e8:	2b 9a       	sbi	0x05, 3	; 5
			break;
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <drive_straight+0x20>
		case BACKWARD:
			clear(PORTB, 2);
 3ec:	2a 98       	cbi	0x05, 2	; 5
			clear(PORTB, 3);
 3ee:	2b 98       	cbi	0x05, 3	; 5
			break;
	}
	OCR1B = (unsigned int) (OCR1A * speed);
 3f0:	60 91 88 00 	lds	r22, 0x0088
 3f4:	70 91 89 00 	lds	r23, 0x0089
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatunsisf>
 400:	a7 01       	movw	r20, r14
 402:	96 01       	movw	r18, r12
 404:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 408:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 40c:	70 93 8b 00 	sts	0x008B, r23
 410:	60 93 8a 00 	sts	0x008A, r22
	OCR3B = (unsigned int) (ICR3 * speed);
 414:	60 91 96 00 	lds	r22, 0x0096
 418:	70 91 97 00 	lds	r23, 0x0097
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatunsisf>
 424:	a7 01       	movw	r20, r14
 426:	96 01       	movw	r18, r12
 428:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 42c:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 430:	70 93 9b 00 	sts	0x009B, r23
 434:	60 93 9a 00 	sts	0x009A, r22
}
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	08 95       	ret

00000442 <main>:

int main(void)
{
	
	sei();
 442:	78 94       	sei
	
	//TIMER 1: for left wheel
	set(TCCR1B, WGM13);
 444:	e1 e8       	ldi	r30, 0x81	; 129
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	80 61       	ori	r24, 0x10	; 16
 44c:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
 44e:	80 81       	ld	r24, Z
 450:	88 60       	ori	r24, 0x08	; 8
 452:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
 454:	a0 e8       	ldi	r26, 0x80	; 128
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	8c 91       	ld	r24, X
 45a:	82 60       	ori	r24, 0x02	; 2
 45c:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
 45e:	8c 91       	ld	r24, X
 460:	81 60       	ori	r24, 0x01	; 1
 462:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
 464:	8c 91       	ld	r24, X
 466:	80 62       	ori	r24, 0x20	; 32
 468:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
 46a:	8c 91       	ld	r24, X
 46c:	8f 7e       	andi	r24, 0xEF	; 239
 46e:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
 470:	80 81       	ld	r24, Z
 472:	8b 7f       	andi	r24, 0xFB	; 251
 474:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
 476:	80 81       	ld	r24, Z
 478:	8d 7f       	andi	r24, 0xFD	; 253
 47a:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
 47c:	80 81       	ld	r24, Z
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	80 83       	st	Z, r24
	
	OCR1A = 0xFFFF;
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	9f ef       	ldi	r25, 0xFF	; 255
 486:	90 93 89 00 	sts	0x0089, r25
 48a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
 48e:	10 92 8b 00 	sts	0x008B, r1
 492:	10 92 8a 00 	sts	0x008A, r1
	
	
	//TIMER 3: For right wheel
	set(TCCR3B, WGM33);
 496:	e1 e9       	ldi	r30, 0x91	; 145
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	20 81       	ld	r18, Z
 49c:	20 61       	ori	r18, 0x10	; 16
 49e:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
 4a0:	20 81       	ld	r18, Z
 4a2:	28 60       	ori	r18, 0x08	; 8
 4a4:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
 4a6:	a0 e9       	ldi	r26, 0x90	; 144
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	2c 91       	ld	r18, X
 4ac:	22 60       	ori	r18, 0x02	; 2
 4ae:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
 4b0:	2c 91       	ld	r18, X
 4b2:	2e 7f       	andi	r18, 0xFE	; 254
 4b4:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1);
 4b6:	2c 91       	ld	r18, X
 4b8:	20 68       	ori	r18, 0x80	; 128
 4ba:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0);
 4bc:	2c 91       	ld	r18, X
 4be:	2f 7b       	andi	r18, 0xBF	; 191
 4c0:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
 4c2:	20 81       	ld	r18, Z
 4c4:	2b 7f       	andi	r18, 0xFB	; 251
 4c6:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
 4c8:	20 81       	ld	r18, Z
 4ca:	2d 7f       	andi	r18, 0xFD	; 253
 4cc:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
 4ce:	20 81       	ld	r18, Z
 4d0:	21 60       	ori	r18, 0x01	; 1
 4d2:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
 4d4:	90 93 97 00 	sts	0x0097, r25
 4d8:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
 4dc:	10 92 99 00 	sts	0x0099, r1
 4e0:	10 92 98 00 	sts	0x0098, r1
	
	
	//TIMER 0: For control loop
	clear(TCCR0B, CS02);
 4e4:	85 b5       	in	r24, 0x25	; 37
 4e6:	8b 7f       	andi	r24, 0xFB	; 251
 4e8:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
 4ea:	85 b5       	in	r24, 0x25	; 37
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
 4f0:	85 b5       	in	r24, 0x25	; 37
 4f2:	81 60       	ori	r24, 0x01	; 1
 4f4:	85 bd       	out	0x25, r24	; 37
	
	set(TCCR0B, WGM02);
 4f6:	85 b5       	in	r24, 0x25	; 37
 4f8:	88 60       	ori	r24, 0x08	; 8
 4fa:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A, WGM01);
 4fc:	84 b5       	in	r24, 0x24	; 36
 4fe:	8d 7f       	andi	r24, 0xFD	; 253
 500:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM00);
 502:	84 b5       	in	r24, 0x24	; 36
 504:	81 60       	ori	r24, 0x01	; 1
 506:	84 bd       	out	0x24, r24	; 36
	
	clear(TCCR0A, COM0B1);
 508:	84 b5       	in	r24, 0x24	; 36
 50a:	8f 7d       	andi	r24, 0xDF	; 223
 50c:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
 50e:	84 b5       	in	r24, 0x24	; 36
 510:	8f 7e       	andi	r24, 0xEF	; 239
 512:	84 bd       	out	0x24, r24	; 36
	
	set(TIMSK0,TOIE0);
 514:	ee e6       	ldi	r30, 0x6E	; 110
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	80 83       	st	Z, r24
	
	double controlfreq = 200; //CHANGE THIS NUMBER TO FIX SAMPLING RATE
	
	OCR0A = (unsigned int) (7801.8/(controlfreq/2));
 51e:	8e e4       	ldi	r24, 0x4E	; 78
 520:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x00;
 522:	18 bc       	out	0x28, r1	; 40
	
	set(DDRB,6);
 524:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
 526:	3e 9a       	sbi	0x07, 6	; 7
	
	set(DDRB,2);
 528:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
 52a:	23 9a       	sbi	0x04, 3	; 4
	
	char constantcontrol = 1;
	
	set(DDRB,0);
 52c:	20 9a       	sbi	0x04, 0	; 4
    while(1)
    {
		if (!constantcontrol || newcycle) {
			newcycle = 0;
			getADC();
			toggle(PORTB,0);
 52e:	c1 e0       	ldi	r28, 0x01	; 1
	
	set(DDRB,0);
	
    while(1)
    {
		if (!constantcontrol || newcycle) {
 530:	80 91 18 01 	lds	r24, 0x0118
 534:	88 23       	and	r24, r24
 536:	e1 f3       	breq	.-8      	; 0x530 <main+0xee>
			newcycle = 0;
 538:	10 92 18 01 	sts	0x0118, r1
			getADC();
 53c:	0e 94 16 01 	call	0x22c	; 0x22c <getADC>
			toggle(PORTB,0);
 540:	85 b1       	in	r24, 0x05	; 5
 542:	8c 27       	eor	r24, r28
 544:	85 b9       	out	0x05, r24	; 5
			
			CtrlOutput *control = straight_control(&ADCarr[0]);
 546:	89 e1       	ldi	r24, 0x19	; 25
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <straight_control>
			drive_straight(control->state, control->speed);
 54e:	fc 01       	movw	r30, r24
 550:	46 81       	ldd	r20, Z+6	; 0x06
 552:	57 81       	ldd	r21, Z+7	; 0x07
 554:	60 85       	ldd	r22, Z+8	; 0x08
 556:	71 85       	ldd	r23, Z+9	; 0x09
 558:	80 81       	ld	r24, Z
 55a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <drive_straight>
 55e:	e8 cf       	rjmp	.-48     	; 0x530 <main+0xee>

00000560 <__vector_29>:
		
		}
	}
}

ISR(ADC_vect) {
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
	//cli();
	conversion = 1;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	90 93 07 01 	sts	0x0107, r25
 576:	80 93 06 01 	sts	0x0106, r24
	//sei();
}
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_23>:

ISR(TIMER0_OVF_vect) {
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
	newcycle = 1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 18 01 	sts	0x0118, r24
	m_red(TOGGLE);
 59c:	6e 9a       	sbi	0x0d, 6	; 13
 59e:	9e b1       	in	r25, 0x0e	; 14
 5a0:	80 e4       	ldi	r24, 0x40	; 64
 5a2:	89 27       	eor	r24, r25
 5a4:	8e b9       	out	0x0e, r24	; 14
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <straight_control>:
		} else {
		return 1;
	}
}

CtrlOutput *straight_control(int *ADCs) {
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	8c 01       	movw	r16, r24
	int thresholdlow = 700;
	int thresholdhigh = 800;
	unsigned int maxADC;
	CtrlOutput *ans = malloc(sizeof(CtrlOutput));
 5be:	8a e0       	ldi	r24, 0x0A	; 10
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <malloc>
 5c6:	ec 01       	movw	r28, r24
	if (ADCs[0] > ADCs[1]) {
 5c8:	f8 01       	movw	r30, r16
 5ca:	20 81       	ld	r18, Z
 5cc:	31 81       	ldd	r19, Z+1	; 0x01
 5ce:	82 81       	ldd	r24, Z+2	; 0x02
 5d0:	93 81       	ldd	r25, Z+3	; 0x03
 5d2:	82 17       	cp	r24, r18
 5d4:	93 07       	cpc	r25, r19
 5d6:	5c f4       	brge	.+22     	; 0x5ee <straight_control+0x3a>
		ans->state = FORWARD;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	99 83       	std	Y+1, r25	; 0x01
 5de:	88 83       	st	Y, r24
		ans->orientation = 0;
 5e0:	1a 82       	std	Y+2, r1	; 0x02
 5e2:	1b 82       	std	Y+3, r1	; 0x03
 5e4:	1c 82       	std	Y+4, r1	; 0x04
 5e6:	1d 82       	std	Y+5, r1	; 0x05
		maxADC = ADCs[0];
 5e8:	80 81       	ld	r24, Z
 5ea:	91 81       	ldd	r25, Z+1	; 0x01
 5ec:	0b c0       	rjmp	.+22     	; 0x604 <straight_control+0x50>
	}
	else {
		ans->state = BACKWARD;
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	99 83       	std	Y+1, r25	; 0x01
 5f4:	88 83       	st	Y, r24
		ans->orientation = 0;
 5f6:	1a 82       	std	Y+2, r1	; 0x02
 5f8:	1b 82       	std	Y+3, r1	; 0x03
 5fa:	1c 82       	std	Y+4, r1	; 0x04
 5fc:	1d 82       	std	Y+5, r1	; 0x05
		maxADC = ADCs[1];
 5fe:	f8 01       	movw	r30, r16
 600:	82 81       	ldd	r24, Z+2	; 0x02
 602:	93 81       	ldd	r25, Z+3	; 0x03
	}
	
	if (maxADC < thresholdhigh && maxADC > thresholdlow) {
 604:	80 32       	cpi	r24, 0x20	; 32
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	9f 07       	cpc	r25, r31
 60a:	78 f4       	brcc	.+30     	; 0x62a <straight_control+0x76>
 60c:	8d 3b       	cpi	r24, 0xBD	; 189
 60e:	22 e0       	ldi	r18, 0x02	; 2
 610:	92 07       	cpc	r25, r18
 612:	f0 f1       	brcs	.+124    	; 0x690 <straight_control+0xdc>
		ans->state = WAIT;
 614:	19 82       	std	Y+1, r1	; 0x01
 616:	18 82       	st	Y, r1
		ans->orientation = 0;
 618:	1a 82       	std	Y+2, r1	; 0x02
 61a:	1b 82       	std	Y+3, r1	; 0x03
 61c:	1c 82       	std	Y+4, r1	; 0x04
 61e:	1d 82       	std	Y+5, r1	; 0x05
		ans->speed = 0;
 620:	1e 82       	std	Y+6, r1	; 0x06
 622:	1f 82       	std	Y+7, r1	; 0x07
 624:	18 86       	std	Y+8, r1	; 0x08
 626:	19 86       	std	Y+9, r1	; 0x09
 628:	47 c0       	rjmp	.+142    	; 0x6b8 <straight_control+0x104>
#include "control.h"
#include <stdlib.h>

int oppDir(int st) {
	if (st == 1) {
 62a:	28 81       	ld	r18, Y
 62c:	39 81       	ldd	r19, Y+1	; 0x01
 62e:	21 30       	cpi	r18, 0x01	; 1
 630:	31 05       	cpc	r19, r1
 632:	19 f4       	brne	.+6      	; 0x63a <straight_control+0x86>
		return 2;
 634:	22 e0       	ldi	r18, 0x02	; 2
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <straight_control+0x8a>
		} else {
		return 1;
 63a:	21 e0       	ldi	r18, 0x01	; 1
 63c:	30 e0       	ldi	r19, 0x00	; 0
		ans->state = WAIT;
		ans->orientation = 0;
		ans->speed = 0;
	}
	else if (maxADC >= thresholdhigh) {
		ans->state = oppDir(ans->state);
 63e:	39 83       	std	Y+1, r19	; 0x01
 640:	28 83       	st	Y, r18
		ans->speed = 1.0 - (1023 - maxADC) / (1023 - thresholdhigh);
 642:	4f ef       	ldi	r20, 0xFF	; 255
 644:	53 e0       	ldi	r21, 0x03	; 3
 646:	48 1b       	sub	r20, r24
 648:	59 0b       	sbc	r21, r25
 64a:	9a 01       	movw	r18, r20
 64c:	a3 ee       	ldi	r26, 0xE3	; 227
 64e:	b5 e2       	ldi	r27, 0x25	; 37
 650:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__umulhisi3>
 654:	48 1b       	sub	r20, r24
 656:	59 0b       	sbc	r21, r25
 658:	ba 01       	movw	r22, r20
 65a:	76 95       	lsr	r23
 65c:	67 95       	ror	r22
 65e:	86 0f       	add	r24, r22
 660:	97 1f       	adc	r25, r23
 662:	bc 01       	movw	r22, r24
 664:	66 0f       	add	r22, r22
 666:	67 2f       	mov	r22, r23
 668:	66 1f       	adc	r22, r22
 66a:	77 0b       	sbc	r23, r23
 66c:	71 95       	neg	r23
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatunsisf>
 676:	9b 01       	movw	r18, r22
 678:	ac 01       	movw	r20, r24
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	80 e8       	ldi	r24, 0x80	; 128
 680:	9f e3       	ldi	r25, 0x3F	; 63
 682:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__subsf3>
 686:	6e 83       	std	Y+6, r22	; 0x06
 688:	7f 83       	std	Y+7, r23	; 0x07
 68a:	88 87       	std	Y+8, r24	; 0x08
 68c:	99 87       	std	Y+9, r25	; 0x09
 68e:	14 c0       	rjmp	.+40     	; 0x6b8 <straight_control+0x104>
	}
	else {
		ans->speed = 1.0 - (maxADC / thresholdlow);
 690:	6c eb       	ldi	r22, 0xBC	; 188
 692:	72 e0       	ldi	r23, 0x02	; 2
 694:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__udivmodhi4>
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatunsisf>
 6a0:	9b 01       	movw	r18, r22
 6a2:	ac 01       	movw	r20, r24
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	80 e8       	ldi	r24, 0x80	; 128
 6aa:	9f e3       	ldi	r25, 0x3F	; 63
 6ac:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__subsf3>
 6b0:	6e 83       	std	Y+6, r22	; 0x06
 6b2:	7f 83       	std	Y+7, r23	; 0x07
 6b4:	88 87       	std	Y+8, r24	; 0x08
 6b6:	99 87       	std	Y+9, r25	; 0x09
	}
	
	return ans;
 6b8:	ce 01       	movw	r24, r28
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	08 95       	ret

000006c4 <__subsf3>:
 6c4:	50 58       	subi	r21, 0x80	; 128

000006c6 <__addsf3>:
 6c6:	bb 27       	eor	r27, r27
 6c8:	aa 27       	eor	r26, r26
 6ca:	0e d0       	rcall	.+28     	; 0x6e8 <__addsf3x>
 6cc:	e0 c0       	rjmp	.+448    	; 0x88e <__fp_round>
 6ce:	d1 d0       	rcall	.+418    	; 0x872 <__fp_pscA>
 6d0:	30 f0       	brcs	.+12     	; 0x6de <__addsf3+0x18>
 6d2:	d6 d0       	rcall	.+428    	; 0x880 <__fp_pscB>
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__addsf3+0x18>
 6d6:	31 f4       	brne	.+12     	; 0x6e4 <__addsf3+0x1e>
 6d8:	9f 3f       	cpi	r25, 0xFF	; 255
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__addsf3+0x1a>
 6dc:	1e f4       	brtc	.+6      	; 0x6e4 <__addsf3+0x1e>
 6de:	c6 c0       	rjmp	.+396    	; 0x86c <__fp_nan>
 6e0:	0e f4       	brtc	.+2      	; 0x6e4 <__addsf3+0x1e>
 6e2:	e0 95       	com	r30
 6e4:	e7 fb       	bst	r30, 7
 6e6:	bc c0       	rjmp	.+376    	; 0x860 <__fp_inf>

000006e8 <__addsf3x>:
 6e8:	e9 2f       	mov	r30, r25
 6ea:	e2 d0       	rcall	.+452    	; 0x8b0 <__fp_split3>
 6ec:	80 f3       	brcs	.-32     	; 0x6ce <__addsf3+0x8>
 6ee:	ba 17       	cp	r27, r26
 6f0:	62 07       	cpc	r22, r18
 6f2:	73 07       	cpc	r23, r19
 6f4:	84 07       	cpc	r24, r20
 6f6:	95 07       	cpc	r25, r21
 6f8:	18 f0       	brcs	.+6      	; 0x700 <__addsf3x+0x18>
 6fa:	71 f4       	brne	.+28     	; 0x718 <__addsf3x+0x30>
 6fc:	9e f5       	brtc	.+102    	; 0x764 <__addsf3x+0x7c>
 6fe:	fa c0       	rjmp	.+500    	; 0x8f4 <__fp_zero>
 700:	0e f4       	brtc	.+2      	; 0x704 <__addsf3x+0x1c>
 702:	e0 95       	com	r30
 704:	0b 2e       	mov	r0, r27
 706:	ba 2f       	mov	r27, r26
 708:	a0 2d       	mov	r26, r0
 70a:	0b 01       	movw	r0, r22
 70c:	b9 01       	movw	r22, r18
 70e:	90 01       	movw	r18, r0
 710:	0c 01       	movw	r0, r24
 712:	ca 01       	movw	r24, r20
 714:	a0 01       	movw	r20, r0
 716:	11 24       	eor	r1, r1
 718:	ff 27       	eor	r31, r31
 71a:	59 1b       	sub	r21, r25
 71c:	99 f0       	breq	.+38     	; 0x744 <__addsf3x+0x5c>
 71e:	59 3f       	cpi	r21, 0xF9	; 249
 720:	50 f4       	brcc	.+20     	; 0x736 <__addsf3x+0x4e>
 722:	50 3e       	cpi	r21, 0xE0	; 224
 724:	68 f1       	brcs	.+90     	; 0x780 <__addsf3x+0x98>
 726:	1a 16       	cp	r1, r26
 728:	f0 40       	sbci	r31, 0x00	; 0
 72a:	a2 2f       	mov	r26, r18
 72c:	23 2f       	mov	r18, r19
 72e:	34 2f       	mov	r19, r20
 730:	44 27       	eor	r20, r20
 732:	58 5f       	subi	r21, 0xF8	; 248
 734:	f3 cf       	rjmp	.-26     	; 0x71c <__addsf3x+0x34>
 736:	46 95       	lsr	r20
 738:	37 95       	ror	r19
 73a:	27 95       	ror	r18
 73c:	a7 95       	ror	r26
 73e:	f0 40       	sbci	r31, 0x00	; 0
 740:	53 95       	inc	r21
 742:	c9 f7       	brne	.-14     	; 0x736 <__addsf3x+0x4e>
 744:	7e f4       	brtc	.+30     	; 0x764 <__addsf3x+0x7c>
 746:	1f 16       	cp	r1, r31
 748:	ba 0b       	sbc	r27, r26
 74a:	62 0b       	sbc	r22, r18
 74c:	73 0b       	sbc	r23, r19
 74e:	84 0b       	sbc	r24, r20
 750:	ba f0       	brmi	.+46     	; 0x780 <__addsf3x+0x98>
 752:	91 50       	subi	r25, 0x01	; 1
 754:	a1 f0       	breq	.+40     	; 0x77e <__addsf3x+0x96>
 756:	ff 0f       	add	r31, r31
 758:	bb 1f       	adc	r27, r27
 75a:	66 1f       	adc	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	c2 f7       	brpl	.-16     	; 0x752 <__addsf3x+0x6a>
 762:	0e c0       	rjmp	.+28     	; 0x780 <__addsf3x+0x98>
 764:	ba 0f       	add	r27, r26
 766:	62 1f       	adc	r22, r18
 768:	73 1f       	adc	r23, r19
 76a:	84 1f       	adc	r24, r20
 76c:	48 f4       	brcc	.+18     	; 0x780 <__addsf3x+0x98>
 76e:	87 95       	ror	r24
 770:	77 95       	ror	r23
 772:	67 95       	ror	r22
 774:	b7 95       	ror	r27
 776:	f7 95       	ror	r31
 778:	9e 3f       	cpi	r25, 0xFE	; 254
 77a:	08 f0       	brcs	.+2      	; 0x77e <__addsf3x+0x96>
 77c:	b3 cf       	rjmp	.-154    	; 0x6e4 <__addsf3+0x1e>
 77e:	93 95       	inc	r25
 780:	88 0f       	add	r24, r24
 782:	08 f0       	brcs	.+2      	; 0x786 <__addsf3x+0x9e>
 784:	99 27       	eor	r25, r25
 786:	ee 0f       	add	r30, r30
 788:	97 95       	ror	r25
 78a:	87 95       	ror	r24
 78c:	08 95       	ret

0000078e <__fixunssfsi>:
 78e:	98 d0       	rcall	.+304    	; 0x8c0 <__fp_splitA>
 790:	88 f0       	brcs	.+34     	; 0x7b4 <__fixunssfsi+0x26>
 792:	9f 57       	subi	r25, 0x7F	; 127
 794:	90 f0       	brcs	.+36     	; 0x7ba <__fixunssfsi+0x2c>
 796:	b9 2f       	mov	r27, r25
 798:	99 27       	eor	r25, r25
 79a:	b7 51       	subi	r27, 0x17	; 23
 79c:	a0 f0       	brcs	.+40     	; 0x7c6 <__fixunssfsi+0x38>
 79e:	d1 f0       	breq	.+52     	; 0x7d4 <__fixunssfsi+0x46>
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	1a f0       	brmi	.+6      	; 0x7b0 <__fixunssfsi+0x22>
 7aa:	ba 95       	dec	r27
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__fixunssfsi+0x12>
 7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <__fixunssfsi+0x46>
 7b0:	b1 30       	cpi	r27, 0x01	; 1
 7b2:	81 f0       	breq	.+32     	; 0x7d4 <__fixunssfsi+0x46>
 7b4:	9f d0       	rcall	.+318    	; 0x8f4 <__fp_zero>
 7b6:	b1 e0       	ldi	r27, 0x01	; 1
 7b8:	08 95       	ret
 7ba:	9c c0       	rjmp	.+312    	; 0x8f4 <__fp_zero>
 7bc:	67 2f       	mov	r22, r23
 7be:	78 2f       	mov	r23, r24
 7c0:	88 27       	eor	r24, r24
 7c2:	b8 5f       	subi	r27, 0xF8	; 248
 7c4:	39 f0       	breq	.+14     	; 0x7d4 <__fixunssfsi+0x46>
 7c6:	b9 3f       	cpi	r27, 0xF9	; 249
 7c8:	cc f3       	brlt	.-14     	; 0x7bc <__fixunssfsi+0x2e>
 7ca:	86 95       	lsr	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b3 95       	inc	r27
 7d2:	d9 f7       	brne	.-10     	; 0x7ca <__fixunssfsi+0x3c>
 7d4:	3e f4       	brtc	.+14     	; 0x7e4 <__fixunssfsi+0x56>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	08 95       	ret

000007e6 <__floatunsisf>:
 7e6:	e8 94       	clt
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <__floatsisf+0x12>

000007ea <__floatsisf>:
 7ea:	97 fb       	bst	r25, 7
 7ec:	3e f4       	brtc	.+14     	; 0x7fc <__floatsisf+0x12>
 7ee:	90 95       	com	r25
 7f0:	80 95       	com	r24
 7f2:	70 95       	com	r23
 7f4:	61 95       	neg	r22
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	99 23       	and	r25, r25
 7fe:	a9 f0       	breq	.+42     	; 0x82a <__floatsisf+0x40>
 800:	f9 2f       	mov	r31, r25
 802:	96 e9       	ldi	r25, 0x96	; 150
 804:	bb 27       	eor	r27, r27
 806:	93 95       	inc	r25
 808:	f6 95       	lsr	r31
 80a:	87 95       	ror	r24
 80c:	77 95       	ror	r23
 80e:	67 95       	ror	r22
 810:	b7 95       	ror	r27
 812:	f1 11       	cpse	r31, r1
 814:	f8 cf       	rjmp	.-16     	; 0x806 <__floatsisf+0x1c>
 816:	fa f4       	brpl	.+62     	; 0x856 <__floatsisf+0x6c>
 818:	bb 0f       	add	r27, r27
 81a:	11 f4       	brne	.+4      	; 0x820 <__floatsisf+0x36>
 81c:	60 ff       	sbrs	r22, 0
 81e:	1b c0       	rjmp	.+54     	; 0x856 <__floatsisf+0x6c>
 820:	6f 5f       	subi	r22, 0xFF	; 255
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8f 4f       	sbci	r24, 0xFF	; 255
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	16 c0       	rjmp	.+44     	; 0x856 <__floatsisf+0x6c>
 82a:	88 23       	and	r24, r24
 82c:	11 f0       	breq	.+4      	; 0x832 <__floatsisf+0x48>
 82e:	96 e9       	ldi	r25, 0x96	; 150
 830:	11 c0       	rjmp	.+34     	; 0x854 <__floatsisf+0x6a>
 832:	77 23       	and	r23, r23
 834:	21 f0       	breq	.+8      	; 0x83e <__floatsisf+0x54>
 836:	9e e8       	ldi	r25, 0x8E	; 142
 838:	87 2f       	mov	r24, r23
 83a:	76 2f       	mov	r23, r22
 83c:	05 c0       	rjmp	.+10     	; 0x848 <__floatsisf+0x5e>
 83e:	66 23       	and	r22, r22
 840:	71 f0       	breq	.+28     	; 0x85e <__floatsisf+0x74>
 842:	96 e8       	ldi	r25, 0x86	; 134
 844:	86 2f       	mov	r24, r22
 846:	70 e0       	ldi	r23, 0x00	; 0
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	2a f0       	brmi	.+10     	; 0x856 <__floatsisf+0x6c>
 84c:	9a 95       	dec	r25
 84e:	66 0f       	add	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	da f7       	brpl	.-10     	; 0x84c <__floatsisf+0x62>
 856:	88 0f       	add	r24, r24
 858:	96 95       	lsr	r25
 85a:	87 95       	ror	r24
 85c:	97 f9       	bld	r25, 7
 85e:	08 95       	ret

00000860 <__fp_inf>:
 860:	97 f9       	bld	r25, 7
 862:	9f 67       	ori	r25, 0x7F	; 127
 864:	80 e8       	ldi	r24, 0x80	; 128
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	08 95       	ret

0000086c <__fp_nan>:
 86c:	9f ef       	ldi	r25, 0xFF	; 255
 86e:	80 ec       	ldi	r24, 0xC0	; 192
 870:	08 95       	ret

00000872 <__fp_pscA>:
 872:	00 24       	eor	r0, r0
 874:	0a 94       	dec	r0
 876:	16 16       	cp	r1, r22
 878:	17 06       	cpc	r1, r23
 87a:	18 06       	cpc	r1, r24
 87c:	09 06       	cpc	r0, r25
 87e:	08 95       	ret

00000880 <__fp_pscB>:
 880:	00 24       	eor	r0, r0
 882:	0a 94       	dec	r0
 884:	12 16       	cp	r1, r18
 886:	13 06       	cpc	r1, r19
 888:	14 06       	cpc	r1, r20
 88a:	05 06       	cpc	r0, r21
 88c:	08 95       	ret

0000088e <__fp_round>:
 88e:	09 2e       	mov	r0, r25
 890:	03 94       	inc	r0
 892:	00 0c       	add	r0, r0
 894:	11 f4       	brne	.+4      	; 0x89a <__fp_round+0xc>
 896:	88 23       	and	r24, r24
 898:	52 f0       	brmi	.+20     	; 0x8ae <__fp_round+0x20>
 89a:	bb 0f       	add	r27, r27
 89c:	40 f4       	brcc	.+16     	; 0x8ae <__fp_round+0x20>
 89e:	bf 2b       	or	r27, r31
 8a0:	11 f4       	brne	.+4      	; 0x8a6 <__fp_round+0x18>
 8a2:	60 ff       	sbrs	r22, 0
 8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__fp_round+0x20>
 8a6:	6f 5f       	subi	r22, 0xFF	; 255
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	8f 4f       	sbci	r24, 0xFF	; 255
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	08 95       	ret

000008b0 <__fp_split3>:
 8b0:	57 fd       	sbrc	r21, 7
 8b2:	90 58       	subi	r25, 0x80	; 128
 8b4:	44 0f       	add	r20, r20
 8b6:	55 1f       	adc	r21, r21
 8b8:	59 f0       	breq	.+22     	; 0x8d0 <__fp_splitA+0x10>
 8ba:	5f 3f       	cpi	r21, 0xFF	; 255
 8bc:	71 f0       	breq	.+28     	; 0x8da <__fp_splitA+0x1a>
 8be:	47 95       	ror	r20

000008c0 <__fp_splitA>:
 8c0:	88 0f       	add	r24, r24
 8c2:	97 fb       	bst	r25, 7
 8c4:	99 1f       	adc	r25, r25
 8c6:	61 f0       	breq	.+24     	; 0x8e0 <__fp_splitA+0x20>
 8c8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ca:	79 f0       	breq	.+30     	; 0x8ea <__fp_splitA+0x2a>
 8cc:	87 95       	ror	r24
 8ce:	08 95       	ret
 8d0:	12 16       	cp	r1, r18
 8d2:	13 06       	cpc	r1, r19
 8d4:	14 06       	cpc	r1, r20
 8d6:	55 1f       	adc	r21, r21
 8d8:	f2 cf       	rjmp	.-28     	; 0x8be <__fp_split3+0xe>
 8da:	46 95       	lsr	r20
 8dc:	f1 df       	rcall	.-30     	; 0x8c0 <__fp_splitA>
 8de:	08 c0       	rjmp	.+16     	; 0x8f0 <__fp_splitA+0x30>
 8e0:	16 16       	cp	r1, r22
 8e2:	17 06       	cpc	r1, r23
 8e4:	18 06       	cpc	r1, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	f1 cf       	rjmp	.-30     	; 0x8cc <__fp_splitA+0xc>
 8ea:	86 95       	lsr	r24
 8ec:	71 05       	cpc	r23, r1
 8ee:	61 05       	cpc	r22, r1
 8f0:	08 94       	sec
 8f2:	08 95       	ret

000008f4 <__fp_zero>:
 8f4:	e8 94       	clt

000008f6 <__fp_szero>:
 8f6:	bb 27       	eor	r27, r27
 8f8:	66 27       	eor	r22, r22
 8fa:	77 27       	eor	r23, r23
 8fc:	cb 01       	movw	r24, r22
 8fe:	97 f9       	bld	r25, 7
 900:	08 95       	ret

00000902 <__mulsf3>:
 902:	0b d0       	rcall	.+22     	; 0x91a <__mulsf3x>
 904:	c4 cf       	rjmp	.-120    	; 0x88e <__fp_round>
 906:	b5 df       	rcall	.-150    	; 0x872 <__fp_pscA>
 908:	28 f0       	brcs	.+10     	; 0x914 <__mulsf3+0x12>
 90a:	ba df       	rcall	.-140    	; 0x880 <__fp_pscB>
 90c:	18 f0       	brcs	.+6      	; 0x914 <__mulsf3+0x12>
 90e:	95 23       	and	r25, r21
 910:	09 f0       	breq	.+2      	; 0x914 <__mulsf3+0x12>
 912:	a6 cf       	rjmp	.-180    	; 0x860 <__fp_inf>
 914:	ab cf       	rjmp	.-170    	; 0x86c <__fp_nan>
 916:	11 24       	eor	r1, r1
 918:	ee cf       	rjmp	.-36     	; 0x8f6 <__fp_szero>

0000091a <__mulsf3x>:
 91a:	ca df       	rcall	.-108    	; 0x8b0 <__fp_split3>
 91c:	a0 f3       	brcs	.-24     	; 0x906 <__mulsf3+0x4>

0000091e <__mulsf3_pse>:
 91e:	95 9f       	mul	r25, r21
 920:	d1 f3       	breq	.-12     	; 0x916 <__mulsf3+0x14>
 922:	95 0f       	add	r25, r21
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	55 1f       	adc	r21, r21
 928:	62 9f       	mul	r22, r18
 92a:	f0 01       	movw	r30, r0
 92c:	72 9f       	mul	r23, r18
 92e:	bb 27       	eor	r27, r27
 930:	f0 0d       	add	r31, r0
 932:	b1 1d       	adc	r27, r1
 934:	63 9f       	mul	r22, r19
 936:	aa 27       	eor	r26, r26
 938:	f0 0d       	add	r31, r0
 93a:	b1 1d       	adc	r27, r1
 93c:	aa 1f       	adc	r26, r26
 93e:	64 9f       	mul	r22, r20
 940:	66 27       	eor	r22, r22
 942:	b0 0d       	add	r27, r0
 944:	a1 1d       	adc	r26, r1
 946:	66 1f       	adc	r22, r22
 948:	82 9f       	mul	r24, r18
 94a:	22 27       	eor	r18, r18
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	62 1f       	adc	r22, r18
 952:	73 9f       	mul	r23, r19
 954:	b0 0d       	add	r27, r0
 956:	a1 1d       	adc	r26, r1
 958:	62 1f       	adc	r22, r18
 95a:	83 9f       	mul	r24, r19
 95c:	a0 0d       	add	r26, r0
 95e:	61 1d       	adc	r22, r1
 960:	22 1f       	adc	r18, r18
 962:	74 9f       	mul	r23, r20
 964:	33 27       	eor	r19, r19
 966:	a0 0d       	add	r26, r0
 968:	61 1d       	adc	r22, r1
 96a:	23 1f       	adc	r18, r19
 96c:	84 9f       	mul	r24, r20
 96e:	60 0d       	add	r22, r0
 970:	21 1d       	adc	r18, r1
 972:	82 2f       	mov	r24, r18
 974:	76 2f       	mov	r23, r22
 976:	6a 2f       	mov	r22, r26
 978:	11 24       	eor	r1, r1
 97a:	9f 57       	subi	r25, 0x7F	; 127
 97c:	50 40       	sbci	r21, 0x00	; 0
 97e:	8a f0       	brmi	.+34     	; 0x9a2 <__mulsf3_pse+0x84>
 980:	e1 f0       	breq	.+56     	; 0x9ba <__mulsf3_pse+0x9c>
 982:	88 23       	and	r24, r24
 984:	4a f0       	brmi	.+18     	; 0x998 <__mulsf3_pse+0x7a>
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	bb 1f       	adc	r27, r27
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	91 50       	subi	r25, 0x01	; 1
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	a9 f7       	brne	.-22     	; 0x982 <__mulsf3_pse+0x64>
 998:	9e 3f       	cpi	r25, 0xFE	; 254
 99a:	51 05       	cpc	r21, r1
 99c:	70 f0       	brcs	.+28     	; 0x9ba <__mulsf3_pse+0x9c>
 99e:	60 cf       	rjmp	.-320    	; 0x860 <__fp_inf>
 9a0:	aa cf       	rjmp	.-172    	; 0x8f6 <__fp_szero>
 9a2:	5f 3f       	cpi	r21, 0xFF	; 255
 9a4:	ec f3       	brlt	.-6      	; 0x9a0 <__mulsf3_pse+0x82>
 9a6:	98 3e       	cpi	r25, 0xE8	; 232
 9a8:	dc f3       	brlt	.-10     	; 0x9a0 <__mulsf3_pse+0x82>
 9aa:	86 95       	lsr	r24
 9ac:	77 95       	ror	r23
 9ae:	67 95       	ror	r22
 9b0:	b7 95       	ror	r27
 9b2:	f7 95       	ror	r31
 9b4:	e7 95       	ror	r30
 9b6:	9f 5f       	subi	r25, 0xFF	; 255
 9b8:	c1 f7       	brne	.-16     	; 0x9aa <__mulsf3_pse+0x8c>
 9ba:	fe 2b       	or	r31, r30
 9bc:	88 0f       	add	r24, r24
 9be:	91 1d       	adc	r25, r1
 9c0:	96 95       	lsr	r25
 9c2:	87 95       	ror	r24
 9c4:	97 f9       	bld	r25, 7
 9c6:	08 95       	ret

000009c8 <__udivmodhi4>:
 9c8:	aa 1b       	sub	r26, r26
 9ca:	bb 1b       	sub	r27, r27
 9cc:	51 e1       	ldi	r21, 0x11	; 17
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <__udivmodhi4_ep>

000009d0 <__udivmodhi4_loop>:
 9d0:	aa 1f       	adc	r26, r26
 9d2:	bb 1f       	adc	r27, r27
 9d4:	a6 17       	cp	r26, r22
 9d6:	b7 07       	cpc	r27, r23
 9d8:	10 f0       	brcs	.+4      	; 0x9de <__udivmodhi4_ep>
 9da:	a6 1b       	sub	r26, r22
 9dc:	b7 0b       	sbc	r27, r23

000009de <__udivmodhi4_ep>:
 9de:	88 1f       	adc	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	5a 95       	dec	r21
 9e4:	a9 f7       	brne	.-22     	; 0x9d0 <__udivmodhi4_loop>
 9e6:	80 95       	com	r24
 9e8:	90 95       	com	r25
 9ea:	bc 01       	movw	r22, r24
 9ec:	cd 01       	movw	r24, r26
 9ee:	08 95       	ret

000009f0 <__tablejump2__>:
 9f0:	ee 0f       	add	r30, r30
 9f2:	ff 1f       	adc	r31, r31

000009f4 <__tablejump__>:
 9f4:	05 90       	lpm	r0, Z+
 9f6:	f4 91       	lpm	r31, Z
 9f8:	e0 2d       	mov	r30, r0
 9fa:	09 94       	ijmp

000009fc <__umulhisi3>:
 9fc:	a2 9f       	mul	r26, r18
 9fe:	b0 01       	movw	r22, r0
 a00:	b3 9f       	mul	r27, r19
 a02:	c0 01       	movw	r24, r0
 a04:	a3 9f       	mul	r26, r19
 a06:	70 0d       	add	r23, r0
 a08:	81 1d       	adc	r24, r1
 a0a:	11 24       	eor	r1, r1
 a0c:	91 1d       	adc	r25, r1
 a0e:	b2 9f       	mul	r27, r18
 a10:	70 0d       	add	r23, r0
 a12:	81 1d       	adc	r24, r1
 a14:	11 24       	eor	r1, r1
 a16:	91 1d       	adc	r25, r1
 a18:	08 95       	ret

00000a1a <malloc>:
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	82 30       	cpi	r24, 0x02	; 2
 a20:	91 05       	cpc	r25, r1
 a22:	10 f4       	brcc	.+4      	; 0xa28 <malloc+0xe>
 a24:	82 e0       	ldi	r24, 0x02	; 2
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	e0 91 2d 01 	lds	r30, 0x012D
 a2c:	f0 91 2e 01 	lds	r31, 0x012E
 a30:	20 e0       	ldi	r18, 0x00	; 0
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	a0 e0       	ldi	r26, 0x00	; 0
 a36:	b0 e0       	ldi	r27, 0x00	; 0
 a38:	30 97       	sbiw	r30, 0x00	; 0
 a3a:	39 f1       	breq	.+78     	; 0xa8a <malloc+0x70>
 a3c:	40 81       	ld	r20, Z
 a3e:	51 81       	ldd	r21, Z+1	; 0x01
 a40:	48 17       	cp	r20, r24
 a42:	59 07       	cpc	r21, r25
 a44:	b8 f0       	brcs	.+46     	; 0xa74 <malloc+0x5a>
 a46:	48 17       	cp	r20, r24
 a48:	59 07       	cpc	r21, r25
 a4a:	71 f4       	brne	.+28     	; 0xa68 <malloc+0x4e>
 a4c:	82 81       	ldd	r24, Z+2	; 0x02
 a4e:	93 81       	ldd	r25, Z+3	; 0x03
 a50:	10 97       	sbiw	r26, 0x00	; 0
 a52:	29 f0       	breq	.+10     	; 0xa5e <malloc+0x44>
 a54:	13 96       	adiw	r26, 0x03	; 3
 a56:	9c 93       	st	X, r25
 a58:	8e 93       	st	-X, r24
 a5a:	12 97       	sbiw	r26, 0x02	; 2
 a5c:	2c c0       	rjmp	.+88     	; 0xab6 <malloc+0x9c>
 a5e:	90 93 2e 01 	sts	0x012E, r25
 a62:	80 93 2d 01 	sts	0x012D, r24
 a66:	27 c0       	rjmp	.+78     	; 0xab6 <malloc+0x9c>
 a68:	21 15       	cp	r18, r1
 a6a:	31 05       	cpc	r19, r1
 a6c:	31 f0       	breq	.+12     	; 0xa7a <malloc+0x60>
 a6e:	42 17       	cp	r20, r18
 a70:	53 07       	cpc	r21, r19
 a72:	18 f0       	brcs	.+6      	; 0xa7a <malloc+0x60>
 a74:	a9 01       	movw	r20, r18
 a76:	db 01       	movw	r26, r22
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <malloc+0x62>
 a7a:	ef 01       	movw	r28, r30
 a7c:	9a 01       	movw	r18, r20
 a7e:	bd 01       	movw	r22, r26
 a80:	df 01       	movw	r26, r30
 a82:	02 80       	ldd	r0, Z+2	; 0x02
 a84:	f3 81       	ldd	r31, Z+3	; 0x03
 a86:	e0 2d       	mov	r30, r0
 a88:	d7 cf       	rjmp	.-82     	; 0xa38 <malloc+0x1e>
 a8a:	21 15       	cp	r18, r1
 a8c:	31 05       	cpc	r19, r1
 a8e:	f9 f0       	breq	.+62     	; 0xace <malloc+0xb4>
 a90:	28 1b       	sub	r18, r24
 a92:	39 0b       	sbc	r19, r25
 a94:	24 30       	cpi	r18, 0x04	; 4
 a96:	31 05       	cpc	r19, r1
 a98:	80 f4       	brcc	.+32     	; 0xaba <malloc+0xa0>
 a9a:	8a 81       	ldd	r24, Y+2	; 0x02
 a9c:	9b 81       	ldd	r25, Y+3	; 0x03
 a9e:	61 15       	cp	r22, r1
 aa0:	71 05       	cpc	r23, r1
 aa2:	21 f0       	breq	.+8      	; 0xaac <malloc+0x92>
 aa4:	fb 01       	movw	r30, r22
 aa6:	93 83       	std	Z+3, r25	; 0x03
 aa8:	82 83       	std	Z+2, r24	; 0x02
 aaa:	04 c0       	rjmp	.+8      	; 0xab4 <malloc+0x9a>
 aac:	90 93 2e 01 	sts	0x012E, r25
 ab0:	80 93 2d 01 	sts	0x012D, r24
 ab4:	fe 01       	movw	r30, r28
 ab6:	32 96       	adiw	r30, 0x02	; 2
 ab8:	44 c0       	rjmp	.+136    	; 0xb42 <__stack+0x43>
 aba:	fe 01       	movw	r30, r28
 abc:	e2 0f       	add	r30, r18
 abe:	f3 1f       	adc	r31, r19
 ac0:	81 93       	st	Z+, r24
 ac2:	91 93       	st	Z+, r25
 ac4:	22 50       	subi	r18, 0x02	; 2
 ac6:	31 09       	sbc	r19, r1
 ac8:	39 83       	std	Y+1, r19	; 0x01
 aca:	28 83       	st	Y, r18
 acc:	3a c0       	rjmp	.+116    	; 0xb42 <__stack+0x43>
 ace:	20 91 2b 01 	lds	r18, 0x012B
 ad2:	30 91 2c 01 	lds	r19, 0x012C
 ad6:	23 2b       	or	r18, r19
 ad8:	41 f4       	brne	.+16     	; 0xaea <malloc+0xd0>
 ada:	20 91 02 01 	lds	r18, 0x0102
 ade:	30 91 03 01 	lds	r19, 0x0103
 ae2:	30 93 2c 01 	sts	0x012C, r19
 ae6:	20 93 2b 01 	sts	0x012B, r18
 aea:	20 91 00 01 	lds	r18, 0x0100
 aee:	30 91 01 01 	lds	r19, 0x0101
 af2:	21 15       	cp	r18, r1
 af4:	31 05       	cpc	r19, r1
 af6:	41 f4       	brne	.+16     	; 0xb08 <__stack+0x9>
 af8:	2d b7       	in	r18, 0x3d	; 61
 afa:	3e b7       	in	r19, 0x3e	; 62
 afc:	40 91 04 01 	lds	r20, 0x0104
 b00:	50 91 05 01 	lds	r21, 0x0105
 b04:	24 1b       	sub	r18, r20
 b06:	35 0b       	sbc	r19, r21
 b08:	e0 91 2b 01 	lds	r30, 0x012B
 b0c:	f0 91 2c 01 	lds	r31, 0x012C
 b10:	e2 17       	cp	r30, r18
 b12:	f3 07       	cpc	r31, r19
 b14:	a0 f4       	brcc	.+40     	; 0xb3e <__stack+0x3f>
 b16:	2e 1b       	sub	r18, r30
 b18:	3f 0b       	sbc	r19, r31
 b1a:	28 17       	cp	r18, r24
 b1c:	39 07       	cpc	r19, r25
 b1e:	78 f0       	brcs	.+30     	; 0xb3e <__stack+0x3f>
 b20:	ac 01       	movw	r20, r24
 b22:	4e 5f       	subi	r20, 0xFE	; 254
 b24:	5f 4f       	sbci	r21, 0xFF	; 255
 b26:	24 17       	cp	r18, r20
 b28:	35 07       	cpc	r19, r21
 b2a:	48 f0       	brcs	.+18     	; 0xb3e <__stack+0x3f>
 b2c:	4e 0f       	add	r20, r30
 b2e:	5f 1f       	adc	r21, r31
 b30:	50 93 2c 01 	sts	0x012C, r21
 b34:	40 93 2b 01 	sts	0x012B, r20
 b38:	81 93       	st	Z+, r24
 b3a:	91 93       	st	Z+, r25
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <__stack+0x43>
 b3e:	e0 e0       	ldi	r30, 0x00	; 0
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	cf 01       	movw	r24, r30
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	08 95       	ret

00000b4a <free>:
 b4a:	cf 93       	push	r28
 b4c:	df 93       	push	r29
 b4e:	00 97       	sbiw	r24, 0x00	; 0
 b50:	09 f4       	brne	.+2      	; 0xb54 <free+0xa>
 b52:	87 c0       	rjmp	.+270    	; 0xc62 <free+0x118>
 b54:	fc 01       	movw	r30, r24
 b56:	32 97       	sbiw	r30, 0x02	; 2
 b58:	13 82       	std	Z+3, r1	; 0x03
 b5a:	12 82       	std	Z+2, r1	; 0x02
 b5c:	c0 91 2d 01 	lds	r28, 0x012D
 b60:	d0 91 2e 01 	lds	r29, 0x012E
 b64:	20 97       	sbiw	r28, 0x00	; 0
 b66:	81 f4       	brne	.+32     	; 0xb88 <free+0x3e>
 b68:	20 81       	ld	r18, Z
 b6a:	31 81       	ldd	r19, Z+1	; 0x01
 b6c:	28 0f       	add	r18, r24
 b6e:	39 1f       	adc	r19, r25
 b70:	80 91 2b 01 	lds	r24, 0x012B
 b74:	90 91 2c 01 	lds	r25, 0x012C
 b78:	82 17       	cp	r24, r18
 b7a:	93 07       	cpc	r25, r19
 b7c:	79 f5       	brne	.+94     	; 0xbdc <free+0x92>
 b7e:	f0 93 2c 01 	sts	0x012C, r31
 b82:	e0 93 2b 01 	sts	0x012B, r30
 b86:	6d c0       	rjmp	.+218    	; 0xc62 <free+0x118>
 b88:	de 01       	movw	r26, r28
 b8a:	20 e0       	ldi	r18, 0x00	; 0
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	ae 17       	cp	r26, r30
 b90:	bf 07       	cpc	r27, r31
 b92:	50 f4       	brcc	.+20     	; 0xba8 <free+0x5e>
 b94:	12 96       	adiw	r26, 0x02	; 2
 b96:	4d 91       	ld	r20, X+
 b98:	5c 91       	ld	r21, X
 b9a:	13 97       	sbiw	r26, 0x03	; 3
 b9c:	9d 01       	movw	r18, r26
 b9e:	41 15       	cp	r20, r1
 ba0:	51 05       	cpc	r21, r1
 ba2:	09 f1       	breq	.+66     	; 0xbe6 <free+0x9c>
 ba4:	da 01       	movw	r26, r20
 ba6:	f3 cf       	rjmp	.-26     	; 0xb8e <free+0x44>
 ba8:	b3 83       	std	Z+3, r27	; 0x03
 baa:	a2 83       	std	Z+2, r26	; 0x02
 bac:	40 81       	ld	r20, Z
 bae:	51 81       	ldd	r21, Z+1	; 0x01
 bb0:	84 0f       	add	r24, r20
 bb2:	95 1f       	adc	r25, r21
 bb4:	8a 17       	cp	r24, r26
 bb6:	9b 07       	cpc	r25, r27
 bb8:	71 f4       	brne	.+28     	; 0xbd6 <free+0x8c>
 bba:	8d 91       	ld	r24, X+
 bbc:	9c 91       	ld	r25, X
 bbe:	11 97       	sbiw	r26, 0x01	; 1
 bc0:	84 0f       	add	r24, r20
 bc2:	95 1f       	adc	r25, r21
 bc4:	02 96       	adiw	r24, 0x02	; 2
 bc6:	91 83       	std	Z+1, r25	; 0x01
 bc8:	80 83       	st	Z, r24
 bca:	12 96       	adiw	r26, 0x02	; 2
 bcc:	8d 91       	ld	r24, X+
 bce:	9c 91       	ld	r25, X
 bd0:	13 97       	sbiw	r26, 0x03	; 3
 bd2:	93 83       	std	Z+3, r25	; 0x03
 bd4:	82 83       	std	Z+2, r24	; 0x02
 bd6:	21 15       	cp	r18, r1
 bd8:	31 05       	cpc	r19, r1
 bda:	29 f4       	brne	.+10     	; 0xbe6 <free+0x9c>
 bdc:	f0 93 2e 01 	sts	0x012E, r31
 be0:	e0 93 2d 01 	sts	0x012D, r30
 be4:	3e c0       	rjmp	.+124    	; 0xc62 <free+0x118>
 be6:	d9 01       	movw	r26, r18
 be8:	13 96       	adiw	r26, 0x03	; 3
 bea:	fc 93       	st	X, r31
 bec:	ee 93       	st	-X, r30
 bee:	12 97       	sbiw	r26, 0x02	; 2
 bf0:	4d 91       	ld	r20, X+
 bf2:	5d 91       	ld	r21, X+
 bf4:	a4 0f       	add	r26, r20
 bf6:	b5 1f       	adc	r27, r21
 bf8:	ea 17       	cp	r30, r26
 bfa:	fb 07       	cpc	r31, r27
 bfc:	79 f4       	brne	.+30     	; 0xc1c <free+0xd2>
 bfe:	80 81       	ld	r24, Z
 c00:	91 81       	ldd	r25, Z+1	; 0x01
 c02:	84 0f       	add	r24, r20
 c04:	95 1f       	adc	r25, r21
 c06:	02 96       	adiw	r24, 0x02	; 2
 c08:	d9 01       	movw	r26, r18
 c0a:	11 96       	adiw	r26, 0x01	; 1
 c0c:	9c 93       	st	X, r25
 c0e:	8e 93       	st	-X, r24
 c10:	82 81       	ldd	r24, Z+2	; 0x02
 c12:	93 81       	ldd	r25, Z+3	; 0x03
 c14:	13 96       	adiw	r26, 0x03	; 3
 c16:	9c 93       	st	X, r25
 c18:	8e 93       	st	-X, r24
 c1a:	12 97       	sbiw	r26, 0x02	; 2
 c1c:	e0 e0       	ldi	r30, 0x00	; 0
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	8a 81       	ldd	r24, Y+2	; 0x02
 c22:	9b 81       	ldd	r25, Y+3	; 0x03
 c24:	00 97       	sbiw	r24, 0x00	; 0
 c26:	19 f0       	breq	.+6      	; 0xc2e <free+0xe4>
 c28:	fe 01       	movw	r30, r28
 c2a:	ec 01       	movw	r28, r24
 c2c:	f9 cf       	rjmp	.-14     	; 0xc20 <free+0xd6>
 c2e:	ce 01       	movw	r24, r28
 c30:	02 96       	adiw	r24, 0x02	; 2
 c32:	28 81       	ld	r18, Y
 c34:	39 81       	ldd	r19, Y+1	; 0x01
 c36:	82 0f       	add	r24, r18
 c38:	93 1f       	adc	r25, r19
 c3a:	20 91 2b 01 	lds	r18, 0x012B
 c3e:	30 91 2c 01 	lds	r19, 0x012C
 c42:	28 17       	cp	r18, r24
 c44:	39 07       	cpc	r19, r25
 c46:	69 f4       	brne	.+26     	; 0xc62 <free+0x118>
 c48:	30 97       	sbiw	r30, 0x00	; 0
 c4a:	29 f4       	brne	.+10     	; 0xc56 <free+0x10c>
 c4c:	10 92 2e 01 	sts	0x012E, r1
 c50:	10 92 2d 01 	sts	0x012D, r1
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <free+0x110>
 c56:	13 82       	std	Z+3, r1	; 0x03
 c58:	12 82       	std	Z+2, r1	; 0x02
 c5a:	d0 93 2c 01 	sts	0x012C, r29
 c5e:	c0 93 2b 01 	sts	0x012B, r28
 c62:	df 91       	pop	r29
 c64:	cf 91       	pop	r28
 c66:	08 95       	ret

00000c68 <_exit>:
 c68:	f8 94       	cli

00000c6a <__stop_program>:
 c6a:	ff cf       	rjmp	.-2      	; 0xc6a <__stop_program>
