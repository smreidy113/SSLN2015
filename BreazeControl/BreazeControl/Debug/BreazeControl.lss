
BreazeControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800100  00800100  000004c2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c27  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000038  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000028a  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000016c  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000202  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000068  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000161  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000141  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000028  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_29>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a4 32       	cpi	r26, 0x24	; 36
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
  cc:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <chooseInput>:
int i = 0;
int flag = 0;
int ADCarr[8] = {0, 0, 0, 0, 0, 0, 0, 0};

void chooseInput(int i) {
	switch (i) {
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <chooseInput+0x8>
  da:	49 c0       	rjmp	.+146    	; 0x16e <chooseInput+0x9a>
  dc:	3c f4       	brge	.+14     	; 0xec <chooseInput+0x18>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	19 f1       	breq	.+70     	; 0x12a <chooseInput+0x56>
  e4:	9c f5       	brge	.+102    	; 0x14c <chooseInput+0x78>
  e6:	89 2b       	or	r24, r25
  e8:	79 f0       	breq	.+30     	; 0x108 <chooseInput+0x34>
  ea:	08 95       	ret
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	91 05       	cpc	r25, r1
  f0:	09 f4       	brne	.+2      	; 0xf4 <chooseInput+0x20>
  f2:	5f c0       	rjmp	.+190    	; 0x1b2 <chooseInput+0xde>
  f4:	0c f4       	brge	.+2      	; 0xf8 <chooseInput+0x24>
  f6:	4c c0       	rjmp	.+152    	; 0x190 <chooseInput+0xbc>
  f8:	86 30       	cpi	r24, 0x06	; 6
  fa:	91 05       	cpc	r25, r1
  fc:	09 f4       	brne	.+2      	; 0x100 <chooseInput+0x2c>
  fe:	6a c0       	rjmp	.+212    	; 0x1d4 <chooseInput+0x100>
 100:	07 97       	sbiw	r24, 0x07	; 7
 102:	09 f0       	breq	.+2      	; 0x106 <chooseInput+0x32>
 104:	88 c0       	rjmp	.+272    	; 0x216 <chooseInput+0x142>
 106:	77 c0       	rjmp	.+238    	; 0x1f6 <chooseInput+0x122>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
 108:	eb e7       	ldi	r30, 0x7B	; 123
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 11c:	80 81       	ld	r24, Z
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 122:	80 81       	ld	r24, Z
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	80 83       	st	Z, r24

		break;
 128:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
 12a:	eb e7       	ldi	r30, 0x7B	; 123
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 7d       	andi	r24, 0xDF	; 223
 132:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 13e:	80 81       	ld	r24, Z
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24

		break;
 14a:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
 14c:	eb e7       	ldi	r30, 0x7B	; 123
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 160:	80 81       	ld	r24, Z
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 166:	80 81       	ld	r24, Z
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 83       	st	Z, r24

		break;
 16c:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
 16e:	eb e7       	ldi	r30, 0x7B	; 123
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 178:	ec e7       	ldi	r30, 0x7C	; 124
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 182:	80 81       	ld	r24, Z
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 188:	80 81       	ld	r24, Z
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	80 83       	st	Z, r24
		break;
 18e:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
 190:	eb e7       	ldi	r30, 0x7B	; 123
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 19a:	ec e7       	ldi	r30, 0x7C	; 124
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
 1a4:	80 81       	ld	r24, Z
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1aa:	80 81       	ld	r24, Z
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	80 83       	st	Z, r24
		break;
 1b0:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
 1b2:	eb e7       	ldi	r30, 0x7B	; 123
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1bc:	ec e7       	ldi	r30, 0x7C	; 124
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1c6:	80 81       	ld	r24, Z
 1c8:	8d 7f       	andi	r24, 0xFD	; 253
 1ca:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1cc:	80 81       	ld	r24, Z
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	80 83       	st	Z, r24
		break;
 1d2:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
 1d4:	eb e7       	ldi	r30, 0x7B	; 123
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1de:	ec e7       	ldi	r30, 0x7C	; 124
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1e8:	80 81       	ld	r24, Z
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 1ee:	80 81       	ld	r24, Z
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	80 83       	st	Z, r24
		break;
 1f4:	08 95       	ret
		case 7:
		clear(ADCSRB, MUX5);//Set analog input (F7)
 1f6:	eb e7       	ldi	r30, 0x7B	; 123
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 7d       	andi	r24, 0xDF	; 223
 1fe:	80 83       	st	Z, r24
		set(ADMUX, MUX2);
 200:	ec e7       	ldi	r30, 0x7C	; 124
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
		set(ADMUX, MUX1);
 20a:	80 81       	ld	r24, Z
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
		set(ADMUX, MUX0);
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <getADC>:
int ADC6 = 0;
int ADC7 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
 218:	80 91 00 01 	lds	r24, 0x0100
 21c:	90 91 01 01 	lds	r25, 0x0101
 220:	89 2b       	or	r24, r25
 222:	09 f4       	brne	.+2      	; 0x226 <getADC+0xe>
 224:	9c c0       	rjmp	.+312    	; 0x35e <getADC+0x146>
		switch (flag) {
 226:	80 91 22 01 	lds	r24, 0x0122
 22a:	90 91 23 01 	lds	r25, 0x0123
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	91 05       	cpc	r25, r1
 232:	71 f1       	breq	.+92     	; 0x290 <getADC+0x78>
 234:	3c f4       	brge	.+14     	; 0x244 <getADC+0x2c>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 05       	cpc	r25, r1
 23a:	c1 f0       	breq	.+48     	; 0x26c <getADC+0x54>
 23c:	04 f5       	brge	.+64     	; 0x27e <getADC+0x66>
 23e:	89 2b       	or	r24, r25
 240:	61 f0       	breq	.+24     	; 0x25a <getADC+0x42>
 242:	52 c0       	rjmp	.+164    	; 0x2e8 <getADC+0xd0>
 244:	85 30       	cpi	r24, 0x05	; 5
 246:	91 05       	cpc	r25, r1
 248:	a9 f1       	breq	.+106    	; 0x2b4 <getADC+0x9c>
 24a:	5c f1       	brlt	.+86     	; 0x2a2 <getADC+0x8a>
 24c:	86 30       	cpi	r24, 0x06	; 6
 24e:	91 05       	cpc	r25, r1
 250:	d1 f1       	breq	.+116    	; 0x2c6 <getADC+0xae>
 252:	07 97       	sbiw	r24, 0x07	; 7
 254:	09 f0       	breq	.+2      	; 0x258 <getADC+0x40>
 256:	48 c0       	rjmp	.+144    	; 0x2e8 <getADC+0xd0>
 258:	3f c0       	rjmp	.+126    	; 0x2d8 <getADC+0xc0>
			case 0:
			ADC0 = ADC;
 25a:	80 91 78 00 	lds	r24, 0x0078
 25e:	90 91 79 00 	lds	r25, 0x0079
 262:	90 93 11 01 	sts	0x0111, r25
 266:	80 93 10 01 	sts	0x0110, r24
			break;
 26a:	3e c0       	rjmp	.+124    	; 0x2e8 <getADC+0xd0>
			case 1:
			ADC1 = ADC;
 26c:	80 91 78 00 	lds	r24, 0x0078
 270:	90 91 79 00 	lds	r25, 0x0079
 274:	90 93 0f 01 	sts	0x010F, r25
 278:	80 93 0e 01 	sts	0x010E, r24
			break;
 27c:	35 c0       	rjmp	.+106    	; 0x2e8 <getADC+0xd0>
			case 2:
			ADC2 = ADC;
 27e:	80 91 78 00 	lds	r24, 0x0078
 282:	90 91 79 00 	lds	r25, 0x0079
 286:	90 93 0d 01 	sts	0x010D, r25
 28a:	80 93 0c 01 	sts	0x010C, r24
			break;
 28e:	2c c0       	rjmp	.+88     	; 0x2e8 <getADC+0xd0>
			case 3:
			ADC3 = ADC;
 290:	80 91 78 00 	lds	r24, 0x0078
 294:	90 91 79 00 	lds	r25, 0x0079
 298:	90 93 0b 01 	sts	0x010B, r25
 29c:	80 93 0a 01 	sts	0x010A, r24
			break;
 2a0:	23 c0       	rjmp	.+70     	; 0x2e8 <getADC+0xd0>
			case 4:
			ADC4 = ADC;
 2a2:	80 91 78 00 	lds	r24, 0x0078
 2a6:	90 91 79 00 	lds	r25, 0x0079
 2aa:	90 93 09 01 	sts	0x0109, r25
 2ae:	80 93 08 01 	sts	0x0108, r24
			break;
 2b2:	1a c0       	rjmp	.+52     	; 0x2e8 <getADC+0xd0>
			case 5:
			ADC5 = ADC;
 2b4:	80 91 78 00 	lds	r24, 0x0078
 2b8:	90 91 79 00 	lds	r25, 0x0079
 2bc:	90 93 07 01 	sts	0x0107, r25
 2c0:	80 93 06 01 	sts	0x0106, r24
			break;
 2c4:	11 c0       	rjmp	.+34     	; 0x2e8 <getADC+0xd0>
			case 6:
			ADC6 = ADC;
 2c6:	80 91 78 00 	lds	r24, 0x0078
 2ca:	90 91 79 00 	lds	r25, 0x0079
 2ce:	90 93 05 01 	sts	0x0105, r25
 2d2:	80 93 04 01 	sts	0x0104, r24
			break;
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <getADC+0xd0>
			case 7:
			ADC7 = ADC;
 2d8:	80 91 78 00 	lds	r24, 0x0078
 2dc:	90 91 79 00 	lds	r25, 0x0079
 2e0:	90 93 03 01 	sts	0x0103, r25
 2e4:	80 93 02 01 	sts	0x0102, r24
			break;
		}
		clear(ADCSRA, ADEN);	//Enable/Start conversion
 2e8:	ea e7       	ldi	r30, 0x7A	; 122
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 77       	andi	r24, 0x7F	; 127
 2f0:	80 83       	st	Z, r24
		clear(ADCSRA, ADSC);	//^
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 7b       	andi	r24, 0xBF	; 191
 2f6:	80 83       	st	Z, r24
		clear(ADCSRA, ADATE);
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 7d       	andi	r24, 0xDF	; 223
 2fc:	80 83       	st	Z, r24
		clear(ADCSRA, ADIF);
 2fe:	80 81       	ld	r24, Z
 300:	8f 7e       	andi	r24, 0xEF	; 239
 302:	80 83       	st	Z, r24
		if (flag >= 0 && flag < 8) {
 304:	80 91 22 01 	lds	r24, 0x0122
 308:	90 91 23 01 	lds	r25, 0x0123
 30c:	88 30       	cpi	r24, 0x08	; 8
 30e:	91 05       	cpc	r25, r1
 310:	a0 f4       	brcc	.+40     	; 0x33a <getADC+0x122>
			flag = (flag + 1) % 8;
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	9c 01       	movw	r18, r24
 316:	27 70       	andi	r18, 0x07	; 7
 318:	30 78       	andi	r19, 0x80	; 128
 31a:	33 23       	and	r19, r19
 31c:	34 f4       	brge	.+12     	; 0x32a <getADC+0x112>
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	31 09       	sbc	r19, r1
 322:	28 6f       	ori	r18, 0xF8	; 248
 324:	3f 6f       	ori	r19, 0xFF	; 255
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	3f 4f       	sbci	r19, 0xFF	; 255
 32a:	20 93 22 01 	sts	0x0122, r18
 32e:	30 93 23 01 	sts	0x0123, r19
			chooseInput(flag);
 332:	82 2f       	mov	r24, r18
 334:	93 2f       	mov	r25, r19
 336:	0e 94 6a 00 	call	0xd4	; 0xd4 <chooseInput>
		}
		set(ADCSRA, ADATE);	//Set trigger to free-running mode
 33a:	ea e7       	ldi	r30, 0x7A	; 122
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	80 62       	ori	r24, 0x20	; 32
 342:	80 83       	st	Z, r24
		set(ADCSRA, ADEN);	//Enable/Start conversion
 344:	80 81       	ld	r24, Z
 346:	80 68       	ori	r24, 0x80	; 128
 348:	80 83       	st	Z, r24
		set(ADCSRA, ADSC);	//^
 34a:	80 81       	ld	r24, Z
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	80 83       	st	Z, r24
		
		set(ADCSRA, ADIF);	//Enable reading results
 350:	80 81       	ld	r24, Z
 352:	80 61       	ori	r24, 0x10	; 16
 354:	80 83       	st	Z, r24
		conversion = 0;
 356:	10 92 01 01 	sts	0x0101, r1
 35a:	10 92 00 01 	sts	0x0100, r1
	}

	ADCarr[0] = ADC0;
 35e:	80 91 10 01 	lds	r24, 0x0110
 362:	90 91 11 01 	lds	r25, 0x0111
 366:	90 93 13 01 	sts	0x0113, r25
 36a:	80 93 12 01 	sts	0x0112, r24
	ADCarr[1] = ADC1;
 36e:	80 91 0e 01 	lds	r24, 0x010E
 372:	90 91 0f 01 	lds	r25, 0x010F
 376:	90 93 15 01 	sts	0x0115, r25
 37a:	80 93 14 01 	sts	0x0114, r24
	ADCarr[2] = ADC2;
 37e:	80 91 0c 01 	lds	r24, 0x010C
 382:	90 91 0d 01 	lds	r25, 0x010D
 386:	90 93 17 01 	sts	0x0117, r25
 38a:	80 93 16 01 	sts	0x0116, r24
	ADCarr[3] = ADC3;
 38e:	80 91 0a 01 	lds	r24, 0x010A
 392:	90 91 0b 01 	lds	r25, 0x010B
 396:	90 93 19 01 	sts	0x0119, r25
 39a:	80 93 18 01 	sts	0x0118, r24
	ADCarr[4] = ADC4;
 39e:	80 91 08 01 	lds	r24, 0x0108
 3a2:	90 91 09 01 	lds	r25, 0x0109
 3a6:	90 93 1b 01 	sts	0x011B, r25
 3aa:	80 93 1a 01 	sts	0x011A, r24
	ADCarr[5] = ADC5;
 3ae:	80 91 06 01 	lds	r24, 0x0106
 3b2:	90 91 07 01 	lds	r25, 0x0107
 3b6:	90 93 1d 01 	sts	0x011D, r25
 3ba:	80 93 1c 01 	sts	0x011C, r24
	ADCarr[6] = ADC6;
 3be:	80 91 04 01 	lds	r24, 0x0104
 3c2:	90 91 05 01 	lds	r25, 0x0105
 3c6:	90 93 1f 01 	sts	0x011F, r25
 3ca:	80 93 1e 01 	sts	0x011E, r24
	ADCarr[7] = ADC7;
 3ce:	80 91 02 01 	lds	r24, 0x0102
 3d2:	90 91 03 01 	lds	r25, 0x0103
 3d6:	90 93 21 01 	sts	0x0121, r25
 3da:	80 93 20 01 	sts	0x0120, r24
 3de:	08 95       	ret

000003e0 <main>:
int main(void)
{
    while(1)
    {
        m_wait(100);
		m_red(TOGGLE);
 3e0:	c0 e4       	ldi	r28, 0x40	; 64
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e2:	2f ef       	ldi	r18, 0xFF	; 255
 3e4:	81 ee       	ldi	r24, 0xE1	; 225
 3e6:	94 e0       	ldi	r25, 0x04	; 4
 3e8:	21 50       	subi	r18, 0x01	; 1
 3ea:	80 40       	sbci	r24, 0x00	; 0
 3ec:	90 40       	sbci	r25, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <main+0x8>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <main+0x12>
 3f2:	00 00       	nop
 3f4:	6e 9a       	sbi	0x0d, 6	; 13
 3f6:	8e b1       	in	r24, 0x0e	; 14
 3f8:	8c 27       	eor	r24, r28
 3fa:	8e b9       	out	0x0e, r24	; 14
		getADC();
 3fc:	0e 94 0c 01 	call	0x218	; 0x218 <getADC>
 400:	f0 cf       	rjmp	.-32     	; 0x3e2 <main+0x2>

00000402 <__vector_29>:
    }
}

ISR(ADC_vect) {
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
	//cli();
	conversion = 1;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	90 93 01 01 	sts	0x0101, r25
 418:	80 93 00 01 	sts	0x0100, r24
	//sei();
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
