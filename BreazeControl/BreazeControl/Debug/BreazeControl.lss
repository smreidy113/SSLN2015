
BreazeControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000009ce  00000a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800100  00800100  00000a62  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000067f  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002c8b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00002cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000379  00000000  00000000  00002d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f3  00000000  00000000  0000307b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000026c  00000000  00000000  0000326e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000009c  00000000  00000000  000034dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ab  00000000  00000000  00003578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000249  00000000  00000000  00003723  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_29>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a9 32       	cpi	r26, 0x29	; 41
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 33 02 	call	0x466	; 0x466 <main>
  cc:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <chooseInput>:
	
char state = 0;
float spd = 0;

void chooseInput(int i) {
	switch (i) {
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <chooseInput+0x8>
  da:	49 c0       	rjmp	.+146    	; 0x16e <chooseInput+0x9a>
  dc:	3c f4       	brge	.+14     	; 0xec <chooseInput+0x18>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	19 f1       	breq	.+70     	; 0x12a <chooseInput+0x56>
  e4:	9c f5       	brge	.+102    	; 0x14c <chooseInput+0x78>
  e6:	89 2b       	or	r24, r25
  e8:	79 f0       	breq	.+30     	; 0x108 <chooseInput+0x34>
  ea:	08 95       	ret
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	91 05       	cpc	r25, r1
  f0:	09 f4       	brne	.+2      	; 0xf4 <chooseInput+0x20>
  f2:	5f c0       	rjmp	.+190    	; 0x1b2 <chooseInput+0xde>
  f4:	0c f4       	brge	.+2      	; 0xf8 <chooseInput+0x24>
  f6:	4c c0       	rjmp	.+152    	; 0x190 <chooseInput+0xbc>
  f8:	86 30       	cpi	r24, 0x06	; 6
  fa:	91 05       	cpc	r25, r1
  fc:	09 f4       	brne	.+2      	; 0x100 <chooseInput+0x2c>
  fe:	6a c0       	rjmp	.+212    	; 0x1d4 <chooseInput+0x100>
 100:	07 97       	sbiw	r24, 0x07	; 7
 102:	09 f0       	breq	.+2      	; 0x106 <chooseInput+0x32>
 104:	88 c0       	rjmp	.+272    	; 0x216 <chooseInput+0x142>
 106:	77 c0       	rjmp	.+238    	; 0x1f6 <chooseInput+0x122>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
 108:	eb e7       	ldi	r30, 0x7B	; 123
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 11c:	80 81       	ld	r24, Z
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 122:	80 81       	ld	r24, Z
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	80 83       	st	Z, r24

		break;
 128:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
 12a:	eb e7       	ldi	r30, 0x7B	; 123
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 7d       	andi	r24, 0xDF	; 223
 132:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 13e:	80 81       	ld	r24, Z
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24

		break;
 14a:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
 14c:	eb e7       	ldi	r30, 0x7B	; 123
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 160:	80 81       	ld	r24, Z
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 166:	80 81       	ld	r24, Z
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 83       	st	Z, r24

		break;
 16c:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
 16e:	eb e7       	ldi	r30, 0x7B	; 123
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 178:	ec e7       	ldi	r30, 0x7C	; 124
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 182:	80 81       	ld	r24, Z
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 188:	80 81       	ld	r24, Z
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	80 83       	st	Z, r24
		break;
 18e:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
 190:	eb e7       	ldi	r30, 0x7B	; 123
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 19a:	ec e7       	ldi	r30, 0x7C	; 124
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
 1a4:	80 81       	ld	r24, Z
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1aa:	80 81       	ld	r24, Z
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	80 83       	st	Z, r24
		break;
 1b0:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
 1b2:	eb e7       	ldi	r30, 0x7B	; 123
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1bc:	ec e7       	ldi	r30, 0x7C	; 124
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1c6:	80 81       	ld	r24, Z
 1c8:	8d 7f       	andi	r24, 0xFD	; 253
 1ca:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1cc:	80 81       	ld	r24, Z
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	80 83       	st	Z, r24
		break;
 1d2:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
 1d4:	eb e7       	ldi	r30, 0x7B	; 123
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1de:	ec e7       	ldi	r30, 0x7C	; 124
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1e8:	80 81       	ld	r24, Z
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 1ee:	80 81       	ld	r24, Z
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	80 83       	st	Z, r24
		break;
 1f4:	08 95       	ret
		case 7:
		clear(ADCSRB, MUX5);//Set analog input (F7)
 1f6:	eb e7       	ldi	r30, 0x7B	; 123
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 7d       	andi	r24, 0xDF	; 223
 1fe:	80 83       	st	Z, r24
		set(ADMUX, MUX2);
 200:	ec e7       	ldi	r30, 0x7C	; 124
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
		set(ADMUX, MUX1);
 20a:	80 81       	ld	r24, Z
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
		set(ADMUX, MUX0);
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <getADC>:
int ADC6 = 0;
int ADC7 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
 218:	80 91 00 01 	lds	r24, 0x0100
 21c:	90 91 01 01 	lds	r25, 0x0101
 220:	89 2b       	or	r24, r25
 222:	09 f4       	brne	.+2      	; 0x226 <getADC+0xe>
 224:	9c c0       	rjmp	.+312    	; 0x35e <getADC+0x146>
		switch (flag) {
 226:	80 91 27 01 	lds	r24, 0x0127
 22a:	90 91 28 01 	lds	r25, 0x0128
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	91 05       	cpc	r25, r1
 232:	71 f1       	breq	.+92     	; 0x290 <getADC+0x78>
 234:	3c f4       	brge	.+14     	; 0x244 <getADC+0x2c>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 05       	cpc	r25, r1
 23a:	c1 f0       	breq	.+48     	; 0x26c <getADC+0x54>
 23c:	04 f5       	brge	.+64     	; 0x27e <getADC+0x66>
 23e:	89 2b       	or	r24, r25
 240:	61 f0       	breq	.+24     	; 0x25a <getADC+0x42>
 242:	52 c0       	rjmp	.+164    	; 0x2e8 <getADC+0xd0>
 244:	85 30       	cpi	r24, 0x05	; 5
 246:	91 05       	cpc	r25, r1
 248:	a9 f1       	breq	.+106    	; 0x2b4 <getADC+0x9c>
 24a:	5c f1       	brlt	.+86     	; 0x2a2 <getADC+0x8a>
 24c:	86 30       	cpi	r24, 0x06	; 6
 24e:	91 05       	cpc	r25, r1
 250:	d1 f1       	breq	.+116    	; 0x2c6 <getADC+0xae>
 252:	07 97       	sbiw	r24, 0x07	; 7
 254:	09 f0       	breq	.+2      	; 0x258 <getADC+0x40>
 256:	48 c0       	rjmp	.+144    	; 0x2e8 <getADC+0xd0>
 258:	3f c0       	rjmp	.+126    	; 0x2d8 <getADC+0xc0>
			case 0:
			ADC0 = ADC;
 25a:	80 91 78 00 	lds	r24, 0x0078
 25e:	90 91 79 00 	lds	r25, 0x0079
 262:	90 93 11 01 	sts	0x0111, r25
 266:	80 93 10 01 	sts	0x0110, r24
			break;
 26a:	3e c0       	rjmp	.+124    	; 0x2e8 <getADC+0xd0>
			case 1:
			ADC1 = ADC;
 26c:	80 91 78 00 	lds	r24, 0x0078
 270:	90 91 79 00 	lds	r25, 0x0079
 274:	90 93 0f 01 	sts	0x010F, r25
 278:	80 93 0e 01 	sts	0x010E, r24
			break;
 27c:	35 c0       	rjmp	.+106    	; 0x2e8 <getADC+0xd0>
			case 2:
			ADC2 = ADC;
 27e:	80 91 78 00 	lds	r24, 0x0078
 282:	90 91 79 00 	lds	r25, 0x0079
 286:	90 93 0d 01 	sts	0x010D, r25
 28a:	80 93 0c 01 	sts	0x010C, r24
			break;
 28e:	2c c0       	rjmp	.+88     	; 0x2e8 <getADC+0xd0>
			case 3:
			ADC3 = ADC;
 290:	80 91 78 00 	lds	r24, 0x0078
 294:	90 91 79 00 	lds	r25, 0x0079
 298:	90 93 0b 01 	sts	0x010B, r25
 29c:	80 93 0a 01 	sts	0x010A, r24
			break;
 2a0:	23 c0       	rjmp	.+70     	; 0x2e8 <getADC+0xd0>
			case 4:
			ADC4 = ADC;
 2a2:	80 91 78 00 	lds	r24, 0x0078
 2a6:	90 91 79 00 	lds	r25, 0x0079
 2aa:	90 93 09 01 	sts	0x0109, r25
 2ae:	80 93 08 01 	sts	0x0108, r24
			break;
 2b2:	1a c0       	rjmp	.+52     	; 0x2e8 <getADC+0xd0>
			case 5:
			ADC5 = ADC;
 2b4:	80 91 78 00 	lds	r24, 0x0078
 2b8:	90 91 79 00 	lds	r25, 0x0079
 2bc:	90 93 07 01 	sts	0x0107, r25
 2c0:	80 93 06 01 	sts	0x0106, r24
			break;
 2c4:	11 c0       	rjmp	.+34     	; 0x2e8 <getADC+0xd0>
			case 6:
			ADC6 = ADC;
 2c6:	80 91 78 00 	lds	r24, 0x0078
 2ca:	90 91 79 00 	lds	r25, 0x0079
 2ce:	90 93 05 01 	sts	0x0105, r25
 2d2:	80 93 04 01 	sts	0x0104, r24
			break;
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <getADC+0xd0>
			case 7:
			ADC7 = ADC;
 2d8:	80 91 78 00 	lds	r24, 0x0078
 2dc:	90 91 79 00 	lds	r25, 0x0079
 2e0:	90 93 03 01 	sts	0x0103, r25
 2e4:	80 93 02 01 	sts	0x0102, r24
			break;
		}
		clear(ADCSRA, ADEN);	//Enable/Start conversion
 2e8:	ea e7       	ldi	r30, 0x7A	; 122
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 77       	andi	r24, 0x7F	; 127
 2f0:	80 83       	st	Z, r24
		clear(ADCSRA, ADSC);	//^
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 7b       	andi	r24, 0xBF	; 191
 2f6:	80 83       	st	Z, r24
		clear(ADCSRA, ADATE);
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 7d       	andi	r24, 0xDF	; 223
 2fc:	80 83       	st	Z, r24
		clear(ADCSRA, ADIF);
 2fe:	80 81       	ld	r24, Z
 300:	8f 7e       	andi	r24, 0xEF	; 239
 302:	80 83       	st	Z, r24
		if (flag >= 0 && flag < 8) {
 304:	80 91 27 01 	lds	r24, 0x0127
 308:	90 91 28 01 	lds	r25, 0x0128
 30c:	88 30       	cpi	r24, 0x08	; 8
 30e:	91 05       	cpc	r25, r1
 310:	a0 f4       	brcc	.+40     	; 0x33a <getADC+0x122>
			flag = (flag + 1) % 8;
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	9c 01       	movw	r18, r24
 316:	27 70       	andi	r18, 0x07	; 7
 318:	30 78       	andi	r19, 0x80	; 128
 31a:	33 23       	and	r19, r19
 31c:	34 f4       	brge	.+12     	; 0x32a <getADC+0x112>
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	31 09       	sbc	r19, r1
 322:	28 6f       	ori	r18, 0xF8	; 248
 324:	3f 6f       	ori	r19, 0xFF	; 255
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	3f 4f       	sbci	r19, 0xFF	; 255
 32a:	20 93 27 01 	sts	0x0127, r18
 32e:	30 93 28 01 	sts	0x0128, r19
			chooseInput(flag);
 332:	82 2f       	mov	r24, r18
 334:	93 2f       	mov	r25, r19
 336:	0e 94 6a 00 	call	0xd4	; 0xd4 <chooseInput>
		}
		set(ADCSRA, ADATE);	//Set trigger to free-running mode
 33a:	ea e7       	ldi	r30, 0x7A	; 122
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	80 62       	ori	r24, 0x20	; 32
 342:	80 83       	st	Z, r24
		set(ADCSRA, ADEN);	//Enable/Start conversion
 344:	80 81       	ld	r24, Z
 346:	80 68       	ori	r24, 0x80	; 128
 348:	80 83       	st	Z, r24
		set(ADCSRA, ADSC);	//^
 34a:	80 81       	ld	r24, Z
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	80 83       	st	Z, r24
		
		set(ADCSRA, ADIF);	//Enable reading results
 350:	80 81       	ld	r24, Z
 352:	80 61       	ori	r24, 0x10	; 16
 354:	80 83       	st	Z, r24
		conversion = 0;
 356:	10 92 01 01 	sts	0x0101, r1
 35a:	10 92 00 01 	sts	0x0100, r1
	}

	ADCarr[0] = ADC0;
 35e:	80 91 10 01 	lds	r24, 0x0110
 362:	90 91 11 01 	lds	r25, 0x0111
 366:	90 93 18 01 	sts	0x0118, r25
 36a:	80 93 17 01 	sts	0x0117, r24
	ADCarr[1] = ADC1;
 36e:	80 91 0e 01 	lds	r24, 0x010E
 372:	90 91 0f 01 	lds	r25, 0x010F
 376:	90 93 1a 01 	sts	0x011A, r25
 37a:	80 93 19 01 	sts	0x0119, r24
	ADCarr[2] = ADC2;
 37e:	80 91 0c 01 	lds	r24, 0x010C
 382:	90 91 0d 01 	lds	r25, 0x010D
 386:	90 93 1c 01 	sts	0x011C, r25
 38a:	80 93 1b 01 	sts	0x011B, r24
	ADCarr[3] = ADC3;
 38e:	80 91 0a 01 	lds	r24, 0x010A
 392:	90 91 0b 01 	lds	r25, 0x010B
 396:	90 93 1e 01 	sts	0x011E, r25
 39a:	80 93 1d 01 	sts	0x011D, r24
	ADCarr[4] = ADC4;
 39e:	80 91 08 01 	lds	r24, 0x0108
 3a2:	90 91 09 01 	lds	r25, 0x0109
 3a6:	90 93 20 01 	sts	0x0120, r25
 3aa:	80 93 1f 01 	sts	0x011F, r24
	ADCarr[5] = ADC5;
 3ae:	80 91 06 01 	lds	r24, 0x0106
 3b2:	90 91 07 01 	lds	r25, 0x0107
 3b6:	90 93 22 01 	sts	0x0122, r25
 3ba:	80 93 21 01 	sts	0x0121, r24
	ADCarr[6] = ADC6;
 3be:	80 91 04 01 	lds	r24, 0x0104
 3c2:	90 91 05 01 	lds	r25, 0x0105
 3c6:	90 93 24 01 	sts	0x0124, r25
 3ca:	80 93 23 01 	sts	0x0123, r24
	ADCarr[7] = ADC7;
 3ce:	80 91 02 01 	lds	r24, 0x0102
 3d2:	90 91 03 01 	lds	r25, 0x0103
 3d6:	90 93 26 01 	sts	0x0126, r25
 3da:	80 93 25 01 	sts	0x0125, r24
 3de:	08 95       	ret

000003e0 <drive_straight>:
	
	
}

void drive_straight(char dir, float speed) {
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	6a 01       	movw	r12, r20
 3ea:	7b 01       	movw	r14, r22
	switch (dir) {
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	19 f0       	breq	.+6      	; 0x3f6 <drive_straight+0x16>
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	31 f4       	brne	.+12     	; 0x400 <drive_straight+0x20>
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <drive_straight+0x1c>
		case FORWARD:
			set(PORTB, 2);
 3f6:	2a 9a       	sbi	0x05, 2	; 5
			set(PORTB, 3);
 3f8:	2b 9a       	sbi	0x05, 3	; 5
			break;
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <drive_straight+0x20>
		case BACKWARD:
			clear(PORTB, 2);
 3fc:	2a 98       	cbi	0x05, 2	; 5
			clear(PORTB, 3);
 3fe:	2b 98       	cbi	0x05, 3	; 5
			break;
	}
	OCR1B = (unsigned int) (OCR1A * speed);
 400:	60 91 88 00 	lds	r22, 0x0088
 404:	70 91 89 00 	lds	r23, 0x0089
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 cc 03 	call	0x798	; 0x798 <__floatunsisf>
 410:	a7 01       	movw	r20, r14
 412:	96 01       	movw	r18, r12
 414:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
 418:	0e 94 a0 03 	call	0x740	; 0x740 <__fixunssfsi>
 41c:	70 93 8b 00 	sts	0x008B, r23
 420:	60 93 8a 00 	sts	0x008A, r22
	OCR3B = (unsigned int) (ICR3 * speed);
 424:	60 91 96 00 	lds	r22, 0x0096
 428:	70 91 97 00 	lds	r23, 0x0097
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 cc 03 	call	0x798	; 0x798 <__floatunsisf>
 434:	a7 01       	movw	r20, r14
 436:	96 01       	movw	r18, r12
 438:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
 43c:	0e 94 a0 03 	call	0x740	; 0x740 <__fixunssfsi>
 440:	70 93 9b 00 	sts	0x009B, r23
 444:	60 93 9a 00 	sts	0x009A, r22
}
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	08 95       	ret

00000452 <oppDir>:

int oppDir(int st) {
	if (st == 1) {
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	19 f4       	brne	.+6      	; 0x45c <oppDir+0xa>
		return 2;
 456:	22 e0       	ldi	r18, 0x02	; 2
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <oppDir+0xe>
	} else {
		return 1;
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	30 e0       	ldi	r19, 0x00	; 0
	}
}
 460:	82 2f       	mov	r24, r18
 462:	93 2f       	mov	r25, r19
 464:	08 95       	ret

00000466 <main>:

int main(void)
{
	
	//TIMER 1: for left wheel
	set(TCCR1B, WGM13);
 466:	e1 e8       	ldi	r30, 0x81	; 129
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	80 61       	ori	r24, 0x10	; 16
 46e:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
 470:	80 81       	ld	r24, Z
 472:	88 60       	ori	r24, 0x08	; 8
 474:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
 476:	a0 e8       	ldi	r26, 0x80	; 128
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	8c 91       	ld	r24, X
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
 480:	8c 91       	ld	r24, X
 482:	81 60       	ori	r24, 0x01	; 1
 484:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
 486:	8c 91       	ld	r24, X
 488:	80 62       	ori	r24, 0x20	; 32
 48a:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
 48c:	8c 91       	ld	r24, X
 48e:	8f 7e       	andi	r24, 0xEF	; 239
 490:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
 492:	80 81       	ld	r24, Z
 494:	8b 7f       	andi	r24, 0xFB	; 251
 496:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
 498:	80 81       	ld	r24, Z
 49a:	8d 7f       	andi	r24, 0xFD	; 253
 49c:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
	
	OCR1A = 0xFFFF;
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	9f ef       	ldi	r25, 0xFF	; 255
 4a8:	90 93 89 00 	sts	0x0089, r25
 4ac:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
 4b0:	10 92 8b 00 	sts	0x008B, r1
 4b4:	10 92 8a 00 	sts	0x008A, r1
	
	
	//TIMER 3: For right wheel
	set(TCCR3B, WGM33);
 4b8:	e1 e9       	ldi	r30, 0x91	; 145
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	20 81       	ld	r18, Z
 4be:	20 61       	ori	r18, 0x10	; 16
 4c0:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
 4c2:	20 81       	ld	r18, Z
 4c4:	28 60       	ori	r18, 0x08	; 8
 4c6:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
 4c8:	a0 e9       	ldi	r26, 0x90	; 144
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	2c 91       	ld	r18, X
 4ce:	22 60       	ori	r18, 0x02	; 2
 4d0:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
 4d2:	2c 91       	ld	r18, X
 4d4:	2e 7f       	andi	r18, 0xFE	; 254
 4d6:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1);
 4d8:	2c 91       	ld	r18, X
 4da:	20 68       	ori	r18, 0x80	; 128
 4dc:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0);
 4de:	2c 91       	ld	r18, X
 4e0:	2f 7b       	andi	r18, 0xBF	; 191
 4e2:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
 4e4:	20 81       	ld	r18, Z
 4e6:	2b 7f       	andi	r18, 0xFB	; 251
 4e8:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
 4ea:	20 81       	ld	r18, Z
 4ec:	2d 7f       	andi	r18, 0xFD	; 253
 4ee:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
 4f0:	20 81       	ld	r18, Z
 4f2:	21 60       	ori	r18, 0x01	; 1
 4f4:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
 4f6:	90 93 97 00 	sts	0x0097, r25
 4fa:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
 4fe:	10 92 99 00 	sts	0x0099, r1
 502:	10 92 98 00 	sts	0x0098, r1
	
	set(DDRB,6);
 506:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
 508:	3e 9a       	sbi	0x07, 6	; 7
	
	set(DDRB,2);
 50a:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
 50c:	23 9a       	sbi	0x04, 3	; 4
	int maxADC = 0;
	
    while(1)
    {
        m_wait(100);
		m_red(TOGGLE);
 50e:	68 94       	set
 510:	77 24       	eor	r7, r7
 512:	76 f8       	bld	r7, 6
		getADC();
		
		if (ADCarr[0] > ADCarr[1]) {
 514:	0f 2e       	mov	r0, r31
 516:	f7 e1       	ldi	r31, 0x17	; 23
 518:	ef 2e       	mov	r14, r31
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	ff 2e       	mov	r15, r31
 51e:	f0 2d       	mov	r31, r0
 520:	09 e1       	ldi	r16, 0x19	; 25
 522:	11 e0       	ldi	r17, 0x01	; 1
			state = FORWARD;
 524:	55 24       	eor	r5, r5
 526:	53 94       	inc	r5
			maxADC = ADCarr[0];
		}
		else {
			state = BACKWARD;
 528:	68 94       	set
 52a:	66 24       	eor	r6, r6
 52c:	61 f8       	bld	r6, 1
		if (maxADC < thresholdhigh && maxADC > thresholdlow) {
			state = WAIT;
		}
		else if (maxADC >= thresholdhigh) {
			state = oppDir(state);
			spd = (1023 - maxADC) / (1023 - thresholdhigh);
 52e:	0f 2e       	mov	r0, r31
 530:	88 24       	eor	r8, r8
 532:	8a 94       	dec	r8
 534:	f3 e0       	ldi	r31, 0x03	; 3
 536:	9f 2e       	mov	r9, r31
 538:	f0 2d       	mov	r31, r0
 53a:	0f 2e       	mov	r0, r31
 53c:	ff ed       	ldi	r31, 0xDF	; 223
 53e:	af 2e       	mov	r10, r31
 540:	b1 2c       	mov	r11, r1
 542:	f0 2d       	mov	r31, r0
		}
		else {
			spd = 1.0 - (maxADC / thresholdlow);
 544:	0f 2e       	mov	r0, r31
 546:	fc eb       	ldi	r31, 0xBC	; 188
 548:	cf 2e       	mov	r12, r31
 54a:	f2 e0       	ldi	r31, 0x02	; 2
 54c:	df 2e       	mov	r13, r31
 54e:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	81 ee       	ldi	r24, 0xE1	; 225
 554:	94 e0       	ldi	r25, 0x04	; 4
 556:	21 50       	subi	r18, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0xf0>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0xfa>
 560:	00 00       	nop
	int maxADC = 0;
	
    while(1)
    {
        m_wait(100);
		m_red(TOGGLE);
 562:	6e 9a       	sbi	0x0d, 6	; 13
 564:	8e b1       	in	r24, 0x0e	; 14
 566:	87 25       	eor	r24, r7
 568:	8e b9       	out	0x0e, r24	; 14
		getADC();
 56a:	0e 94 0c 01 	call	0x218	; 0x218 <getADC>
		
		if (ADCarr[0] > ADCarr[1]) {
 56e:	f7 01       	movw	r30, r14
 570:	80 81       	ld	r24, Z
 572:	91 81       	ldd	r25, Z+1	; 0x01
 574:	f8 01       	movw	r30, r16
 576:	c0 81       	ld	r28, Z
 578:	d1 81       	ldd	r29, Z+1	; 0x01
 57a:	c8 17       	cp	r28, r24
 57c:	d9 07       	cpc	r29, r25
 57e:	24 f4       	brge	.+8      	; 0x588 <main+0x122>
			state = FORWARD;
 580:	50 92 16 01 	sts	0x0116, r5
			maxADC = ADCarr[0];
 584:	ec 01       	movw	r28, r24
 586:	02 c0       	rjmp	.+4      	; 0x58c <main+0x126>
		}
		else {
			state = BACKWARD;
 588:	60 92 16 01 	sts	0x0116, r6
			maxADC = ADCarr[1];
		}
		
		if (maxADC < thresholdhigh && maxADC > thresholdlow) {
 58c:	c0 32       	cpi	r28, 0x20	; 32
 58e:	f3 e0       	ldi	r31, 0x03	; 3
 590:	df 07       	cpc	r29, r31
 592:	3c f4       	brge	.+14     	; 0x5a2 <main+0x13c>
 594:	cd 3b       	cpi	r28, 0xBD	; 189
 596:	22 e0       	ldi	r18, 0x02	; 2
 598:	d2 07       	cpc	r29, r18
 59a:	fc f0       	brlt	.+62     	; 0x5da <main+0x174>
			state = WAIT;
 59c:	10 92 16 01 	sts	0x0116, r1
 5a0:	d7 cf       	rjmp	.-82     	; 0x550 <main+0xea>
		}
		else if (maxADC >= thresholdhigh) {
			state = oppDir(state);
 5a2:	80 91 16 01 	lds	r24, 0x0116
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 29 02 	call	0x452	; 0x452 <oppDir>
 5ac:	80 93 16 01 	sts	0x0116, r24
			spd = (1023 - maxADC) / (1023 - thresholdhigh);
 5b0:	c4 01       	movw	r24, r8
 5b2:	8c 1b       	sub	r24, r28
 5b4:	9d 0b       	sbc	r25, r29
 5b6:	b5 01       	movw	r22, r10
 5b8:	0e 94 bd 04 	call	0x97a	; 0x97a <__divmodhi4>
 5bc:	88 27       	eor	r24, r24
 5be:	77 fd       	sbrc	r23, 7
 5c0:	80 95       	com	r24
 5c2:	98 2f       	mov	r25, r24
 5c4:	0e 94 ce 03 	call	0x79c	; 0x79c <__floatsisf>
 5c8:	60 93 12 01 	sts	0x0112, r22
 5cc:	70 93 13 01 	sts	0x0113, r23
 5d0:	80 93 14 01 	sts	0x0114, r24
 5d4:	90 93 15 01 	sts	0x0115, r25
 5d8:	1a c0       	rjmp	.+52     	; 0x60e <main+0x1a8>
		}
		else {
			spd = 1.0 - (maxADC / thresholdlow);
 5da:	ce 01       	movw	r24, r28
 5dc:	b6 01       	movw	r22, r12
 5de:	0e 94 bd 04 	call	0x97a	; 0x97a <__divmodhi4>
 5e2:	88 27       	eor	r24, r24
 5e4:	77 fd       	sbrc	r23, 7
 5e6:	80 95       	com	r24
 5e8:	98 2f       	mov	r25, r24
 5ea:	0e 94 ce 03 	call	0x79c	; 0x79c <__floatsisf>
 5ee:	9b 01       	movw	r18, r22
 5f0:	ac 01       	movw	r20, r24
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	80 e8       	ldi	r24, 0x80	; 128
 5f8:	9f e3       	ldi	r25, 0x3F	; 63
 5fa:	0e 94 3b 03 	call	0x676	; 0x676 <__subsf3>
 5fe:	60 93 12 01 	sts	0x0112, r22
 602:	70 93 13 01 	sts	0x0113, r23
 606:	80 93 14 01 	sts	0x0114, r24
 60a:	90 93 15 01 	sts	0x0115, r25
		}
		
		switch (state) {
 60e:	80 91 16 01 	lds	r24, 0x0116
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	21 f0       	breq	.+8      	; 0x61e <main+0x1b8>
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	09 f0       	breq	.+2      	; 0x61c <main+0x1b6>
 61a:	9a cf       	rjmp	.-204    	; 0x550 <main+0xea>
 61c:	0c c0       	rjmp	.+24     	; 0x636 <main+0x1d0>
			case FORWARD:
				drive_straight(FORWARD, spd);
 61e:	40 91 12 01 	lds	r20, 0x0112
 622:	50 91 13 01 	lds	r21, 0x0113
 626:	60 91 14 01 	lds	r22, 0x0114
 62a:	70 91 15 01 	lds	r23, 0x0115
 62e:	85 2d       	mov	r24, r5
 630:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <drive_straight>
				break;
 634:	8d cf       	rjmp	.-230    	; 0x550 <main+0xea>
			case BACKWARD:
				drive_straight(BACKWARD, spd);
 636:	40 91 12 01 	lds	r20, 0x0112
 63a:	50 91 13 01 	lds	r21, 0x0113
 63e:	60 91 14 01 	lds	r22, 0x0114
 642:	70 91 15 01 	lds	r23, 0x0115
 646:	86 2d       	mov	r24, r6
 648:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <drive_straight>
				break;
 64c:	81 cf       	rjmp	.-254    	; 0x550 <main+0xea>

0000064e <__vector_29>:
		}
		
    }
}

ISR(ADC_vect) {
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
	//cli();
	conversion = 1;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	90 93 01 01 	sts	0x0101, r25
 664:	80 93 00 01 	sts	0x0100, r24
	//sei();
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <__subsf3>:
 676:	50 58       	subi	r21, 0x80	; 128

00000678 <__addsf3>:
 678:	bb 27       	eor	r27, r27
 67a:	aa 27       	eor	r26, r26
 67c:	0e d0       	rcall	.+28     	; 0x69a <__addsf3x>
 67e:	e0 c0       	rjmp	.+448    	; 0x840 <__fp_round>
 680:	d1 d0       	rcall	.+418    	; 0x824 <__fp_pscA>
 682:	30 f0       	brcs	.+12     	; 0x690 <__addsf3+0x18>
 684:	d6 d0       	rcall	.+428    	; 0x832 <__fp_pscB>
 686:	20 f0       	brcs	.+8      	; 0x690 <__addsf3+0x18>
 688:	31 f4       	brne	.+12     	; 0x696 <__addsf3+0x1e>
 68a:	9f 3f       	cpi	r25, 0xFF	; 255
 68c:	11 f4       	brne	.+4      	; 0x692 <__addsf3+0x1a>
 68e:	1e f4       	brtc	.+6      	; 0x696 <__addsf3+0x1e>
 690:	c6 c0       	rjmp	.+396    	; 0x81e <__fp_nan>
 692:	0e f4       	brtc	.+2      	; 0x696 <__addsf3+0x1e>
 694:	e0 95       	com	r30
 696:	e7 fb       	bst	r30, 7
 698:	bc c0       	rjmp	.+376    	; 0x812 <__fp_inf>

0000069a <__addsf3x>:
 69a:	e9 2f       	mov	r30, r25
 69c:	e2 d0       	rcall	.+452    	; 0x862 <__fp_split3>
 69e:	80 f3       	brcs	.-32     	; 0x680 <__addsf3+0x8>
 6a0:	ba 17       	cp	r27, r26
 6a2:	62 07       	cpc	r22, r18
 6a4:	73 07       	cpc	r23, r19
 6a6:	84 07       	cpc	r24, r20
 6a8:	95 07       	cpc	r25, r21
 6aa:	18 f0       	brcs	.+6      	; 0x6b2 <__addsf3x+0x18>
 6ac:	71 f4       	brne	.+28     	; 0x6ca <__addsf3x+0x30>
 6ae:	9e f5       	brtc	.+102    	; 0x716 <__addsf3x+0x7c>
 6b0:	fa c0       	rjmp	.+500    	; 0x8a6 <__fp_zero>
 6b2:	0e f4       	brtc	.+2      	; 0x6b6 <__addsf3x+0x1c>
 6b4:	e0 95       	com	r30
 6b6:	0b 2e       	mov	r0, r27
 6b8:	ba 2f       	mov	r27, r26
 6ba:	a0 2d       	mov	r26, r0
 6bc:	0b 01       	movw	r0, r22
 6be:	b9 01       	movw	r22, r18
 6c0:	90 01       	movw	r18, r0
 6c2:	0c 01       	movw	r0, r24
 6c4:	ca 01       	movw	r24, r20
 6c6:	a0 01       	movw	r20, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	ff 27       	eor	r31, r31
 6cc:	59 1b       	sub	r21, r25
 6ce:	99 f0       	breq	.+38     	; 0x6f6 <__addsf3x+0x5c>
 6d0:	59 3f       	cpi	r21, 0xF9	; 249
 6d2:	50 f4       	brcc	.+20     	; 0x6e8 <__addsf3x+0x4e>
 6d4:	50 3e       	cpi	r21, 0xE0	; 224
 6d6:	68 f1       	brcs	.+90     	; 0x732 <__addsf3x+0x98>
 6d8:	1a 16       	cp	r1, r26
 6da:	f0 40       	sbci	r31, 0x00	; 0
 6dc:	a2 2f       	mov	r26, r18
 6de:	23 2f       	mov	r18, r19
 6e0:	34 2f       	mov	r19, r20
 6e2:	44 27       	eor	r20, r20
 6e4:	58 5f       	subi	r21, 0xF8	; 248
 6e6:	f3 cf       	rjmp	.-26     	; 0x6ce <__addsf3x+0x34>
 6e8:	46 95       	lsr	r20
 6ea:	37 95       	ror	r19
 6ec:	27 95       	ror	r18
 6ee:	a7 95       	ror	r26
 6f0:	f0 40       	sbci	r31, 0x00	; 0
 6f2:	53 95       	inc	r21
 6f4:	c9 f7       	brne	.-14     	; 0x6e8 <__addsf3x+0x4e>
 6f6:	7e f4       	brtc	.+30     	; 0x716 <__addsf3x+0x7c>
 6f8:	1f 16       	cp	r1, r31
 6fa:	ba 0b       	sbc	r27, r26
 6fc:	62 0b       	sbc	r22, r18
 6fe:	73 0b       	sbc	r23, r19
 700:	84 0b       	sbc	r24, r20
 702:	ba f0       	brmi	.+46     	; 0x732 <__addsf3x+0x98>
 704:	91 50       	subi	r25, 0x01	; 1
 706:	a1 f0       	breq	.+40     	; 0x730 <__addsf3x+0x96>
 708:	ff 0f       	add	r31, r31
 70a:	bb 1f       	adc	r27, r27
 70c:	66 1f       	adc	r22, r22
 70e:	77 1f       	adc	r23, r23
 710:	88 1f       	adc	r24, r24
 712:	c2 f7       	brpl	.-16     	; 0x704 <__addsf3x+0x6a>
 714:	0e c0       	rjmp	.+28     	; 0x732 <__addsf3x+0x98>
 716:	ba 0f       	add	r27, r26
 718:	62 1f       	adc	r22, r18
 71a:	73 1f       	adc	r23, r19
 71c:	84 1f       	adc	r24, r20
 71e:	48 f4       	brcc	.+18     	; 0x732 <__addsf3x+0x98>
 720:	87 95       	ror	r24
 722:	77 95       	ror	r23
 724:	67 95       	ror	r22
 726:	b7 95       	ror	r27
 728:	f7 95       	ror	r31
 72a:	9e 3f       	cpi	r25, 0xFE	; 254
 72c:	08 f0       	brcs	.+2      	; 0x730 <__addsf3x+0x96>
 72e:	b3 cf       	rjmp	.-154    	; 0x696 <__addsf3+0x1e>
 730:	93 95       	inc	r25
 732:	88 0f       	add	r24, r24
 734:	08 f0       	brcs	.+2      	; 0x738 <__addsf3x+0x9e>
 736:	99 27       	eor	r25, r25
 738:	ee 0f       	add	r30, r30
 73a:	97 95       	ror	r25
 73c:	87 95       	ror	r24
 73e:	08 95       	ret

00000740 <__fixunssfsi>:
 740:	98 d0       	rcall	.+304    	; 0x872 <__fp_splitA>
 742:	88 f0       	brcs	.+34     	; 0x766 <__fixunssfsi+0x26>
 744:	9f 57       	subi	r25, 0x7F	; 127
 746:	90 f0       	brcs	.+36     	; 0x76c <__fixunssfsi+0x2c>
 748:	b9 2f       	mov	r27, r25
 74a:	99 27       	eor	r25, r25
 74c:	b7 51       	subi	r27, 0x17	; 23
 74e:	a0 f0       	brcs	.+40     	; 0x778 <__fixunssfsi+0x38>
 750:	d1 f0       	breq	.+52     	; 0x786 <__fixunssfsi+0x46>
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	1a f0       	brmi	.+6      	; 0x762 <__fixunssfsi+0x22>
 75c:	ba 95       	dec	r27
 75e:	c9 f7       	brne	.-14     	; 0x752 <__fixunssfsi+0x12>
 760:	12 c0       	rjmp	.+36     	; 0x786 <__fixunssfsi+0x46>
 762:	b1 30       	cpi	r27, 0x01	; 1
 764:	81 f0       	breq	.+32     	; 0x786 <__fixunssfsi+0x46>
 766:	9f d0       	rcall	.+318    	; 0x8a6 <__fp_zero>
 768:	b1 e0       	ldi	r27, 0x01	; 1
 76a:	08 95       	ret
 76c:	9c c0       	rjmp	.+312    	; 0x8a6 <__fp_zero>
 76e:	67 2f       	mov	r22, r23
 770:	78 2f       	mov	r23, r24
 772:	88 27       	eor	r24, r24
 774:	b8 5f       	subi	r27, 0xF8	; 248
 776:	39 f0       	breq	.+14     	; 0x786 <__fixunssfsi+0x46>
 778:	b9 3f       	cpi	r27, 0xF9	; 249
 77a:	cc f3       	brlt	.-14     	; 0x76e <__fixunssfsi+0x2e>
 77c:	86 95       	lsr	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b3 95       	inc	r27
 784:	d9 f7       	brne	.-10     	; 0x77c <__fixunssfsi+0x3c>
 786:	3e f4       	brtc	.+14     	; 0x796 <__fixunssfsi+0x56>
 788:	90 95       	com	r25
 78a:	80 95       	com	r24
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	08 95       	ret

00000798 <__floatunsisf>:
 798:	e8 94       	clt
 79a:	09 c0       	rjmp	.+18     	; 0x7ae <__floatsisf+0x12>

0000079c <__floatsisf>:
 79c:	97 fb       	bst	r25, 7
 79e:	3e f4       	brtc	.+14     	; 0x7ae <__floatsisf+0x12>
 7a0:	90 95       	com	r25
 7a2:	80 95       	com	r24
 7a4:	70 95       	com	r23
 7a6:	61 95       	neg	r22
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	99 23       	and	r25, r25
 7b0:	a9 f0       	breq	.+42     	; 0x7dc <__floatsisf+0x40>
 7b2:	f9 2f       	mov	r31, r25
 7b4:	96 e9       	ldi	r25, 0x96	; 150
 7b6:	bb 27       	eor	r27, r27
 7b8:	93 95       	inc	r25
 7ba:	f6 95       	lsr	r31
 7bc:	87 95       	ror	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b7 95       	ror	r27
 7c4:	f1 11       	cpse	r31, r1
 7c6:	f8 cf       	rjmp	.-16     	; 0x7b8 <__floatsisf+0x1c>
 7c8:	fa f4       	brpl	.+62     	; 0x808 <__floatsisf+0x6c>
 7ca:	bb 0f       	add	r27, r27
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <__floatsisf+0x36>
 7ce:	60 ff       	sbrs	r22, 0
 7d0:	1b c0       	rjmp	.+54     	; 0x808 <__floatsisf+0x6c>
 7d2:	6f 5f       	subi	r22, 0xFF	; 255
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	8f 4f       	sbci	r24, 0xFF	; 255
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	16 c0       	rjmp	.+44     	; 0x808 <__floatsisf+0x6c>
 7dc:	88 23       	and	r24, r24
 7de:	11 f0       	breq	.+4      	; 0x7e4 <__floatsisf+0x48>
 7e0:	96 e9       	ldi	r25, 0x96	; 150
 7e2:	11 c0       	rjmp	.+34     	; 0x806 <__floatsisf+0x6a>
 7e4:	77 23       	and	r23, r23
 7e6:	21 f0       	breq	.+8      	; 0x7f0 <__floatsisf+0x54>
 7e8:	9e e8       	ldi	r25, 0x8E	; 142
 7ea:	87 2f       	mov	r24, r23
 7ec:	76 2f       	mov	r23, r22
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <__floatsisf+0x5e>
 7f0:	66 23       	and	r22, r22
 7f2:	71 f0       	breq	.+28     	; 0x810 <__floatsisf+0x74>
 7f4:	96 e8       	ldi	r25, 0x86	; 134
 7f6:	86 2f       	mov	r24, r22
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	2a f0       	brmi	.+10     	; 0x808 <__floatsisf+0x6c>
 7fe:	9a 95       	dec	r25
 800:	66 0f       	add	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	da f7       	brpl	.-10     	; 0x7fe <__floatsisf+0x62>
 808:	88 0f       	add	r24, r24
 80a:	96 95       	lsr	r25
 80c:	87 95       	ror	r24
 80e:	97 f9       	bld	r25, 7
 810:	08 95       	ret

00000812 <__fp_inf>:
 812:	97 f9       	bld	r25, 7
 814:	9f 67       	ori	r25, 0x7F	; 127
 816:	80 e8       	ldi	r24, 0x80	; 128
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	08 95       	ret

0000081e <__fp_nan>:
 81e:	9f ef       	ldi	r25, 0xFF	; 255
 820:	80 ec       	ldi	r24, 0xC0	; 192
 822:	08 95       	ret

00000824 <__fp_pscA>:
 824:	00 24       	eor	r0, r0
 826:	0a 94       	dec	r0
 828:	16 16       	cp	r1, r22
 82a:	17 06       	cpc	r1, r23
 82c:	18 06       	cpc	r1, r24
 82e:	09 06       	cpc	r0, r25
 830:	08 95       	ret

00000832 <__fp_pscB>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	12 16       	cp	r1, r18
 838:	13 06       	cpc	r1, r19
 83a:	14 06       	cpc	r1, r20
 83c:	05 06       	cpc	r0, r21
 83e:	08 95       	ret

00000840 <__fp_round>:
 840:	09 2e       	mov	r0, r25
 842:	03 94       	inc	r0
 844:	00 0c       	add	r0, r0
 846:	11 f4       	brne	.+4      	; 0x84c <__fp_round+0xc>
 848:	88 23       	and	r24, r24
 84a:	52 f0       	brmi	.+20     	; 0x860 <__fp_round+0x20>
 84c:	bb 0f       	add	r27, r27
 84e:	40 f4       	brcc	.+16     	; 0x860 <__fp_round+0x20>
 850:	bf 2b       	or	r27, r31
 852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0x18>
 854:	60 ff       	sbrs	r22, 0
 856:	04 c0       	rjmp	.+8      	; 0x860 <__fp_round+0x20>
 858:	6f 5f       	subi	r22, 0xFF	; 255
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	08 95       	ret

00000862 <__fp_split3>:
 862:	57 fd       	sbrc	r21, 7
 864:	90 58       	subi	r25, 0x80	; 128
 866:	44 0f       	add	r20, r20
 868:	55 1f       	adc	r21, r21
 86a:	59 f0       	breq	.+22     	; 0x882 <__fp_splitA+0x10>
 86c:	5f 3f       	cpi	r21, 0xFF	; 255
 86e:	71 f0       	breq	.+28     	; 0x88c <__fp_splitA+0x1a>
 870:	47 95       	ror	r20

00000872 <__fp_splitA>:
 872:	88 0f       	add	r24, r24
 874:	97 fb       	bst	r25, 7
 876:	99 1f       	adc	r25, r25
 878:	61 f0       	breq	.+24     	; 0x892 <__fp_splitA+0x20>
 87a:	9f 3f       	cpi	r25, 0xFF	; 255
 87c:	79 f0       	breq	.+30     	; 0x89c <__fp_splitA+0x2a>
 87e:	87 95       	ror	r24
 880:	08 95       	ret
 882:	12 16       	cp	r1, r18
 884:	13 06       	cpc	r1, r19
 886:	14 06       	cpc	r1, r20
 888:	55 1f       	adc	r21, r21
 88a:	f2 cf       	rjmp	.-28     	; 0x870 <__fp_split3+0xe>
 88c:	46 95       	lsr	r20
 88e:	f1 df       	rcall	.-30     	; 0x872 <__fp_splitA>
 890:	08 c0       	rjmp	.+16     	; 0x8a2 <__fp_splitA+0x30>
 892:	16 16       	cp	r1, r22
 894:	17 06       	cpc	r1, r23
 896:	18 06       	cpc	r1, r24
 898:	99 1f       	adc	r25, r25
 89a:	f1 cf       	rjmp	.-30     	; 0x87e <__fp_splitA+0xc>
 89c:	86 95       	lsr	r24
 89e:	71 05       	cpc	r23, r1
 8a0:	61 05       	cpc	r22, r1
 8a2:	08 94       	sec
 8a4:	08 95       	ret

000008a6 <__fp_zero>:
 8a6:	e8 94       	clt

000008a8 <__fp_szero>:
 8a8:	bb 27       	eor	r27, r27
 8aa:	66 27       	eor	r22, r22
 8ac:	77 27       	eor	r23, r23
 8ae:	cb 01       	movw	r24, r22
 8b0:	97 f9       	bld	r25, 7
 8b2:	08 95       	ret

000008b4 <__mulsf3>:
 8b4:	0b d0       	rcall	.+22     	; 0x8cc <__mulsf3x>
 8b6:	c4 cf       	rjmp	.-120    	; 0x840 <__fp_round>
 8b8:	b5 df       	rcall	.-150    	; 0x824 <__fp_pscA>
 8ba:	28 f0       	brcs	.+10     	; 0x8c6 <__mulsf3+0x12>
 8bc:	ba df       	rcall	.-140    	; 0x832 <__fp_pscB>
 8be:	18 f0       	brcs	.+6      	; 0x8c6 <__mulsf3+0x12>
 8c0:	95 23       	and	r25, r21
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <__mulsf3+0x12>
 8c4:	a6 cf       	rjmp	.-180    	; 0x812 <__fp_inf>
 8c6:	ab cf       	rjmp	.-170    	; 0x81e <__fp_nan>
 8c8:	11 24       	eor	r1, r1
 8ca:	ee cf       	rjmp	.-36     	; 0x8a8 <__fp_szero>

000008cc <__mulsf3x>:
 8cc:	ca df       	rcall	.-108    	; 0x862 <__fp_split3>
 8ce:	a0 f3       	brcs	.-24     	; 0x8b8 <__mulsf3+0x4>

000008d0 <__mulsf3_pse>:
 8d0:	95 9f       	mul	r25, r21
 8d2:	d1 f3       	breq	.-12     	; 0x8c8 <__mulsf3+0x14>
 8d4:	95 0f       	add	r25, r21
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	55 1f       	adc	r21, r21
 8da:	62 9f       	mul	r22, r18
 8dc:	f0 01       	movw	r30, r0
 8de:	72 9f       	mul	r23, r18
 8e0:	bb 27       	eor	r27, r27
 8e2:	f0 0d       	add	r31, r0
 8e4:	b1 1d       	adc	r27, r1
 8e6:	63 9f       	mul	r22, r19
 8e8:	aa 27       	eor	r26, r26
 8ea:	f0 0d       	add	r31, r0
 8ec:	b1 1d       	adc	r27, r1
 8ee:	aa 1f       	adc	r26, r26
 8f0:	64 9f       	mul	r22, r20
 8f2:	66 27       	eor	r22, r22
 8f4:	b0 0d       	add	r27, r0
 8f6:	a1 1d       	adc	r26, r1
 8f8:	66 1f       	adc	r22, r22
 8fa:	82 9f       	mul	r24, r18
 8fc:	22 27       	eor	r18, r18
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	62 1f       	adc	r22, r18
 904:	73 9f       	mul	r23, r19
 906:	b0 0d       	add	r27, r0
 908:	a1 1d       	adc	r26, r1
 90a:	62 1f       	adc	r22, r18
 90c:	83 9f       	mul	r24, r19
 90e:	a0 0d       	add	r26, r0
 910:	61 1d       	adc	r22, r1
 912:	22 1f       	adc	r18, r18
 914:	74 9f       	mul	r23, r20
 916:	33 27       	eor	r19, r19
 918:	a0 0d       	add	r26, r0
 91a:	61 1d       	adc	r22, r1
 91c:	23 1f       	adc	r18, r19
 91e:	84 9f       	mul	r24, r20
 920:	60 0d       	add	r22, r0
 922:	21 1d       	adc	r18, r1
 924:	82 2f       	mov	r24, r18
 926:	76 2f       	mov	r23, r22
 928:	6a 2f       	mov	r22, r26
 92a:	11 24       	eor	r1, r1
 92c:	9f 57       	subi	r25, 0x7F	; 127
 92e:	50 40       	sbci	r21, 0x00	; 0
 930:	8a f0       	brmi	.+34     	; 0x954 <__mulsf3_pse+0x84>
 932:	e1 f0       	breq	.+56     	; 0x96c <__mulsf3_pse+0x9c>
 934:	88 23       	and	r24, r24
 936:	4a f0       	brmi	.+18     	; 0x94a <__mulsf3_pse+0x7a>
 938:	ee 0f       	add	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	bb 1f       	adc	r27, r27
 93e:	66 1f       	adc	r22, r22
 940:	77 1f       	adc	r23, r23
 942:	88 1f       	adc	r24, r24
 944:	91 50       	subi	r25, 0x01	; 1
 946:	50 40       	sbci	r21, 0x00	; 0
 948:	a9 f7       	brne	.-22     	; 0x934 <__mulsf3_pse+0x64>
 94a:	9e 3f       	cpi	r25, 0xFE	; 254
 94c:	51 05       	cpc	r21, r1
 94e:	70 f0       	brcs	.+28     	; 0x96c <__mulsf3_pse+0x9c>
 950:	60 cf       	rjmp	.-320    	; 0x812 <__fp_inf>
 952:	aa cf       	rjmp	.-172    	; 0x8a8 <__fp_szero>
 954:	5f 3f       	cpi	r21, 0xFF	; 255
 956:	ec f3       	brlt	.-6      	; 0x952 <__mulsf3_pse+0x82>
 958:	98 3e       	cpi	r25, 0xE8	; 232
 95a:	dc f3       	brlt	.-10     	; 0x952 <__mulsf3_pse+0x82>
 95c:	86 95       	lsr	r24
 95e:	77 95       	ror	r23
 960:	67 95       	ror	r22
 962:	b7 95       	ror	r27
 964:	f7 95       	ror	r31
 966:	e7 95       	ror	r30
 968:	9f 5f       	subi	r25, 0xFF	; 255
 96a:	c1 f7       	brne	.-16     	; 0x95c <__mulsf3_pse+0x8c>
 96c:	fe 2b       	or	r31, r30
 96e:	88 0f       	add	r24, r24
 970:	91 1d       	adc	r25, r1
 972:	96 95       	lsr	r25
 974:	87 95       	ror	r24
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret

0000097a <__divmodhi4>:
 97a:	97 fb       	bst	r25, 7
 97c:	07 2e       	mov	r0, r23
 97e:	16 f4       	brtc	.+4      	; 0x984 <__divmodhi4+0xa>
 980:	00 94       	com	r0
 982:	07 d0       	rcall	.+14     	; 0x992 <__divmodhi4_neg1>
 984:	77 fd       	sbrc	r23, 7
 986:	09 d0       	rcall	.+18     	; 0x99a <__divmodhi4_neg2>
 988:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__udivmodhi4>
 98c:	07 fc       	sbrc	r0, 7
 98e:	05 d0       	rcall	.+10     	; 0x99a <__divmodhi4_neg2>
 990:	3e f4       	brtc	.+14     	; 0x9a0 <__divmodhi4_exit>

00000992 <__divmodhi4_neg1>:
 992:	90 95       	com	r25
 994:	81 95       	neg	r24
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	08 95       	ret

0000099a <__divmodhi4_neg2>:
 99a:	70 95       	com	r23
 99c:	61 95       	neg	r22
 99e:	7f 4f       	sbci	r23, 0xFF	; 255

000009a0 <__divmodhi4_exit>:
 9a0:	08 95       	ret

000009a2 <__udivmodhi4>:
 9a2:	aa 1b       	sub	r26, r26
 9a4:	bb 1b       	sub	r27, r27
 9a6:	51 e1       	ldi	r21, 0x11	; 17
 9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__udivmodhi4_ep>

000009aa <__udivmodhi4_loop>:
 9aa:	aa 1f       	adc	r26, r26
 9ac:	bb 1f       	adc	r27, r27
 9ae:	a6 17       	cp	r26, r22
 9b0:	b7 07       	cpc	r27, r23
 9b2:	10 f0       	brcs	.+4      	; 0x9b8 <__udivmodhi4_ep>
 9b4:	a6 1b       	sub	r26, r22
 9b6:	b7 0b       	sbc	r27, r23

000009b8 <__udivmodhi4_ep>:
 9b8:	88 1f       	adc	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	5a 95       	dec	r21
 9be:	a9 f7       	brne	.-22     	; 0x9aa <__udivmodhi4_loop>
 9c0:	80 95       	com	r24
 9c2:	90 95       	com	r25
 9c4:	bc 01       	movw	r22, r24
 9c6:	cd 01       	movw	r24, r26
 9c8:	08 95       	ret

000009ca <_exit>:
 9ca:	f8 94       	cli

000009cc <__stop_program>:
 9cc:	ff cf       	rjmp	.-2      	; 0x9cc <__stop_program>
