
BreazeControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000cd8  00000d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800106  00800106  00000d72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d9  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ed  00000000  00000000  000012eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000272  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c3  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_23>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_29>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	8e 00       	.word	0x008e	; ????
  ae:	9f 00       	.word	0x009f	; ????
  b0:	b0 00       	.word	0x00b0	; ????
  b2:	c1 00       	.word	0x00c1	; ????
  b4:	d2 00       	.word	0x00d2	; ????
  b6:	e3 00       	.word	0x00e3	; ????
  b8:	f4 00       	.word	0x00f4	; ????
  ba:	05 01       	movw	r0, r10
  bc:	2a 01       	movw	r4, r20
  be:	33 01       	movw	r6, r6
  c0:	3c 01       	movw	r6, r24
  c2:	45 01       	movw	r8, r10
  c4:	4e 01       	movw	r8, r28
  c6:	57 01       	movw	r10, r14
  c8:	60 01       	movw	r12, r0
  ca:	69 01       	movw	r12, r18

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	da e0       	ldi	r29, 0x0A	; 10
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a6 e0       	ldi	r26, 0x06	; 6
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	af 32       	cpi	r26, 0x2F	; 47
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	e8 ed       	ldi	r30, 0xD8	; 216
  f0:	fc e0       	ldi	r31, 0x0C	; 12
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	a6 30       	cpi	r26, 0x06	; 6
  fa:	b1 07       	cpc	r27, r17
  fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>
  fe:	0e 94 21 02 	call	0x442	; 0x442 <main>
 102:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <chooseInput>:
float spd = 0;

volatile char newcycle = 0;

void chooseInput(int i) {
	switch (i) {
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	91 05       	cpc	r25, r1
 10e:	08 f0       	brcs	.+2      	; 0x112 <chooseInput+0x8>
 110:	8c c0       	rjmp	.+280    	; 0x22a <chooseInput+0x120>
 112:	fc 01       	movw	r30, r24
 114:	ea 5a       	subi	r30, 0xAA	; 170
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__tablejump2__>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
 11c:	eb e7       	ldi	r30, 0x7B	; 123
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 130:	80 81       	ld	r24, Z
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 136:	80 81       	ld	r24, Z
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	80 83       	st	Z, r24

		break;
 13c:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
 13e:	eb e7       	ldi	r30, 0x7B	; 123
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 152:	80 81       	ld	r24, Z
 154:	8d 7f       	andi	r24, 0xFD	; 253
 156:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24

		break;
 15e:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
 160:	eb e7       	ldi	r30, 0x7B	; 123
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8f 7d       	andi	r24, 0xDF	; 223
 168:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 16a:	ec e7       	ldi	r30, 0x7C	; 124
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	84 60       	ori	r24, 0x04	; 4
 172:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 174:	80 81       	ld	r24, Z
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 17a:	80 81       	ld	r24, Z
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	80 83       	st	Z, r24

		break;
 180:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
 182:	eb e7       	ldi	r30, 0x7B	; 123
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 18c:	ec e7       	ldi	r30, 0x7C	; 124
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	84 60       	ori	r24, 0x04	; 4
 194:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 196:	80 81       	ld	r24, Z
 198:	8d 7f       	andi	r24, 0xFD	; 253
 19a:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 19c:	80 81       	ld	r24, Z
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	80 83       	st	Z, r24
		break;
 1a2:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
 1a4:	eb e7       	ldi	r30, 0x7B	; 123
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 7d       	andi	r24, 0xDF	; 223
 1ac:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 1ae:	ec e7       	ldi	r30, 0x7C	; 124
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
 1b8:	80 81       	ld	r24, Z
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1be:	80 81       	ld	r24, Z
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	80 83       	st	Z, r24
		break;
 1c4:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
 1c6:	eb e7       	ldi	r30, 0x7B	; 123
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1da:	80 81       	ld	r24, Z
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1e0:	80 81       	ld	r24, Z
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	80 83       	st	Z, r24
		break;
 1e6:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
 1e8:	eb e7       	ldi	r30, 0x7B	; 123
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1f2:	ec e7       	ldi	r30, 0x7C	; 124
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8b 7f       	andi	r24, 0xFB	; 251
 1fa:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1fc:	80 81       	ld	r24, Z
 1fe:	8d 7f       	andi	r24, 0xFD	; 253
 200:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 202:	80 81       	ld	r24, Z
 204:	81 60       	ori	r24, 0x01	; 1
 206:	80 83       	st	Z, r24
		break;
 208:	08 95       	ret
		case 7:
		clear(ADCSRB, MUX5);//Set analog input (F7)
 20a:	eb e7       	ldi	r30, 0x7B	; 123
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8f 7d       	andi	r24, 0xDF	; 223
 212:	80 83       	st	Z, r24
		set(ADMUX, MUX2);
 214:	ec e7       	ldi	r30, 0x7C	; 124
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	80 83       	st	Z, r24
		set(ADMUX, MUX1);
 21e:	80 81       	ld	r24, Z
 220:	82 60       	ori	r24, 0x02	; 2
 222:	80 83       	st	Z, r24
		set(ADMUX, MUX0);
 224:	80 81       	ld	r24, Z
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <getADC>:
int ADC6 = 0;
int ADC7 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
 22c:	80 91 06 01 	lds	r24, 0x0106
 230:	90 91 07 01 	lds	r25, 0x0107
 234:	89 2b       	or	r24, r25
 236:	09 f4       	brne	.+2      	; 0x23a <getADC+0xe>
 238:	8a c0       	rjmp	.+276    	; 0x34e <getADC+0x122>
		switch (flag) {
 23a:	80 91 29 01 	lds	r24, 0x0129
 23e:	90 91 2a 01 	lds	r25, 0x012A
 242:	88 30       	cpi	r24, 0x08	; 8
 244:	91 05       	cpc	r25, r1
 246:	08 f0       	brcs	.+2      	; 0x24a <getADC+0x1e>
 248:	4c c0       	rjmp	.+152    	; 0x2e2 <getADC+0xb6>
 24a:	fc 01       	movw	r30, r24
 24c:	e2 5a       	subi	r30, 0xA2	; 162
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__tablejump2__>
			case 0:
			ADC0 = ADC;
 254:	80 91 78 00 	lds	r24, 0x0078
 258:	90 91 79 00 	lds	r25, 0x0079
 25c:	90 93 17 01 	sts	0x0117, r25
 260:	80 93 16 01 	sts	0x0116, r24
			break;
 264:	3e c0       	rjmp	.+124    	; 0x2e2 <getADC+0xb6>
			case 1:
			ADC1 = ADC;
 266:	80 91 78 00 	lds	r24, 0x0078
 26a:	90 91 79 00 	lds	r25, 0x0079
 26e:	90 93 15 01 	sts	0x0115, r25
 272:	80 93 14 01 	sts	0x0114, r24
			break;
 276:	35 c0       	rjmp	.+106    	; 0x2e2 <getADC+0xb6>
			case 2:
			ADC2 = ADC;
 278:	80 91 78 00 	lds	r24, 0x0078
 27c:	90 91 79 00 	lds	r25, 0x0079
 280:	90 93 13 01 	sts	0x0113, r25
 284:	80 93 12 01 	sts	0x0112, r24
			break;
 288:	2c c0       	rjmp	.+88     	; 0x2e2 <getADC+0xb6>
			case 3:
			ADC3 = ADC;
 28a:	80 91 78 00 	lds	r24, 0x0078
 28e:	90 91 79 00 	lds	r25, 0x0079
 292:	90 93 11 01 	sts	0x0111, r25
 296:	80 93 10 01 	sts	0x0110, r24
			break;
 29a:	23 c0       	rjmp	.+70     	; 0x2e2 <getADC+0xb6>
			case 4:
			ADC4 = ADC;
 29c:	80 91 78 00 	lds	r24, 0x0078
 2a0:	90 91 79 00 	lds	r25, 0x0079
 2a4:	90 93 0f 01 	sts	0x010F, r25
 2a8:	80 93 0e 01 	sts	0x010E, r24
			break;
 2ac:	1a c0       	rjmp	.+52     	; 0x2e2 <getADC+0xb6>
			case 5:
			ADC5 = ADC;
 2ae:	80 91 78 00 	lds	r24, 0x0078
 2b2:	90 91 79 00 	lds	r25, 0x0079
 2b6:	90 93 0d 01 	sts	0x010D, r25
 2ba:	80 93 0c 01 	sts	0x010C, r24
			break;
 2be:	11 c0       	rjmp	.+34     	; 0x2e2 <getADC+0xb6>
			case 6:
			ADC6 = ADC;
 2c0:	80 91 78 00 	lds	r24, 0x0078
 2c4:	90 91 79 00 	lds	r25, 0x0079
 2c8:	90 93 0b 01 	sts	0x010B, r25
 2cc:	80 93 0a 01 	sts	0x010A, r24
			break;
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <getADC+0xb6>
			case 7:
			ADC7 = ADC;
 2d2:	80 91 78 00 	lds	r24, 0x0078
 2d6:	90 91 79 00 	lds	r25, 0x0079
 2da:	90 93 09 01 	sts	0x0109, r25
 2de:	80 93 08 01 	sts	0x0108, r24
			break;
		}
		clear(ADCSRA, ADEN);	//Enable/Start conversion
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	8f 77       	andi	r24, 0x7F	; 127
 2ea:	80 83       	st	Z, r24
		clear(ADCSRA, ADSC);	//^
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 7b       	andi	r24, 0xBF	; 191
 2f0:	80 83       	st	Z, r24
		clear(ADCSRA, ADATE);
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 7d       	andi	r24, 0xDF	; 223
 2f6:	80 83       	st	Z, r24
		clear(ADCSRA, ADIF);
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 7e       	andi	r24, 0xEF	; 239
 2fc:	80 83       	st	Z, r24
		if (flag >= 0 && flag < 8) {
 2fe:	80 91 29 01 	lds	r24, 0x0129
 302:	90 91 2a 01 	lds	r25, 0x012A
 306:	88 30       	cpi	r24, 0x08	; 8
 308:	91 05       	cpc	r25, r1
 30a:	78 f4       	brcc	.+30     	; 0x32a <getADC+0xfe>
			flag = (flag + 1) % 8;
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	87 70       	andi	r24, 0x07	; 7
 310:	90 78       	andi	r25, 0x80	; 128
 312:	99 23       	and	r25, r25
 314:	24 f4       	brge	.+8      	; 0x31e <getADC+0xf2>
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	88 6f       	ori	r24, 0xF8	; 248
 31a:	9f 6f       	ori	r25, 0xFF	; 255
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	90 93 2a 01 	sts	0x012A, r25
 322:	80 93 29 01 	sts	0x0129, r24
			chooseInput(flag);
 326:	0e 94 85 00 	call	0x10a	; 0x10a <chooseInput>
		}
		set(ADCSRA, ADATE);	//Set trigger to free-running mode
 32a:	ea e7       	ldi	r30, 0x7A	; 122
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 62       	ori	r24, 0x20	; 32
 332:	80 83       	st	Z, r24
		set(ADCSRA, ADEN);	//Enable/Start conversion
 334:	80 81       	ld	r24, Z
 336:	80 68       	ori	r24, 0x80	; 128
 338:	80 83       	st	Z, r24
		set(ADCSRA, ADSC);	//^
 33a:	80 81       	ld	r24, Z
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	80 83       	st	Z, r24
		
		set(ADCSRA, ADIF);	//Enable reading results
 340:	80 81       	ld	r24, Z
 342:	80 61       	ori	r24, 0x10	; 16
 344:	80 83       	st	Z, r24
		conversion = 0;
 346:	10 92 07 01 	sts	0x0107, r1
 34a:	10 92 06 01 	sts	0x0106, r1
	}

	ADCarr[0] = ADC0;
 34e:	80 91 16 01 	lds	r24, 0x0116
 352:	90 91 17 01 	lds	r25, 0x0117
 356:	90 93 1a 01 	sts	0x011A, r25
 35a:	80 93 19 01 	sts	0x0119, r24
	ADCarr[1] = ADC1;
 35e:	80 91 14 01 	lds	r24, 0x0114
 362:	90 91 15 01 	lds	r25, 0x0115
 366:	90 93 1c 01 	sts	0x011C, r25
 36a:	80 93 1b 01 	sts	0x011B, r24
	ADCarr[2] = ADC2;
 36e:	80 91 12 01 	lds	r24, 0x0112
 372:	90 91 13 01 	lds	r25, 0x0113
 376:	90 93 1e 01 	sts	0x011E, r25
 37a:	80 93 1d 01 	sts	0x011D, r24
	ADCarr[3] = ADC3;
 37e:	80 91 10 01 	lds	r24, 0x0110
 382:	90 91 11 01 	lds	r25, 0x0111
 386:	90 93 20 01 	sts	0x0120, r25
 38a:	80 93 1f 01 	sts	0x011F, r24
	ADCarr[4] = ADC4;
 38e:	80 91 0e 01 	lds	r24, 0x010E
 392:	90 91 0f 01 	lds	r25, 0x010F
 396:	90 93 22 01 	sts	0x0122, r25
 39a:	80 93 21 01 	sts	0x0121, r24
	ADCarr[5] = ADC5;
 39e:	80 91 0c 01 	lds	r24, 0x010C
 3a2:	90 91 0d 01 	lds	r25, 0x010D
 3a6:	90 93 24 01 	sts	0x0124, r25
 3aa:	80 93 23 01 	sts	0x0123, r24
	ADCarr[6] = ADC6;
 3ae:	80 91 0a 01 	lds	r24, 0x010A
 3b2:	90 91 0b 01 	lds	r25, 0x010B
 3b6:	90 93 26 01 	sts	0x0126, r25
 3ba:	80 93 25 01 	sts	0x0125, r24
	ADCarr[7] = ADC7;
 3be:	80 91 08 01 	lds	r24, 0x0108
 3c2:	90 91 09 01 	lds	r25, 0x0109
 3c6:	90 93 28 01 	sts	0x0128, r25
 3ca:	80 93 27 01 	sts	0x0127, r24
 3ce:	08 95       	ret

000003d0 <drive_straight>:
	
	
}

void drive_straight(char dir, float speed) {
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	6a 01       	movw	r12, r20
 3da:	7b 01       	movw	r14, r22
	switch (dir) {
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	19 f0       	breq	.+6      	; 0x3e6 <drive_straight+0x16>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	21 f0       	breq	.+8      	; 0x3ec <drive_straight+0x1c>
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <drive_straight+0x20>
		case WAIT:
			break;
		case FORWARD:
			set(PORTB, 2);
 3e6:	2a 9a       	sbi	0x05, 2	; 5
			set(PORTB, 3);
 3e8:	2b 9a       	sbi	0x05, 3	; 5
			break;
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <drive_straight+0x20>
		case BACKWARD:
			clear(PORTB, 2);
 3ec:	2a 98       	cbi	0x05, 2	; 5
			clear(PORTB, 3);
 3ee:	2b 98       	cbi	0x05, 3	; 5
			break;
	}
	OCR1B = (unsigned int) (OCR1A * speed);
 3f0:	60 91 88 00 	lds	r22, 0x0088
 3f4:	70 91 89 00 	lds	r23, 0x0089
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 01 04 	call	0x802	; 0x802 <__floatunsisf>
 400:	a7 01       	movw	r20, r14
 402:	96 01       	movw	r18, r12
 404:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 408:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fixunssfsi>
 40c:	70 93 8b 00 	sts	0x008B, r23
 410:	60 93 8a 00 	sts	0x008A, r22
	OCR3B = (unsigned int) (ICR3 * speed);
 414:	60 91 96 00 	lds	r22, 0x0096
 418:	70 91 97 00 	lds	r23, 0x0097
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 01 04 	call	0x802	; 0x802 <__floatunsisf>
 424:	a7 01       	movw	r20, r14
 426:	96 01       	movw	r18, r12
 428:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 42c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fixunssfsi>
 430:	70 93 9b 00 	sts	0x009B, r23
 434:	60 93 9a 00 	sts	0x009A, r22
}
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	08 95       	ret

00000442 <main>:

int main(void)
{
	
	sei();
 442:	78 94       	sei
	
	//TIMER 1: for left wheel
	set(TCCR1B, WGM13);
 444:	e1 e8       	ldi	r30, 0x81	; 129
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	80 61       	ori	r24, 0x10	; 16
 44c:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
 44e:	80 81       	ld	r24, Z
 450:	88 60       	ori	r24, 0x08	; 8
 452:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
 454:	a0 e8       	ldi	r26, 0x80	; 128
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	8c 91       	ld	r24, X
 45a:	82 60       	ori	r24, 0x02	; 2
 45c:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
 45e:	8c 91       	ld	r24, X
 460:	81 60       	ori	r24, 0x01	; 1
 462:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
 464:	8c 91       	ld	r24, X
 466:	80 62       	ori	r24, 0x20	; 32
 468:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
 46a:	8c 91       	ld	r24, X
 46c:	8f 7e       	andi	r24, 0xEF	; 239
 46e:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
 470:	80 81       	ld	r24, Z
 472:	8b 7f       	andi	r24, 0xFB	; 251
 474:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
 476:	80 81       	ld	r24, Z
 478:	8d 7f       	andi	r24, 0xFD	; 253
 47a:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
 47c:	80 81       	ld	r24, Z
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	80 83       	st	Z, r24
	
	OCR1A = 0xFFFF;
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	9f ef       	ldi	r25, 0xFF	; 255
 486:	90 93 89 00 	sts	0x0089, r25
 48a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
 48e:	10 92 8b 00 	sts	0x008B, r1
 492:	10 92 8a 00 	sts	0x008A, r1
	
	
	//TIMER 3: For right wheel
	set(TCCR3B, WGM33);
 496:	e1 e9       	ldi	r30, 0x91	; 145
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	20 81       	ld	r18, Z
 49c:	20 61       	ori	r18, 0x10	; 16
 49e:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
 4a0:	20 81       	ld	r18, Z
 4a2:	28 60       	ori	r18, 0x08	; 8
 4a4:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
 4a6:	a0 e9       	ldi	r26, 0x90	; 144
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	2c 91       	ld	r18, X
 4ac:	22 60       	ori	r18, 0x02	; 2
 4ae:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
 4b0:	2c 91       	ld	r18, X
 4b2:	2e 7f       	andi	r18, 0xFE	; 254
 4b4:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1);
 4b6:	2c 91       	ld	r18, X
 4b8:	20 68       	ori	r18, 0x80	; 128
 4ba:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0);
 4bc:	2c 91       	ld	r18, X
 4be:	2f 7b       	andi	r18, 0xBF	; 191
 4c0:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
 4c2:	20 81       	ld	r18, Z
 4c4:	2b 7f       	andi	r18, 0xFB	; 251
 4c6:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
 4c8:	20 81       	ld	r18, Z
 4ca:	2d 7f       	andi	r18, 0xFD	; 253
 4cc:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
 4ce:	20 81       	ld	r18, Z
 4d0:	21 60       	ori	r18, 0x01	; 1
 4d2:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
 4d4:	90 93 97 00 	sts	0x0097, r25
 4d8:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
 4dc:	10 92 99 00 	sts	0x0099, r1
 4e0:	10 92 98 00 	sts	0x0098, r1
	
	
	//TIMER 0: For control loop
	clear(TCCR0B, CS02);
 4e4:	85 b5       	in	r24, 0x25	; 37
 4e6:	8b 7f       	andi	r24, 0xFB	; 251
 4e8:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
 4ea:	85 b5       	in	r24, 0x25	; 37
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
 4f0:	85 b5       	in	r24, 0x25	; 37
 4f2:	81 60       	ori	r24, 0x01	; 1
 4f4:	85 bd       	out	0x25, r24	; 37
	
	set(TCCR0B, WGM02);
 4f6:	85 b5       	in	r24, 0x25	; 37
 4f8:	88 60       	ori	r24, 0x08	; 8
 4fa:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A, WGM01);
 4fc:	84 b5       	in	r24, 0x24	; 36
 4fe:	8d 7f       	andi	r24, 0xFD	; 253
 500:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM00);
 502:	84 b5       	in	r24, 0x24	; 36
 504:	81 60       	ori	r24, 0x01	; 1
 506:	84 bd       	out	0x24, r24	; 36
	
	clear(TCCR0A, COM0B1);
 508:	84 b5       	in	r24, 0x24	; 36
 50a:	8f 7d       	andi	r24, 0xDF	; 223
 50c:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
 50e:	84 b5       	in	r24, 0x24	; 36
 510:	8f 7e       	andi	r24, 0xEF	; 239
 512:	84 bd       	out	0x24, r24	; 36
	
	set(TIMSK0,TOIE0);
 514:	ee e6       	ldi	r30, 0x6E	; 110
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	80 83       	st	Z, r24
	
	double controlfreq = 200;
	
	OCR0A = (unsigned int) (7801.8/(controlfreq/2));
 51e:	8e e4       	ldi	r24, 0x4E	; 78
 520:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x00;
 522:	18 bc       	out	0x28, r1	; 40
	
	set(DDRB,6);
 524:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
 526:	3e 9a       	sbi	0x07, 6	; 7
	
	set(DDRB,2);
 528:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
 52a:	23 9a       	sbi	0x04, 3	; 4
	
	char constantcontrol = 1;
	
	set(DDRB,0);
 52c:	20 9a       	sbi	0x04, 0	; 4
    {
		if (!constantcontrol || newcycle) {
			newcycle = 0;
			//m_red(TOGGLE);
			getADC();
			toggle(PORTB,0);
 52e:	c1 e0       	ldi	r28, 0x01	; 1
	
	set(DDRB,0);
	
    while(1)
    {
		if (!constantcontrol || newcycle) {
 530:	80 91 18 01 	lds	r24, 0x0118
 534:	88 23       	and	r24, r24
 536:	e1 f3       	breq	.-8      	; 0x530 <main+0xee>
			newcycle = 0;
 538:	10 92 18 01 	sts	0x0118, r1
			//m_red(TOGGLE);
			getADC();
 53c:	0e 94 16 01 	call	0x22c	; 0x22c <getADC>
			toggle(PORTB,0);
 540:	85 b1       	in	r24, 0x05	; 5
 542:	8c 27       	eor	r24, r28
 544:	85 b9       	out	0x05, r24	; 5
			
			CtrlOutput *control = straight_control(&ADCarr[0]);
 546:	89 e1       	ldi	r24, 0x19	; 25
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <straight_control>
			drive_straight(control->state, control->speed);
 54e:	fc 01       	movw	r30, r24
 550:	46 81       	ldd	r20, Z+6	; 0x06
 552:	57 81       	ldd	r21, Z+7	; 0x07
 554:	60 85       	ldd	r22, Z+8	; 0x08
 556:	71 85       	ldd	r23, Z+9	; 0x09
 558:	80 81       	ld	r24, Z
 55a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <drive_straight>
 55e:	e8 cf       	rjmp	.-48     	; 0x530 <main+0xee>

00000560 <__vector_29>:
		
		}
	}
}

ISR(ADC_vect) {
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
	//cli();
	conversion = 1;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	90 93 07 01 	sts	0x0107, r25
 576:	80 93 06 01 	sts	0x0106, r24
	//sei();
}
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_23>:

ISR(TIMER0_OVF_vect) {
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
	newcycle = 1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 18 01 	sts	0x0118, r24
	m_red(TOGGLE);
 59c:	6e 9a       	sbi	0x0d, 6	; 13
 59e:	9e b1       	in	r25, 0x0e	; 14
 5a0:	80 e4       	ldi	r24, 0x40	; 64
 5a2:	89 27       	eor	r24, r25
 5a4:	8e b9       	out	0x0e, r24	; 14
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <straight_control>:
		} else {
		return 1;
	}
}

CtrlOutput *straight_control(float *ADCs) {
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	8c 01       	movw	r16, r24
	int thresholdlow = 700;
	int thresholdhigh = 800;
	unsigned int maxADC;
	CtrlOutput *ans = malloc(sizeof(CtrlOutput));
 5be:	8a e0       	ldi	r24, 0x0A	; 10
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 43 05 	call	0xa86	; 0xa86 <malloc>
 5c6:	ec 01       	movw	r28, r24
	if (ADCs[0] > ADCs[1]) {
 5c8:	f8 01       	movw	r30, r16
 5ca:	24 81       	ldd	r18, Z+4	; 0x04
 5cc:	35 81       	ldd	r19, Z+5	; 0x05
 5ce:	46 81       	ldd	r20, Z+6	; 0x06
 5d0:	57 81       	ldd	r21, Z+7	; 0x07
 5d2:	60 81       	ld	r22, Z
 5d4:	71 81       	ldd	r23, Z+1	; 0x01
 5d6:	82 81       	ldd	r24, Z+2	; 0x02
 5d8:	93 81       	ldd	r25, Z+3	; 0x03
 5da:	0e 94 8f 04 	call	0x91e	; 0x91e <__gesf2>
 5de:	18 16       	cp	r1, r24
 5e0:	84 f4       	brge	.+32     	; 0x602 <straight_control+0x4e>
		ans->state = FORWARD;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	99 83       	std	Y+1, r25	; 0x01
 5e8:	88 83       	st	Y, r24
		ans->orientation = 0;
 5ea:	1a 82       	std	Y+2, r1	; 0x02
 5ec:	1b 82       	std	Y+3, r1	; 0x03
 5ee:	1c 82       	std	Y+4, r1	; 0x04
 5f0:	1d 82       	std	Y+5, r1	; 0x05
		maxADC = ADCs[0];
 5f2:	f8 01       	movw	r30, r16
 5f4:	60 81       	ld	r22, Z
 5f6:	71 81       	ldd	r23, Z+1	; 0x01
 5f8:	82 81       	ldd	r24, Z+2	; 0x02
 5fa:	93 81       	ldd	r25, Z+3	; 0x03
 5fc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fixunssfsi>
 600:	0f c0       	rjmp	.+30     	; 0x620 <straight_control+0x6c>
	}
	else {
		ans->state = BACKWARD;
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	99 83       	std	Y+1, r25	; 0x01
 608:	88 83       	st	Y, r24
		ans->orientation = 0;
 60a:	1a 82       	std	Y+2, r1	; 0x02
 60c:	1b 82       	std	Y+3, r1	; 0x03
 60e:	1c 82       	std	Y+4, r1	; 0x04
 610:	1d 82       	std	Y+5, r1	; 0x05
		maxADC = ADCs[1];
 612:	f8 01       	movw	r30, r16
 614:	64 81       	ldd	r22, Z+4	; 0x04
 616:	75 81       	ldd	r23, Z+5	; 0x05
 618:	86 81       	ldd	r24, Z+6	; 0x06
 61a:	97 81       	ldd	r25, Z+7	; 0x07
 61c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fixunssfsi>
	}
	
	if (maxADC < thresholdhigh && maxADC > thresholdlow) {
 620:	60 32       	cpi	r22, 0x20	; 32
 622:	f3 e0       	ldi	r31, 0x03	; 3
 624:	7f 07       	cpc	r23, r31
 626:	78 f4       	brcc	.+30     	; 0x646 <straight_control+0x92>
 628:	6d 3b       	cpi	r22, 0xBD	; 189
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	78 07       	cpc	r23, r24
 62e:	e8 f1       	brcs	.+122    	; 0x6aa <straight_control+0xf6>
		ans->state = WAIT;
 630:	19 82       	std	Y+1, r1	; 0x01
 632:	18 82       	st	Y, r1
		ans->orientation = 0;
 634:	1a 82       	std	Y+2, r1	; 0x02
 636:	1b 82       	std	Y+3, r1	; 0x03
 638:	1c 82       	std	Y+4, r1	; 0x04
 63a:	1d 82       	std	Y+5, r1	; 0x05
		ans->speed = 0;
 63c:	1e 82       	std	Y+6, r1	; 0x06
 63e:	1f 82       	std	Y+7, r1	; 0x07
 640:	18 86       	std	Y+8, r1	; 0x08
 642:	19 86       	std	Y+9, r1	; 0x09
 644:	47 c0       	rjmp	.+142    	; 0x6d4 <straight_control+0x120>
#include "control.h"
#include <stdlib.h>

int oppDir(int st) {
	if (st == 1) {
 646:	88 81       	ld	r24, Y
 648:	99 81       	ldd	r25, Y+1	; 0x01
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	19 f4       	brne	.+6      	; 0x654 <straight_control+0xa0>
		return 2;
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <straight_control+0xa4>
		} else {
		return 1;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
		ans->state = WAIT;
		ans->orientation = 0;
		ans->speed = 0;
	}
	else if (maxADC >= thresholdhigh) {
		ans->state = oppDir(ans->state);
 658:	99 83       	std	Y+1, r25	; 0x01
 65a:	88 83       	st	Y, r24
		ans->speed = 1.0 - (1023 - maxADC) / (1023 - thresholdhigh);
 65c:	4f ef       	ldi	r20, 0xFF	; 255
 65e:	53 e0       	ldi	r21, 0x03	; 3
 660:	46 1b       	sub	r20, r22
 662:	57 0b       	sbc	r21, r23
 664:	9a 01       	movw	r18, r20
 666:	a3 ee       	ldi	r26, 0xE3	; 227
 668:	b5 e2       	ldi	r27, 0x25	; 37
 66a:	0e 94 34 05 	call	0xa68	; 0xa68 <__umulhisi3>
 66e:	48 1b       	sub	r20, r24
 670:	59 0b       	sbc	r21, r25
 672:	ba 01       	movw	r22, r20
 674:	76 95       	lsr	r23
 676:	67 95       	ror	r22
 678:	86 0f       	add	r24, r22
 67a:	97 1f       	adc	r25, r23
 67c:	bc 01       	movw	r22, r24
 67e:	66 0f       	add	r22, r22
 680:	67 2f       	mov	r22, r23
 682:	66 1f       	adc	r22, r22
 684:	77 0b       	sbc	r23, r23
 686:	71 95       	neg	r23
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 01 04 	call	0x802	; 0x802 <__floatunsisf>
 690:	9b 01       	movw	r18, r22
 692:	ac 01       	movw	r20, r24
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	80 e8       	ldi	r24, 0x80	; 128
 69a:	9f e3       	ldi	r25, 0x3F	; 63
 69c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__subsf3>
 6a0:	6e 83       	std	Y+6, r22	; 0x06
 6a2:	7f 83       	std	Y+7, r23	; 0x07
 6a4:	88 87       	std	Y+8, r24	; 0x08
 6a6:	99 87       	std	Y+9, r25	; 0x09
 6a8:	15 c0       	rjmp	.+42     	; 0x6d4 <straight_control+0x120>
	}
	else {
		ans->speed = 1.0 - (maxADC / thresholdlow);
 6aa:	cb 01       	movw	r24, r22
 6ac:	6c eb       	ldi	r22, 0xBC	; 188
 6ae:	72 e0       	ldi	r23, 0x02	; 2
 6b0:	0e 94 1a 05 	call	0xa34	; 0xa34 <__udivmodhi4>
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 01 04 	call	0x802	; 0x802 <__floatunsisf>
 6bc:	9b 01       	movw	r18, r22
 6be:	ac 01       	movw	r20, r24
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	80 e8       	ldi	r24, 0x80	; 128
 6c6:	9f e3       	ldi	r25, 0x3F	; 63
 6c8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__subsf3>
 6cc:	6e 83       	std	Y+6, r22	; 0x06
 6ce:	7f 83       	std	Y+7, r23	; 0x07
 6d0:	88 87       	std	Y+8, r24	; 0x08
 6d2:	99 87       	std	Y+9, r25	; 0x09
	}
	
	return ans;
 6d4:	ce 01       	movw	r24, r28
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	08 95       	ret

000006e0 <__subsf3>:
 6e0:	50 58       	subi	r21, 0x80	; 128

000006e2 <__addsf3>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	aa 27       	eor	r26, r26
 6e6:	0e d0       	rcall	.+28     	; 0x704 <__addsf3x>
 6e8:	e0 c0       	rjmp	.+448    	; 0x8aa <__fp_round>
 6ea:	d1 d0       	rcall	.+418    	; 0x88e <__fp_pscA>
 6ec:	30 f0       	brcs	.+12     	; 0x6fa <__addsf3+0x18>
 6ee:	d6 d0       	rcall	.+428    	; 0x89c <__fp_pscB>
 6f0:	20 f0       	brcs	.+8      	; 0x6fa <__addsf3+0x18>
 6f2:	31 f4       	brne	.+12     	; 0x700 <__addsf3+0x1e>
 6f4:	9f 3f       	cpi	r25, 0xFF	; 255
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__addsf3+0x1a>
 6f8:	1e f4       	brtc	.+6      	; 0x700 <__addsf3+0x1e>
 6fa:	c6 c0       	rjmp	.+396    	; 0x888 <__fp_nan>
 6fc:	0e f4       	brtc	.+2      	; 0x700 <__addsf3+0x1e>
 6fe:	e0 95       	com	r30
 700:	e7 fb       	bst	r30, 7
 702:	bc c0       	rjmp	.+376    	; 0x87c <__fp_inf>

00000704 <__addsf3x>:
 704:	e9 2f       	mov	r30, r25
 706:	e2 d0       	rcall	.+452    	; 0x8cc <__fp_split3>
 708:	80 f3       	brcs	.-32     	; 0x6ea <__addsf3+0x8>
 70a:	ba 17       	cp	r27, r26
 70c:	62 07       	cpc	r22, r18
 70e:	73 07       	cpc	r23, r19
 710:	84 07       	cpc	r24, r20
 712:	95 07       	cpc	r25, r21
 714:	18 f0       	brcs	.+6      	; 0x71c <__addsf3x+0x18>
 716:	71 f4       	brne	.+28     	; 0x734 <__addsf3x+0x30>
 718:	9e f5       	brtc	.+102    	; 0x780 <__addsf3x+0x7c>
 71a:	fa c0       	rjmp	.+500    	; 0x910 <__fp_zero>
 71c:	0e f4       	brtc	.+2      	; 0x720 <__addsf3x+0x1c>
 71e:	e0 95       	com	r30
 720:	0b 2e       	mov	r0, r27
 722:	ba 2f       	mov	r27, r26
 724:	a0 2d       	mov	r26, r0
 726:	0b 01       	movw	r0, r22
 728:	b9 01       	movw	r22, r18
 72a:	90 01       	movw	r18, r0
 72c:	0c 01       	movw	r0, r24
 72e:	ca 01       	movw	r24, r20
 730:	a0 01       	movw	r20, r0
 732:	11 24       	eor	r1, r1
 734:	ff 27       	eor	r31, r31
 736:	59 1b       	sub	r21, r25
 738:	99 f0       	breq	.+38     	; 0x760 <__addsf3x+0x5c>
 73a:	59 3f       	cpi	r21, 0xF9	; 249
 73c:	50 f4       	brcc	.+20     	; 0x752 <__addsf3x+0x4e>
 73e:	50 3e       	cpi	r21, 0xE0	; 224
 740:	68 f1       	brcs	.+90     	; 0x79c <__addsf3x+0x98>
 742:	1a 16       	cp	r1, r26
 744:	f0 40       	sbci	r31, 0x00	; 0
 746:	a2 2f       	mov	r26, r18
 748:	23 2f       	mov	r18, r19
 74a:	34 2f       	mov	r19, r20
 74c:	44 27       	eor	r20, r20
 74e:	58 5f       	subi	r21, 0xF8	; 248
 750:	f3 cf       	rjmp	.-26     	; 0x738 <__addsf3x+0x34>
 752:	46 95       	lsr	r20
 754:	37 95       	ror	r19
 756:	27 95       	ror	r18
 758:	a7 95       	ror	r26
 75a:	f0 40       	sbci	r31, 0x00	; 0
 75c:	53 95       	inc	r21
 75e:	c9 f7       	brne	.-14     	; 0x752 <__addsf3x+0x4e>
 760:	7e f4       	brtc	.+30     	; 0x780 <__addsf3x+0x7c>
 762:	1f 16       	cp	r1, r31
 764:	ba 0b       	sbc	r27, r26
 766:	62 0b       	sbc	r22, r18
 768:	73 0b       	sbc	r23, r19
 76a:	84 0b       	sbc	r24, r20
 76c:	ba f0       	brmi	.+46     	; 0x79c <__addsf3x+0x98>
 76e:	91 50       	subi	r25, 0x01	; 1
 770:	a1 f0       	breq	.+40     	; 0x79a <__addsf3x+0x96>
 772:	ff 0f       	add	r31, r31
 774:	bb 1f       	adc	r27, r27
 776:	66 1f       	adc	r22, r22
 778:	77 1f       	adc	r23, r23
 77a:	88 1f       	adc	r24, r24
 77c:	c2 f7       	brpl	.-16     	; 0x76e <__addsf3x+0x6a>
 77e:	0e c0       	rjmp	.+28     	; 0x79c <__addsf3x+0x98>
 780:	ba 0f       	add	r27, r26
 782:	62 1f       	adc	r22, r18
 784:	73 1f       	adc	r23, r19
 786:	84 1f       	adc	r24, r20
 788:	48 f4       	brcc	.+18     	; 0x79c <__addsf3x+0x98>
 78a:	87 95       	ror	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b7 95       	ror	r27
 792:	f7 95       	ror	r31
 794:	9e 3f       	cpi	r25, 0xFE	; 254
 796:	08 f0       	brcs	.+2      	; 0x79a <__addsf3x+0x96>
 798:	b3 cf       	rjmp	.-154    	; 0x700 <__addsf3+0x1e>
 79a:	93 95       	inc	r25
 79c:	88 0f       	add	r24, r24
 79e:	08 f0       	brcs	.+2      	; 0x7a2 <__addsf3x+0x9e>
 7a0:	99 27       	eor	r25, r25
 7a2:	ee 0f       	add	r30, r30
 7a4:	97 95       	ror	r25
 7a6:	87 95       	ror	r24
 7a8:	08 95       	ret

000007aa <__fixunssfsi>:
 7aa:	98 d0       	rcall	.+304    	; 0x8dc <__fp_splitA>
 7ac:	88 f0       	brcs	.+34     	; 0x7d0 <__fixunssfsi+0x26>
 7ae:	9f 57       	subi	r25, 0x7F	; 127
 7b0:	90 f0       	brcs	.+36     	; 0x7d6 <__fixunssfsi+0x2c>
 7b2:	b9 2f       	mov	r27, r25
 7b4:	99 27       	eor	r25, r25
 7b6:	b7 51       	subi	r27, 0x17	; 23
 7b8:	a0 f0       	brcs	.+40     	; 0x7e2 <__fixunssfsi+0x38>
 7ba:	d1 f0       	breq	.+52     	; 0x7f0 <__fixunssfsi+0x46>
 7bc:	66 0f       	add	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	88 1f       	adc	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	1a f0       	brmi	.+6      	; 0x7cc <__fixunssfsi+0x22>
 7c6:	ba 95       	dec	r27
 7c8:	c9 f7       	brne	.-14     	; 0x7bc <__fixunssfsi+0x12>
 7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <__fixunssfsi+0x46>
 7cc:	b1 30       	cpi	r27, 0x01	; 1
 7ce:	81 f0       	breq	.+32     	; 0x7f0 <__fixunssfsi+0x46>
 7d0:	9f d0       	rcall	.+318    	; 0x910 <__fp_zero>
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	08 95       	ret
 7d6:	9c c0       	rjmp	.+312    	; 0x910 <__fp_zero>
 7d8:	67 2f       	mov	r22, r23
 7da:	78 2f       	mov	r23, r24
 7dc:	88 27       	eor	r24, r24
 7de:	b8 5f       	subi	r27, 0xF8	; 248
 7e0:	39 f0       	breq	.+14     	; 0x7f0 <__fixunssfsi+0x46>
 7e2:	b9 3f       	cpi	r27, 0xF9	; 249
 7e4:	cc f3       	brlt	.-14     	; 0x7d8 <__fixunssfsi+0x2e>
 7e6:	86 95       	lsr	r24
 7e8:	77 95       	ror	r23
 7ea:	67 95       	ror	r22
 7ec:	b3 95       	inc	r27
 7ee:	d9 f7       	brne	.-10     	; 0x7e6 <__fixunssfsi+0x3c>
 7f0:	3e f4       	brtc	.+14     	; 0x800 <__fixunssfsi+0x56>
 7f2:	90 95       	com	r25
 7f4:	80 95       	com	r24
 7f6:	70 95       	com	r23
 7f8:	61 95       	neg	r22
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	08 95       	ret

00000802 <__floatunsisf>:
 802:	e8 94       	clt
 804:	09 c0       	rjmp	.+18     	; 0x818 <__floatsisf+0x12>

00000806 <__floatsisf>:
 806:	97 fb       	bst	r25, 7
 808:	3e f4       	brtc	.+14     	; 0x818 <__floatsisf+0x12>
 80a:	90 95       	com	r25
 80c:	80 95       	com	r24
 80e:	70 95       	com	r23
 810:	61 95       	neg	r22
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	8f 4f       	sbci	r24, 0xFF	; 255
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	99 23       	and	r25, r25
 81a:	a9 f0       	breq	.+42     	; 0x846 <__floatsisf+0x40>
 81c:	f9 2f       	mov	r31, r25
 81e:	96 e9       	ldi	r25, 0x96	; 150
 820:	bb 27       	eor	r27, r27
 822:	93 95       	inc	r25
 824:	f6 95       	lsr	r31
 826:	87 95       	ror	r24
 828:	77 95       	ror	r23
 82a:	67 95       	ror	r22
 82c:	b7 95       	ror	r27
 82e:	f1 11       	cpse	r31, r1
 830:	f8 cf       	rjmp	.-16     	; 0x822 <__floatsisf+0x1c>
 832:	fa f4       	brpl	.+62     	; 0x872 <__floatsisf+0x6c>
 834:	bb 0f       	add	r27, r27
 836:	11 f4       	brne	.+4      	; 0x83c <__floatsisf+0x36>
 838:	60 ff       	sbrs	r22, 0
 83a:	1b c0       	rjmp	.+54     	; 0x872 <__floatsisf+0x6c>
 83c:	6f 5f       	subi	r22, 0xFF	; 255
 83e:	7f 4f       	sbci	r23, 0xFF	; 255
 840:	8f 4f       	sbci	r24, 0xFF	; 255
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	16 c0       	rjmp	.+44     	; 0x872 <__floatsisf+0x6c>
 846:	88 23       	and	r24, r24
 848:	11 f0       	breq	.+4      	; 0x84e <__floatsisf+0x48>
 84a:	96 e9       	ldi	r25, 0x96	; 150
 84c:	11 c0       	rjmp	.+34     	; 0x870 <__floatsisf+0x6a>
 84e:	77 23       	and	r23, r23
 850:	21 f0       	breq	.+8      	; 0x85a <__floatsisf+0x54>
 852:	9e e8       	ldi	r25, 0x8E	; 142
 854:	87 2f       	mov	r24, r23
 856:	76 2f       	mov	r23, r22
 858:	05 c0       	rjmp	.+10     	; 0x864 <__floatsisf+0x5e>
 85a:	66 23       	and	r22, r22
 85c:	71 f0       	breq	.+28     	; 0x87a <__floatsisf+0x74>
 85e:	96 e8       	ldi	r25, 0x86	; 134
 860:	86 2f       	mov	r24, r22
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	2a f0       	brmi	.+10     	; 0x872 <__floatsisf+0x6c>
 868:	9a 95       	dec	r25
 86a:	66 0f       	add	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	da f7       	brpl	.-10     	; 0x868 <__floatsisf+0x62>
 872:	88 0f       	add	r24, r24
 874:	96 95       	lsr	r25
 876:	87 95       	ror	r24
 878:	97 f9       	bld	r25, 7
 87a:	08 95       	ret

0000087c <__fp_inf>:
 87c:	97 f9       	bld	r25, 7
 87e:	9f 67       	ori	r25, 0x7F	; 127
 880:	80 e8       	ldi	r24, 0x80	; 128
 882:	70 e0       	ldi	r23, 0x00	; 0
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	08 95       	ret

00000888 <__fp_nan>:
 888:	9f ef       	ldi	r25, 0xFF	; 255
 88a:	80 ec       	ldi	r24, 0xC0	; 192
 88c:	08 95       	ret

0000088e <__fp_pscA>:
 88e:	00 24       	eor	r0, r0
 890:	0a 94       	dec	r0
 892:	16 16       	cp	r1, r22
 894:	17 06       	cpc	r1, r23
 896:	18 06       	cpc	r1, r24
 898:	09 06       	cpc	r0, r25
 89a:	08 95       	ret

0000089c <__fp_pscB>:
 89c:	00 24       	eor	r0, r0
 89e:	0a 94       	dec	r0
 8a0:	12 16       	cp	r1, r18
 8a2:	13 06       	cpc	r1, r19
 8a4:	14 06       	cpc	r1, r20
 8a6:	05 06       	cpc	r0, r21
 8a8:	08 95       	ret

000008aa <__fp_round>:
 8aa:	09 2e       	mov	r0, r25
 8ac:	03 94       	inc	r0
 8ae:	00 0c       	add	r0, r0
 8b0:	11 f4       	brne	.+4      	; 0x8b6 <__fp_round+0xc>
 8b2:	88 23       	and	r24, r24
 8b4:	52 f0       	brmi	.+20     	; 0x8ca <__fp_round+0x20>
 8b6:	bb 0f       	add	r27, r27
 8b8:	40 f4       	brcc	.+16     	; 0x8ca <__fp_round+0x20>
 8ba:	bf 2b       	or	r27, r31
 8bc:	11 f4       	brne	.+4      	; 0x8c2 <__fp_round+0x18>
 8be:	60 ff       	sbrs	r22, 0
 8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__fp_round+0x20>
 8c2:	6f 5f       	subi	r22, 0xFF	; 255
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	08 95       	ret

000008cc <__fp_split3>:
 8cc:	57 fd       	sbrc	r21, 7
 8ce:	90 58       	subi	r25, 0x80	; 128
 8d0:	44 0f       	add	r20, r20
 8d2:	55 1f       	adc	r21, r21
 8d4:	59 f0       	breq	.+22     	; 0x8ec <__fp_splitA+0x10>
 8d6:	5f 3f       	cpi	r21, 0xFF	; 255
 8d8:	71 f0       	breq	.+28     	; 0x8f6 <__fp_splitA+0x1a>
 8da:	47 95       	ror	r20

000008dc <__fp_splitA>:
 8dc:	88 0f       	add	r24, r24
 8de:	97 fb       	bst	r25, 7
 8e0:	99 1f       	adc	r25, r25
 8e2:	61 f0       	breq	.+24     	; 0x8fc <__fp_splitA+0x20>
 8e4:	9f 3f       	cpi	r25, 0xFF	; 255
 8e6:	79 f0       	breq	.+30     	; 0x906 <__fp_splitA+0x2a>
 8e8:	87 95       	ror	r24
 8ea:	08 95       	ret
 8ec:	12 16       	cp	r1, r18
 8ee:	13 06       	cpc	r1, r19
 8f0:	14 06       	cpc	r1, r20
 8f2:	55 1f       	adc	r21, r21
 8f4:	f2 cf       	rjmp	.-28     	; 0x8da <__fp_split3+0xe>
 8f6:	46 95       	lsr	r20
 8f8:	f1 df       	rcall	.-30     	; 0x8dc <__fp_splitA>
 8fa:	08 c0       	rjmp	.+16     	; 0x90c <__fp_splitA+0x30>
 8fc:	16 16       	cp	r1, r22
 8fe:	17 06       	cpc	r1, r23
 900:	18 06       	cpc	r1, r24
 902:	99 1f       	adc	r25, r25
 904:	f1 cf       	rjmp	.-30     	; 0x8e8 <__fp_splitA+0xc>
 906:	86 95       	lsr	r24
 908:	71 05       	cpc	r23, r1
 90a:	61 05       	cpc	r22, r1
 90c:	08 94       	sec
 90e:	08 95       	ret

00000910 <__fp_zero>:
 910:	e8 94       	clt

00000912 <__fp_szero>:
 912:	bb 27       	eor	r27, r27
 914:	66 27       	eor	r22, r22
 916:	77 27       	eor	r23, r23
 918:	cb 01       	movw	r24, r22
 91a:	97 f9       	bld	r25, 7
 91c:	08 95       	ret

0000091e <__gesf2>:
 91e:	66 d0       	rcall	.+204    	; 0x9ec <__fp_cmp>
 920:	08 f4       	brcc	.+2      	; 0x924 <__gesf2+0x6>
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	08 95       	ret

00000926 <__mulsf3>:
 926:	0b d0       	rcall	.+22     	; 0x93e <__mulsf3x>
 928:	c0 cf       	rjmp	.-128    	; 0x8aa <__fp_round>
 92a:	b1 df       	rcall	.-158    	; 0x88e <__fp_pscA>
 92c:	28 f0       	brcs	.+10     	; 0x938 <__mulsf3+0x12>
 92e:	b6 df       	rcall	.-148    	; 0x89c <__fp_pscB>
 930:	18 f0       	brcs	.+6      	; 0x938 <__mulsf3+0x12>
 932:	95 23       	and	r25, r21
 934:	09 f0       	breq	.+2      	; 0x938 <__mulsf3+0x12>
 936:	a2 cf       	rjmp	.-188    	; 0x87c <__fp_inf>
 938:	a7 cf       	rjmp	.-178    	; 0x888 <__fp_nan>
 93a:	11 24       	eor	r1, r1
 93c:	ea cf       	rjmp	.-44     	; 0x912 <__fp_szero>

0000093e <__mulsf3x>:
 93e:	c6 df       	rcall	.-116    	; 0x8cc <__fp_split3>
 940:	a0 f3       	brcs	.-24     	; 0x92a <__mulsf3+0x4>

00000942 <__mulsf3_pse>:
 942:	95 9f       	mul	r25, r21
 944:	d1 f3       	breq	.-12     	; 0x93a <__mulsf3+0x14>
 946:	95 0f       	add	r25, r21
 948:	50 e0       	ldi	r21, 0x00	; 0
 94a:	55 1f       	adc	r21, r21
 94c:	62 9f       	mul	r22, r18
 94e:	f0 01       	movw	r30, r0
 950:	72 9f       	mul	r23, r18
 952:	bb 27       	eor	r27, r27
 954:	f0 0d       	add	r31, r0
 956:	b1 1d       	adc	r27, r1
 958:	63 9f       	mul	r22, r19
 95a:	aa 27       	eor	r26, r26
 95c:	f0 0d       	add	r31, r0
 95e:	b1 1d       	adc	r27, r1
 960:	aa 1f       	adc	r26, r26
 962:	64 9f       	mul	r22, r20
 964:	66 27       	eor	r22, r22
 966:	b0 0d       	add	r27, r0
 968:	a1 1d       	adc	r26, r1
 96a:	66 1f       	adc	r22, r22
 96c:	82 9f       	mul	r24, r18
 96e:	22 27       	eor	r18, r18
 970:	b0 0d       	add	r27, r0
 972:	a1 1d       	adc	r26, r1
 974:	62 1f       	adc	r22, r18
 976:	73 9f       	mul	r23, r19
 978:	b0 0d       	add	r27, r0
 97a:	a1 1d       	adc	r26, r1
 97c:	62 1f       	adc	r22, r18
 97e:	83 9f       	mul	r24, r19
 980:	a0 0d       	add	r26, r0
 982:	61 1d       	adc	r22, r1
 984:	22 1f       	adc	r18, r18
 986:	74 9f       	mul	r23, r20
 988:	33 27       	eor	r19, r19
 98a:	a0 0d       	add	r26, r0
 98c:	61 1d       	adc	r22, r1
 98e:	23 1f       	adc	r18, r19
 990:	84 9f       	mul	r24, r20
 992:	60 0d       	add	r22, r0
 994:	21 1d       	adc	r18, r1
 996:	82 2f       	mov	r24, r18
 998:	76 2f       	mov	r23, r22
 99a:	6a 2f       	mov	r22, r26
 99c:	11 24       	eor	r1, r1
 99e:	9f 57       	subi	r25, 0x7F	; 127
 9a0:	50 40       	sbci	r21, 0x00	; 0
 9a2:	8a f0       	brmi	.+34     	; 0x9c6 <__mulsf3_pse+0x84>
 9a4:	e1 f0       	breq	.+56     	; 0x9de <__mulsf3_pse+0x9c>
 9a6:	88 23       	and	r24, r24
 9a8:	4a f0       	brmi	.+18     	; 0x9bc <__mulsf3_pse+0x7a>
 9aa:	ee 0f       	add	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	bb 1f       	adc	r27, r27
 9b0:	66 1f       	adc	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	91 50       	subi	r25, 0x01	; 1
 9b8:	50 40       	sbci	r21, 0x00	; 0
 9ba:	a9 f7       	brne	.-22     	; 0x9a6 <__mulsf3_pse+0x64>
 9bc:	9e 3f       	cpi	r25, 0xFE	; 254
 9be:	51 05       	cpc	r21, r1
 9c0:	70 f0       	brcs	.+28     	; 0x9de <__mulsf3_pse+0x9c>
 9c2:	5c cf       	rjmp	.-328    	; 0x87c <__fp_inf>
 9c4:	a6 cf       	rjmp	.-180    	; 0x912 <__fp_szero>
 9c6:	5f 3f       	cpi	r21, 0xFF	; 255
 9c8:	ec f3       	brlt	.-6      	; 0x9c4 <__mulsf3_pse+0x82>
 9ca:	98 3e       	cpi	r25, 0xE8	; 232
 9cc:	dc f3       	brlt	.-10     	; 0x9c4 <__mulsf3_pse+0x82>
 9ce:	86 95       	lsr	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	b7 95       	ror	r27
 9d6:	f7 95       	ror	r31
 9d8:	e7 95       	ror	r30
 9da:	9f 5f       	subi	r25, 0xFF	; 255
 9dc:	c1 f7       	brne	.-16     	; 0x9ce <__mulsf3_pse+0x8c>
 9de:	fe 2b       	or	r31, r30
 9e0:	88 0f       	add	r24, r24
 9e2:	91 1d       	adc	r25, r1
 9e4:	96 95       	lsr	r25
 9e6:	87 95       	ror	r24
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <__fp_cmp>:
 9ec:	99 0f       	add	r25, r25
 9ee:	00 08       	sbc	r0, r0
 9f0:	55 0f       	add	r21, r21
 9f2:	aa 0b       	sbc	r26, r26
 9f4:	e0 e8       	ldi	r30, 0x80	; 128
 9f6:	fe ef       	ldi	r31, 0xFE	; 254
 9f8:	16 16       	cp	r1, r22
 9fa:	17 06       	cpc	r1, r23
 9fc:	e8 07       	cpc	r30, r24
 9fe:	f9 07       	cpc	r31, r25
 a00:	c0 f0       	brcs	.+48     	; 0xa32 <__fp_cmp+0x46>
 a02:	12 16       	cp	r1, r18
 a04:	13 06       	cpc	r1, r19
 a06:	e4 07       	cpc	r30, r20
 a08:	f5 07       	cpc	r31, r21
 a0a:	98 f0       	brcs	.+38     	; 0xa32 <__fp_cmp+0x46>
 a0c:	62 1b       	sub	r22, r18
 a0e:	73 0b       	sbc	r23, r19
 a10:	84 0b       	sbc	r24, r20
 a12:	95 0b       	sbc	r25, r21
 a14:	39 f4       	brne	.+14     	; 0xa24 <__fp_cmp+0x38>
 a16:	0a 26       	eor	r0, r26
 a18:	61 f0       	breq	.+24     	; 0xa32 <__fp_cmp+0x46>
 a1a:	23 2b       	or	r18, r19
 a1c:	24 2b       	or	r18, r20
 a1e:	25 2b       	or	r18, r21
 a20:	21 f4       	brne	.+8      	; 0xa2a <__fp_cmp+0x3e>
 a22:	08 95       	ret
 a24:	0a 26       	eor	r0, r26
 a26:	09 f4       	brne	.+2      	; 0xa2a <__fp_cmp+0x3e>
 a28:	a1 40       	sbci	r26, 0x01	; 1
 a2a:	a6 95       	lsr	r26
 a2c:	8f ef       	ldi	r24, 0xFF	; 255
 a2e:	81 1d       	adc	r24, r1
 a30:	81 1d       	adc	r24, r1
 a32:	08 95       	ret

00000a34 <__udivmodhi4>:
 a34:	aa 1b       	sub	r26, r26
 a36:	bb 1b       	sub	r27, r27
 a38:	51 e1       	ldi	r21, 0x11	; 17
 a3a:	07 c0       	rjmp	.+14     	; 0xa4a <__udivmodhi4_ep>

00000a3c <__udivmodhi4_loop>:
 a3c:	aa 1f       	adc	r26, r26
 a3e:	bb 1f       	adc	r27, r27
 a40:	a6 17       	cp	r26, r22
 a42:	b7 07       	cpc	r27, r23
 a44:	10 f0       	brcs	.+4      	; 0xa4a <__udivmodhi4_ep>
 a46:	a6 1b       	sub	r26, r22
 a48:	b7 0b       	sbc	r27, r23

00000a4a <__udivmodhi4_ep>:
 a4a:	88 1f       	adc	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	5a 95       	dec	r21
 a50:	a9 f7       	brne	.-22     	; 0xa3c <__udivmodhi4_loop>
 a52:	80 95       	com	r24
 a54:	90 95       	com	r25
 a56:	bc 01       	movw	r22, r24
 a58:	cd 01       	movw	r24, r26
 a5a:	08 95       	ret

00000a5c <__tablejump2__>:
 a5c:	ee 0f       	add	r30, r30
 a5e:	ff 1f       	adc	r31, r31

00000a60 <__tablejump__>:
 a60:	05 90       	lpm	r0, Z+
 a62:	f4 91       	lpm	r31, Z
 a64:	e0 2d       	mov	r30, r0
 a66:	09 94       	ijmp

00000a68 <__umulhisi3>:
 a68:	a2 9f       	mul	r26, r18
 a6a:	b0 01       	movw	r22, r0
 a6c:	b3 9f       	mul	r27, r19
 a6e:	c0 01       	movw	r24, r0
 a70:	a3 9f       	mul	r26, r19
 a72:	70 0d       	add	r23, r0
 a74:	81 1d       	adc	r24, r1
 a76:	11 24       	eor	r1, r1
 a78:	91 1d       	adc	r25, r1
 a7a:	b2 9f       	mul	r27, r18
 a7c:	70 0d       	add	r23, r0
 a7e:	81 1d       	adc	r24, r1
 a80:	11 24       	eor	r1, r1
 a82:	91 1d       	adc	r25, r1
 a84:	08 95       	ret

00000a86 <malloc>:
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	82 30       	cpi	r24, 0x02	; 2
 a8c:	91 05       	cpc	r25, r1
 a8e:	10 f4       	brcc	.+4      	; 0xa94 <malloc+0xe>
 a90:	82 e0       	ldi	r24, 0x02	; 2
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	e0 91 2d 01 	lds	r30, 0x012D
 a98:	f0 91 2e 01 	lds	r31, 0x012E
 a9c:	20 e0       	ldi	r18, 0x00	; 0
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	a0 e0       	ldi	r26, 0x00	; 0
 aa2:	b0 e0       	ldi	r27, 0x00	; 0
 aa4:	30 97       	sbiw	r30, 0x00	; 0
 aa6:	39 f1       	breq	.+78     	; 0xaf6 <malloc+0x70>
 aa8:	40 81       	ld	r20, Z
 aaa:	51 81       	ldd	r21, Z+1	; 0x01
 aac:	48 17       	cp	r20, r24
 aae:	59 07       	cpc	r21, r25
 ab0:	b8 f0       	brcs	.+46     	; 0xae0 <malloc+0x5a>
 ab2:	48 17       	cp	r20, r24
 ab4:	59 07       	cpc	r21, r25
 ab6:	71 f4       	brne	.+28     	; 0xad4 <malloc+0x4e>
 ab8:	82 81       	ldd	r24, Z+2	; 0x02
 aba:	93 81       	ldd	r25, Z+3	; 0x03
 abc:	10 97       	sbiw	r26, 0x00	; 0
 abe:	29 f0       	breq	.+10     	; 0xaca <malloc+0x44>
 ac0:	13 96       	adiw	r26, 0x03	; 3
 ac2:	9c 93       	st	X, r25
 ac4:	8e 93       	st	-X, r24
 ac6:	12 97       	sbiw	r26, 0x02	; 2
 ac8:	2c c0       	rjmp	.+88     	; 0xb22 <__stack+0x23>
 aca:	90 93 2e 01 	sts	0x012E, r25
 ace:	80 93 2d 01 	sts	0x012D, r24
 ad2:	27 c0       	rjmp	.+78     	; 0xb22 <__stack+0x23>
 ad4:	21 15       	cp	r18, r1
 ad6:	31 05       	cpc	r19, r1
 ad8:	31 f0       	breq	.+12     	; 0xae6 <malloc+0x60>
 ada:	42 17       	cp	r20, r18
 adc:	53 07       	cpc	r21, r19
 ade:	18 f0       	brcs	.+6      	; 0xae6 <malloc+0x60>
 ae0:	a9 01       	movw	r20, r18
 ae2:	db 01       	movw	r26, r22
 ae4:	01 c0       	rjmp	.+2      	; 0xae8 <malloc+0x62>
 ae6:	ef 01       	movw	r28, r30
 ae8:	9a 01       	movw	r18, r20
 aea:	bd 01       	movw	r22, r26
 aec:	df 01       	movw	r26, r30
 aee:	02 80       	ldd	r0, Z+2	; 0x02
 af0:	f3 81       	ldd	r31, Z+3	; 0x03
 af2:	e0 2d       	mov	r30, r0
 af4:	d7 cf       	rjmp	.-82     	; 0xaa4 <malloc+0x1e>
 af6:	21 15       	cp	r18, r1
 af8:	31 05       	cpc	r19, r1
 afa:	f9 f0       	breq	.+62     	; 0xb3a <__stack+0x3b>
 afc:	28 1b       	sub	r18, r24
 afe:	39 0b       	sbc	r19, r25
 b00:	24 30       	cpi	r18, 0x04	; 4
 b02:	31 05       	cpc	r19, r1
 b04:	80 f4       	brcc	.+32     	; 0xb26 <__stack+0x27>
 b06:	8a 81       	ldd	r24, Y+2	; 0x02
 b08:	9b 81       	ldd	r25, Y+3	; 0x03
 b0a:	61 15       	cp	r22, r1
 b0c:	71 05       	cpc	r23, r1
 b0e:	21 f0       	breq	.+8      	; 0xb18 <__stack+0x19>
 b10:	fb 01       	movw	r30, r22
 b12:	93 83       	std	Z+3, r25	; 0x03
 b14:	82 83       	std	Z+2, r24	; 0x02
 b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x21>
 b18:	90 93 2e 01 	sts	0x012E, r25
 b1c:	80 93 2d 01 	sts	0x012D, r24
 b20:	fe 01       	movw	r30, r28
 b22:	32 96       	adiw	r30, 0x02	; 2
 b24:	44 c0       	rjmp	.+136    	; 0xbae <__stack+0xaf>
 b26:	fe 01       	movw	r30, r28
 b28:	e2 0f       	add	r30, r18
 b2a:	f3 1f       	adc	r31, r19
 b2c:	81 93       	st	Z+, r24
 b2e:	91 93       	st	Z+, r25
 b30:	22 50       	subi	r18, 0x02	; 2
 b32:	31 09       	sbc	r19, r1
 b34:	39 83       	std	Y+1, r19	; 0x01
 b36:	28 83       	st	Y, r18
 b38:	3a c0       	rjmp	.+116    	; 0xbae <__stack+0xaf>
 b3a:	20 91 2b 01 	lds	r18, 0x012B
 b3e:	30 91 2c 01 	lds	r19, 0x012C
 b42:	23 2b       	or	r18, r19
 b44:	41 f4       	brne	.+16     	; 0xb56 <__stack+0x57>
 b46:	20 91 02 01 	lds	r18, 0x0102
 b4a:	30 91 03 01 	lds	r19, 0x0103
 b4e:	30 93 2c 01 	sts	0x012C, r19
 b52:	20 93 2b 01 	sts	0x012B, r18
 b56:	20 91 00 01 	lds	r18, 0x0100
 b5a:	30 91 01 01 	lds	r19, 0x0101
 b5e:	21 15       	cp	r18, r1
 b60:	31 05       	cpc	r19, r1
 b62:	41 f4       	brne	.+16     	; 0xb74 <__stack+0x75>
 b64:	2d b7       	in	r18, 0x3d	; 61
 b66:	3e b7       	in	r19, 0x3e	; 62
 b68:	40 91 04 01 	lds	r20, 0x0104
 b6c:	50 91 05 01 	lds	r21, 0x0105
 b70:	24 1b       	sub	r18, r20
 b72:	35 0b       	sbc	r19, r21
 b74:	e0 91 2b 01 	lds	r30, 0x012B
 b78:	f0 91 2c 01 	lds	r31, 0x012C
 b7c:	e2 17       	cp	r30, r18
 b7e:	f3 07       	cpc	r31, r19
 b80:	a0 f4       	brcc	.+40     	; 0xbaa <__stack+0xab>
 b82:	2e 1b       	sub	r18, r30
 b84:	3f 0b       	sbc	r19, r31
 b86:	28 17       	cp	r18, r24
 b88:	39 07       	cpc	r19, r25
 b8a:	78 f0       	brcs	.+30     	; 0xbaa <__stack+0xab>
 b8c:	ac 01       	movw	r20, r24
 b8e:	4e 5f       	subi	r20, 0xFE	; 254
 b90:	5f 4f       	sbci	r21, 0xFF	; 255
 b92:	24 17       	cp	r18, r20
 b94:	35 07       	cpc	r19, r21
 b96:	48 f0       	brcs	.+18     	; 0xbaa <__stack+0xab>
 b98:	4e 0f       	add	r20, r30
 b9a:	5f 1f       	adc	r21, r31
 b9c:	50 93 2c 01 	sts	0x012C, r21
 ba0:	40 93 2b 01 	sts	0x012B, r20
 ba4:	81 93       	st	Z+, r24
 ba6:	91 93       	st	Z+, r25
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <__stack+0xaf>
 baa:	e0 e0       	ldi	r30, 0x00	; 0
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	cf 01       	movw	r24, r30
 bb0:	df 91       	pop	r29
 bb2:	cf 91       	pop	r28
 bb4:	08 95       	ret

00000bb6 <free>:
 bb6:	cf 93       	push	r28
 bb8:	df 93       	push	r29
 bba:	00 97       	sbiw	r24, 0x00	; 0
 bbc:	09 f4       	brne	.+2      	; 0xbc0 <free+0xa>
 bbe:	87 c0       	rjmp	.+270    	; 0xcce <free+0x118>
 bc0:	fc 01       	movw	r30, r24
 bc2:	32 97       	sbiw	r30, 0x02	; 2
 bc4:	13 82       	std	Z+3, r1	; 0x03
 bc6:	12 82       	std	Z+2, r1	; 0x02
 bc8:	c0 91 2d 01 	lds	r28, 0x012D
 bcc:	d0 91 2e 01 	lds	r29, 0x012E
 bd0:	20 97       	sbiw	r28, 0x00	; 0
 bd2:	81 f4       	brne	.+32     	; 0xbf4 <free+0x3e>
 bd4:	20 81       	ld	r18, Z
 bd6:	31 81       	ldd	r19, Z+1	; 0x01
 bd8:	28 0f       	add	r18, r24
 bda:	39 1f       	adc	r19, r25
 bdc:	80 91 2b 01 	lds	r24, 0x012B
 be0:	90 91 2c 01 	lds	r25, 0x012C
 be4:	82 17       	cp	r24, r18
 be6:	93 07       	cpc	r25, r19
 be8:	79 f5       	brne	.+94     	; 0xc48 <free+0x92>
 bea:	f0 93 2c 01 	sts	0x012C, r31
 bee:	e0 93 2b 01 	sts	0x012B, r30
 bf2:	6d c0       	rjmp	.+218    	; 0xcce <free+0x118>
 bf4:	de 01       	movw	r26, r28
 bf6:	20 e0       	ldi	r18, 0x00	; 0
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	ae 17       	cp	r26, r30
 bfc:	bf 07       	cpc	r27, r31
 bfe:	50 f4       	brcc	.+20     	; 0xc14 <free+0x5e>
 c00:	12 96       	adiw	r26, 0x02	; 2
 c02:	4d 91       	ld	r20, X+
 c04:	5c 91       	ld	r21, X
 c06:	13 97       	sbiw	r26, 0x03	; 3
 c08:	9d 01       	movw	r18, r26
 c0a:	41 15       	cp	r20, r1
 c0c:	51 05       	cpc	r21, r1
 c0e:	09 f1       	breq	.+66     	; 0xc52 <free+0x9c>
 c10:	da 01       	movw	r26, r20
 c12:	f3 cf       	rjmp	.-26     	; 0xbfa <free+0x44>
 c14:	b3 83       	std	Z+3, r27	; 0x03
 c16:	a2 83       	std	Z+2, r26	; 0x02
 c18:	40 81       	ld	r20, Z
 c1a:	51 81       	ldd	r21, Z+1	; 0x01
 c1c:	84 0f       	add	r24, r20
 c1e:	95 1f       	adc	r25, r21
 c20:	8a 17       	cp	r24, r26
 c22:	9b 07       	cpc	r25, r27
 c24:	71 f4       	brne	.+28     	; 0xc42 <free+0x8c>
 c26:	8d 91       	ld	r24, X+
 c28:	9c 91       	ld	r25, X
 c2a:	11 97       	sbiw	r26, 0x01	; 1
 c2c:	84 0f       	add	r24, r20
 c2e:	95 1f       	adc	r25, r21
 c30:	02 96       	adiw	r24, 0x02	; 2
 c32:	91 83       	std	Z+1, r25	; 0x01
 c34:	80 83       	st	Z, r24
 c36:	12 96       	adiw	r26, 0x02	; 2
 c38:	8d 91       	ld	r24, X+
 c3a:	9c 91       	ld	r25, X
 c3c:	13 97       	sbiw	r26, 0x03	; 3
 c3e:	93 83       	std	Z+3, r25	; 0x03
 c40:	82 83       	std	Z+2, r24	; 0x02
 c42:	21 15       	cp	r18, r1
 c44:	31 05       	cpc	r19, r1
 c46:	29 f4       	brne	.+10     	; 0xc52 <free+0x9c>
 c48:	f0 93 2e 01 	sts	0x012E, r31
 c4c:	e0 93 2d 01 	sts	0x012D, r30
 c50:	3e c0       	rjmp	.+124    	; 0xcce <free+0x118>
 c52:	d9 01       	movw	r26, r18
 c54:	13 96       	adiw	r26, 0x03	; 3
 c56:	fc 93       	st	X, r31
 c58:	ee 93       	st	-X, r30
 c5a:	12 97       	sbiw	r26, 0x02	; 2
 c5c:	4d 91       	ld	r20, X+
 c5e:	5d 91       	ld	r21, X+
 c60:	a4 0f       	add	r26, r20
 c62:	b5 1f       	adc	r27, r21
 c64:	ea 17       	cp	r30, r26
 c66:	fb 07       	cpc	r31, r27
 c68:	79 f4       	brne	.+30     	; 0xc88 <free+0xd2>
 c6a:	80 81       	ld	r24, Z
 c6c:	91 81       	ldd	r25, Z+1	; 0x01
 c6e:	84 0f       	add	r24, r20
 c70:	95 1f       	adc	r25, r21
 c72:	02 96       	adiw	r24, 0x02	; 2
 c74:	d9 01       	movw	r26, r18
 c76:	11 96       	adiw	r26, 0x01	; 1
 c78:	9c 93       	st	X, r25
 c7a:	8e 93       	st	-X, r24
 c7c:	82 81       	ldd	r24, Z+2	; 0x02
 c7e:	93 81       	ldd	r25, Z+3	; 0x03
 c80:	13 96       	adiw	r26, 0x03	; 3
 c82:	9c 93       	st	X, r25
 c84:	8e 93       	st	-X, r24
 c86:	12 97       	sbiw	r26, 0x02	; 2
 c88:	e0 e0       	ldi	r30, 0x00	; 0
 c8a:	f0 e0       	ldi	r31, 0x00	; 0
 c8c:	8a 81       	ldd	r24, Y+2	; 0x02
 c8e:	9b 81       	ldd	r25, Y+3	; 0x03
 c90:	00 97       	sbiw	r24, 0x00	; 0
 c92:	19 f0       	breq	.+6      	; 0xc9a <free+0xe4>
 c94:	fe 01       	movw	r30, r28
 c96:	ec 01       	movw	r28, r24
 c98:	f9 cf       	rjmp	.-14     	; 0xc8c <free+0xd6>
 c9a:	ce 01       	movw	r24, r28
 c9c:	02 96       	adiw	r24, 0x02	; 2
 c9e:	28 81       	ld	r18, Y
 ca0:	39 81       	ldd	r19, Y+1	; 0x01
 ca2:	82 0f       	add	r24, r18
 ca4:	93 1f       	adc	r25, r19
 ca6:	20 91 2b 01 	lds	r18, 0x012B
 caa:	30 91 2c 01 	lds	r19, 0x012C
 cae:	28 17       	cp	r18, r24
 cb0:	39 07       	cpc	r19, r25
 cb2:	69 f4       	brne	.+26     	; 0xcce <free+0x118>
 cb4:	30 97       	sbiw	r30, 0x00	; 0
 cb6:	29 f4       	brne	.+10     	; 0xcc2 <free+0x10c>
 cb8:	10 92 2e 01 	sts	0x012E, r1
 cbc:	10 92 2d 01 	sts	0x012D, r1
 cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <free+0x110>
 cc2:	13 82       	std	Z+3, r1	; 0x03
 cc4:	12 82       	std	Z+2, r1	; 0x02
 cc6:	d0 93 2c 01 	sts	0x012C, r29
 cca:	c0 93 2b 01 	sts	0x012B, r28
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
 cd2:	08 95       	ret

00000cd4 <_exit>:
 cd4:	f8 94       	cli

00000cd6 <__stop_program>:
 cd6:	ff cf       	rjmp	.-2      	; 0xcd6 <__stop_program>
