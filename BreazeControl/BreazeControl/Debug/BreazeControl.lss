
BreazeControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000029  00800100  00800100  00000a1c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000387  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000206  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000227  00000000  00000000  00001021  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000009c  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000232  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002c9  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000017df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  74:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_29>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  7c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  80:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  84:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  8c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  90:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  94:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  98:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  9c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  ac:	83 00       	.word	0x0083	; ????
  ae:	94 00       	.word	0x0094	; ????
  b0:	a5 00       	.word	0x00a5	; ????
  b2:	b6 00       	.word	0x00b6	; ????
  b4:	c7 00       	.word	0x00c7	; ????
  b6:	d8 00       	.word	0x00d8	; ????
  b8:	e9 00       	.word	0x00e9	; ????
  ba:	fa 00       	.word	0x00fa	; ????
  bc:	1f 01       	movw	r2, r30
  be:	28 01       	movw	r4, r16
  c0:	31 01       	movw	r6, r2
  c2:	3a 01       	movw	r6, r20
  c4:	43 01       	movw	r8, r6
  c6:	4c 01       	movw	r8, r24
  c8:	55 01       	movw	r10, r10
  ca:	5e 01       	movw	r10, r28

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	da e0       	ldi	r29, 0x0A	; 10
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a9 32       	cpi	r26, 0x29	; 41
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  ec:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <chooseInput>:
	
char state = 0;
float spd = 0;

void chooseInput(int i) {
	switch (i) {
  f4:	88 30       	cpi	r24, 0x08	; 8
  f6:	91 05       	cpc	r25, r1
  f8:	08 f0       	brcs	.+2      	; 0xfc <chooseInput+0x8>
  fa:	8c c0       	rjmp	.+280    	; 0x214 <chooseInput+0x120>
  fc:	fc 01       	movw	r30, r24
  fe:	ea 5a       	subi	r30, 0xAA	; 170
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	0c 94 b8 04 	jmp	0x970	; 0x970 <__tablejump2__>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
 106:	eb e7       	ldi	r30, 0x7B	; 123
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8f 7d       	andi	r24, 0xDF	; 223
 10e:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 11a:	80 81       	ld	r24, Z
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 120:	80 81       	ld	r24, Z
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	80 83       	st	Z, r24

		break;
 126:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
 128:	eb e7       	ldi	r30, 0x7B	; 123
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 13c:	80 81       	ld	r24, Z
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	80 83       	st	Z, r24

		break;
 148:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
 14a:	eb e7       	ldi	r30, 0x7B	; 123
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8f 7d       	andi	r24, 0xDF	; 223
 152:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 154:	ec e7       	ldi	r30, 0x7C	; 124
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 15e:	80 81       	ld	r24, Z
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 164:	80 81       	ld	r24, Z
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	80 83       	st	Z, r24

		break;
 16a:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
 16c:	eb e7       	ldi	r30, 0x7B	; 123
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8f 7d       	andi	r24, 0xDF	; 223
 174:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 180:	80 81       	ld	r24, Z
 182:	8d 7f       	andi	r24, 0xFD	; 253
 184:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24
		break;
 18c:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
 18e:	eb e7       	ldi	r30, 0x7B	; 123
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 198:	ec e7       	ldi	r30, 0x7C	; 124
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
 1a2:	80 81       	ld	r24, Z
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1a8:	80 81       	ld	r24, Z
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	80 83       	st	Z, r24
		break;
 1ae:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
 1b0:	eb e7       	ldi	r30, 0x7B	; 123
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 62       	ori	r24, 0x20	; 32
 1b8:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1ba:	ec e7       	ldi	r30, 0x7C	; 124
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1c4:	80 81       	ld	r24, Z
 1c6:	8d 7f       	andi	r24, 0xFD	; 253
 1c8:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 1ca:	80 81       	ld	r24, Z
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	80 83       	st	Z, r24
		break;
 1d0:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
 1d2:	eb e7       	ldi	r30, 0x7B	; 123
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 1dc:	ec e7       	ldi	r30, 0x7C	; 124
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 1e6:	80 81       	ld	r24, Z
 1e8:	8d 7f       	andi	r24, 0xFD	; 253
 1ea:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 1ec:	80 81       	ld	r24, Z
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	80 83       	st	Z, r24
		break;
 1f2:	08 95       	ret
		case 7:
		clear(ADCSRB, MUX5);//Set analog input (F7)
 1f4:	eb e7       	ldi	r30, 0x7B	; 123
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 7d       	andi	r24, 0xDF	; 223
 1fc:	80 83       	st	Z, r24
		set(ADMUX, MUX2);
 1fe:	ec e7       	ldi	r30, 0x7C	; 124
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	84 60       	ori	r24, 0x04	; 4
 206:	80 83       	st	Z, r24
		set(ADMUX, MUX1);
 208:	80 81       	ld	r24, Z
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	80 83       	st	Z, r24
		set(ADMUX, MUX0);
 20e:	80 81       	ld	r24, Z
 210:	81 60       	ori	r24, 0x01	; 1
 212:	80 83       	st	Z, r24
 214:	08 95       	ret

00000216 <getADC>:
int ADC6 = 0;
int ADC7 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
 216:	80 91 00 01 	lds	r24, 0x0100
 21a:	90 91 01 01 	lds	r25, 0x0101
 21e:	89 2b       	or	r24, r25
 220:	09 f4       	brne	.+2      	; 0x224 <getADC+0xe>
 222:	8a c0       	rjmp	.+276    	; 0x338 <getADC+0x122>
		switch (flag) {
 224:	80 91 27 01 	lds	r24, 0x0127
 228:	90 91 28 01 	lds	r25, 0x0128
 22c:	88 30       	cpi	r24, 0x08	; 8
 22e:	91 05       	cpc	r25, r1
 230:	08 f0       	brcs	.+2      	; 0x234 <getADC+0x1e>
 232:	4c c0       	rjmp	.+152    	; 0x2cc <getADC+0xb6>
 234:	fc 01       	movw	r30, r24
 236:	e2 5a       	subi	r30, 0xA2	; 162
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	0c 94 b8 04 	jmp	0x970	; 0x970 <__tablejump2__>
			case 0:
			ADC0 = ADC;
 23e:	80 91 78 00 	lds	r24, 0x0078
 242:	90 91 79 00 	lds	r25, 0x0079
 246:	90 93 11 01 	sts	0x0111, r25
 24a:	80 93 10 01 	sts	0x0110, r24
			break;
 24e:	3e c0       	rjmp	.+124    	; 0x2cc <getADC+0xb6>
			case 1:
			ADC1 = ADC;
 250:	80 91 78 00 	lds	r24, 0x0078
 254:	90 91 79 00 	lds	r25, 0x0079
 258:	90 93 0f 01 	sts	0x010F, r25
 25c:	80 93 0e 01 	sts	0x010E, r24
			break;
 260:	35 c0       	rjmp	.+106    	; 0x2cc <getADC+0xb6>
			case 2:
			ADC2 = ADC;
 262:	80 91 78 00 	lds	r24, 0x0078
 266:	90 91 79 00 	lds	r25, 0x0079
 26a:	90 93 0d 01 	sts	0x010D, r25
 26e:	80 93 0c 01 	sts	0x010C, r24
			break;
 272:	2c c0       	rjmp	.+88     	; 0x2cc <getADC+0xb6>
			case 3:
			ADC3 = ADC;
 274:	80 91 78 00 	lds	r24, 0x0078
 278:	90 91 79 00 	lds	r25, 0x0079
 27c:	90 93 0b 01 	sts	0x010B, r25
 280:	80 93 0a 01 	sts	0x010A, r24
			break;
 284:	23 c0       	rjmp	.+70     	; 0x2cc <getADC+0xb6>
			case 4:
			ADC4 = ADC;
 286:	80 91 78 00 	lds	r24, 0x0078
 28a:	90 91 79 00 	lds	r25, 0x0079
 28e:	90 93 09 01 	sts	0x0109, r25
 292:	80 93 08 01 	sts	0x0108, r24
			break;
 296:	1a c0       	rjmp	.+52     	; 0x2cc <getADC+0xb6>
			case 5:
			ADC5 = ADC;
 298:	80 91 78 00 	lds	r24, 0x0078
 29c:	90 91 79 00 	lds	r25, 0x0079
 2a0:	90 93 07 01 	sts	0x0107, r25
 2a4:	80 93 06 01 	sts	0x0106, r24
			break;
 2a8:	11 c0       	rjmp	.+34     	; 0x2cc <getADC+0xb6>
			case 6:
			ADC6 = ADC;
 2aa:	80 91 78 00 	lds	r24, 0x0078
 2ae:	90 91 79 00 	lds	r25, 0x0079
 2b2:	90 93 05 01 	sts	0x0105, r25
 2b6:	80 93 04 01 	sts	0x0104, r24
			break;
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <getADC+0xb6>
			case 7:
			ADC7 = ADC;
 2bc:	80 91 78 00 	lds	r24, 0x0078
 2c0:	90 91 79 00 	lds	r25, 0x0079
 2c4:	90 93 03 01 	sts	0x0103, r25
 2c8:	80 93 02 01 	sts	0x0102, r24
			break;
		}
		clear(ADCSRA, ADEN);	//Enable/Start conversion
 2cc:	ea e7       	ldi	r30, 0x7A	; 122
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	8f 77       	andi	r24, 0x7F	; 127
 2d4:	80 83       	st	Z, r24
		clear(ADCSRA, ADSC);	//^
 2d6:	80 81       	ld	r24, Z
 2d8:	8f 7b       	andi	r24, 0xBF	; 191
 2da:	80 83       	st	Z, r24
		clear(ADCSRA, ADATE);
 2dc:	80 81       	ld	r24, Z
 2de:	8f 7d       	andi	r24, 0xDF	; 223
 2e0:	80 83       	st	Z, r24
		clear(ADCSRA, ADIF);
 2e2:	80 81       	ld	r24, Z
 2e4:	8f 7e       	andi	r24, 0xEF	; 239
 2e6:	80 83       	st	Z, r24
		if (flag >= 0 && flag < 8) {
 2e8:	80 91 27 01 	lds	r24, 0x0127
 2ec:	90 91 28 01 	lds	r25, 0x0128
 2f0:	88 30       	cpi	r24, 0x08	; 8
 2f2:	91 05       	cpc	r25, r1
 2f4:	78 f4       	brcc	.+30     	; 0x314 <getADC+0xfe>
			flag = (flag + 1) % 8;
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	87 70       	andi	r24, 0x07	; 7
 2fa:	90 78       	andi	r25, 0x80	; 128
 2fc:	99 23       	and	r25, r25
 2fe:	24 f4       	brge	.+8      	; 0x308 <getADC+0xf2>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	88 6f       	ori	r24, 0xF8	; 248
 304:	9f 6f       	ori	r25, 0xFF	; 255
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	90 93 28 01 	sts	0x0128, r25
 30c:	80 93 27 01 	sts	0x0127, r24
			chooseInput(flag);
 310:	0e 94 7a 00 	call	0xf4	; 0xf4 <chooseInput>
		}
		set(ADCSRA, ADATE);	//Set trigger to free-running mode
 314:	ea e7       	ldi	r30, 0x7A	; 122
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 62       	ori	r24, 0x20	; 32
 31c:	80 83       	st	Z, r24
		set(ADCSRA, ADEN);	//Enable/Start conversion
 31e:	80 81       	ld	r24, Z
 320:	80 68       	ori	r24, 0x80	; 128
 322:	80 83       	st	Z, r24
		set(ADCSRA, ADSC);	//^
 324:	80 81       	ld	r24, Z
 326:	80 64       	ori	r24, 0x40	; 64
 328:	80 83       	st	Z, r24
		
		set(ADCSRA, ADIF);	//Enable reading results
 32a:	80 81       	ld	r24, Z
 32c:	80 61       	ori	r24, 0x10	; 16
 32e:	80 83       	st	Z, r24
		conversion = 0;
 330:	10 92 01 01 	sts	0x0101, r1
 334:	10 92 00 01 	sts	0x0100, r1
	}

	ADCarr[0] = ADC0;
 338:	80 91 10 01 	lds	r24, 0x0110
 33c:	90 91 11 01 	lds	r25, 0x0111
 340:	90 93 18 01 	sts	0x0118, r25
 344:	80 93 17 01 	sts	0x0117, r24
	ADCarr[1] = ADC1;
 348:	80 91 0e 01 	lds	r24, 0x010E
 34c:	90 91 0f 01 	lds	r25, 0x010F
 350:	90 93 1a 01 	sts	0x011A, r25
 354:	80 93 19 01 	sts	0x0119, r24
	ADCarr[2] = ADC2;
 358:	80 91 0c 01 	lds	r24, 0x010C
 35c:	90 91 0d 01 	lds	r25, 0x010D
 360:	90 93 1c 01 	sts	0x011C, r25
 364:	80 93 1b 01 	sts	0x011B, r24
	ADCarr[3] = ADC3;
 368:	80 91 0a 01 	lds	r24, 0x010A
 36c:	90 91 0b 01 	lds	r25, 0x010B
 370:	90 93 1e 01 	sts	0x011E, r25
 374:	80 93 1d 01 	sts	0x011D, r24
	ADCarr[4] = ADC4;
 378:	80 91 08 01 	lds	r24, 0x0108
 37c:	90 91 09 01 	lds	r25, 0x0109
 380:	90 93 20 01 	sts	0x0120, r25
 384:	80 93 1f 01 	sts	0x011F, r24
	ADCarr[5] = ADC5;
 388:	80 91 06 01 	lds	r24, 0x0106
 38c:	90 91 07 01 	lds	r25, 0x0107
 390:	90 93 22 01 	sts	0x0122, r25
 394:	80 93 21 01 	sts	0x0121, r24
	ADCarr[6] = ADC6;
 398:	80 91 04 01 	lds	r24, 0x0104
 39c:	90 91 05 01 	lds	r25, 0x0105
 3a0:	90 93 24 01 	sts	0x0124, r25
 3a4:	80 93 23 01 	sts	0x0123, r24
	ADCarr[7] = ADC7;
 3a8:	80 91 02 01 	lds	r24, 0x0102
 3ac:	90 91 03 01 	lds	r25, 0x0103
 3b0:	90 93 26 01 	sts	0x0126, r25
 3b4:	80 93 25 01 	sts	0x0125, r24
 3b8:	08 95       	ret

000003ba <drive_straight>:
	
	
}

void drive_straight(char dir, float speed) {
 3ba:	cf 92       	push	r12
 3bc:	df 92       	push	r13
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	6a 01       	movw	r12, r20
 3c4:	7b 01       	movw	r14, r22
	switch (dir) {
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <drive_straight+0x16>
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	21 f0       	breq	.+8      	; 0x3d6 <drive_straight+0x1c>
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <drive_straight+0x20>
		case FORWARD:
			set(PORTB, 2);
 3d0:	2a 9a       	sbi	0x05, 2	; 5
			set(PORTB, 3);
 3d2:	2b 9a       	sbi	0x05, 3	; 5
			break;
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <drive_straight+0x20>
		case BACKWARD:
			clear(PORTB, 2);
 3d6:	2a 98       	cbi	0x05, 2	; 5
			clear(PORTB, 3);
 3d8:	2b 98       	cbi	0x05, 3	; 5
			break;
	}
	OCR1B = (unsigned int) (OCR1A * speed);
 3da:	60 91 88 00 	lds	r22, 0x0088
 3de:	70 91 89 00 	lds	r23, 0x0089
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 b3 03 	call	0x766	; 0x766 <__floatunsisf>
 3ea:	a7 01       	movw	r20, r14
 3ec:	96 01       	movw	r18, r12
 3ee:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 3f2:	0e 94 87 03 	call	0x70e	; 0x70e <__fixunssfsi>
 3f6:	70 93 8b 00 	sts	0x008B, r23
 3fa:	60 93 8a 00 	sts	0x008A, r22
	OCR3B = (unsigned int) (ICR3 * speed);
 3fe:	60 91 96 00 	lds	r22, 0x0096
 402:	70 91 97 00 	lds	r23, 0x0097
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 b3 03 	call	0x766	; 0x766 <__floatunsisf>
 40e:	a7 01       	movw	r20, r14
 410:	96 01       	movw	r18, r12
 412:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 416:	0e 94 87 03 	call	0x70e	; 0x70e <__fixunssfsi>
 41a:	70 93 9b 00 	sts	0x009B, r23
 41e:	60 93 9a 00 	sts	0x009A, r22
}
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	df 90       	pop	r13
 428:	cf 90       	pop	r12
 42a:	08 95       	ret

0000042c <main>:

int main(void)
{
	
	//TIMER 1: for left wheel
	set(TCCR1B, WGM13);
 42c:	e1 e8       	ldi	r30, 0x81	; 129
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	80 61       	ori	r24, 0x10	; 16
 434:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
 436:	80 81       	ld	r24, Z
 438:	88 60       	ori	r24, 0x08	; 8
 43a:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
 43c:	a0 e8       	ldi	r26, 0x80	; 128
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	8c 91       	ld	r24, X
 442:	82 60       	ori	r24, 0x02	; 2
 444:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
 446:	8c 91       	ld	r24, X
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
 44c:	8c 91       	ld	r24, X
 44e:	80 62       	ori	r24, 0x20	; 32
 450:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
 452:	8c 91       	ld	r24, X
 454:	8f 7e       	andi	r24, 0xEF	; 239
 456:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
 458:	80 81       	ld	r24, Z
 45a:	8b 7f       	andi	r24, 0xFB	; 251
 45c:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
 45e:	80 81       	ld	r24, Z
 460:	8d 7f       	andi	r24, 0xFD	; 253
 462:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
 464:	80 81       	ld	r24, Z
 466:	81 60       	ori	r24, 0x01	; 1
 468:	80 83       	st	Z, r24
	
	OCR1A = 0xFFFF;
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	9f ef       	ldi	r25, 0xFF	; 255
 46e:	90 93 89 00 	sts	0x0089, r25
 472:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
 476:	10 92 8b 00 	sts	0x008B, r1
 47a:	10 92 8a 00 	sts	0x008A, r1
	
	
	//TIMER 3: For right wheel
	set(TCCR3B, WGM33);
 47e:	e1 e9       	ldi	r30, 0x91	; 145
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	20 81       	ld	r18, Z
 484:	20 61       	ori	r18, 0x10	; 16
 486:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
 488:	20 81       	ld	r18, Z
 48a:	28 60       	ori	r18, 0x08	; 8
 48c:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
 48e:	a0 e9       	ldi	r26, 0x90	; 144
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	2c 91       	ld	r18, X
 494:	22 60       	ori	r18, 0x02	; 2
 496:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
 498:	2c 91       	ld	r18, X
 49a:	2e 7f       	andi	r18, 0xFE	; 254
 49c:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1);
 49e:	2c 91       	ld	r18, X
 4a0:	20 68       	ori	r18, 0x80	; 128
 4a2:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0);
 4a4:	2c 91       	ld	r18, X
 4a6:	2f 7b       	andi	r18, 0xBF	; 191
 4a8:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
 4aa:	20 81       	ld	r18, Z
 4ac:	2b 7f       	andi	r18, 0xFB	; 251
 4ae:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
 4b0:	20 81       	ld	r18, Z
 4b2:	2d 7f       	andi	r18, 0xFD	; 253
 4b4:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
 4b6:	20 81       	ld	r18, Z
 4b8:	21 60       	ori	r18, 0x01	; 1
 4ba:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
 4bc:	90 93 97 00 	sts	0x0097, r25
 4c0:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
 4c4:	10 92 99 00 	sts	0x0099, r1
 4c8:	10 92 98 00 	sts	0x0098, r1
	
	set(DDRB,6);
 4cc:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
 4ce:	3e 9a       	sbi	0x07, 6	; 7
	
	set(DDRB,2);
 4d0:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
 4d2:	23 9a       	sbi	0x04, 3	; 4
	int maxADC = 0;
	
    while(1)
    {
        m_wait(100);
		m_red(TOGGLE);
 4d4:	68 94       	set
 4d6:	88 24       	eor	r8, r8
 4d8:	86 f8       	bld	r8, 6
		getADC();
		
		if (ADCarr[0] > ADCarr[1]) {
 4da:	07 e1       	ldi	r16, 0x17	; 23
 4dc:	11 e0       	ldi	r17, 0x01	; 1
 4de:	c9 e1       	ldi	r28, 0x19	; 25
 4e0:	d1 e0       	ldi	r29, 0x01	; 1
			state = FORWARD;
			maxADC = ADCarr[0];
		}
		else {
			state = BACKWARD;
 4e2:	68 94       	set
 4e4:	77 24       	eor	r7, r7
 4e6:	71 f8       	bld	r7, 1
		if (maxADC < thresholdhigh && maxADC > thresholdlow) {
			state = WAIT;
		}
		else if (maxADC >= thresholdhigh) {
			state = oppDir(state);
			spd = 1.0 - (1023 - maxADC) / (1023 - thresholdhigh);
 4e8:	0f 2e       	mov	r0, r31
 4ea:	aa 24       	eor	r10, r10
 4ec:	aa 94       	dec	r10
 4ee:	f3 e0       	ldi	r31, 0x03	; 3
 4f0:	bf 2e       	mov	r11, r31
 4f2:	f0 2d       	mov	r31, r0
 4f4:	0f 2e       	mov	r0, r31
 4f6:	ff ed       	ldi	r31, 0xDF	; 223
 4f8:	cf 2e       	mov	r12, r31
 4fa:	d1 2c       	mov	r13, r1
 4fc:	f0 2d       	mov	r31, r0
		}
		else {
			spd = 1.0 - (maxADC / thresholdlow);
 4fe:	0f 2e       	mov	r0, r31
 500:	fc eb       	ldi	r31, 0xBC	; 188
 502:	ef 2e       	mov	r14, r31
 504:	f2 e0       	ldi	r31, 0x02	; 2
 506:	ff 2e       	mov	r15, r31
 508:	f0 2d       	mov	r31, r0
        m_wait(100);
		m_red(TOGGLE);
		getADC();
		
		if (ADCarr[0] > ADCarr[1]) {
			state = FORWARD;
 50a:	99 24       	eor	r9, r9
 50c:	93 94       	inc	r9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50e:	2f ef       	ldi	r18, 0xFF	; 255
 510:	31 ee       	ldi	r19, 0xE1	; 225
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	21 50       	subi	r18, 0x01	; 1
 516:	30 40       	sbci	r19, 0x00	; 0
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <main+0xe8>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <main+0xf2>
 51e:	00 00       	nop
	int maxADC = 0;
	
    while(1)
    {
        m_wait(100);
		m_red(TOGGLE);
 520:	6e 9a       	sbi	0x0d, 6	; 13
 522:	8e b1       	in	r24, 0x0e	; 14
 524:	88 25       	eor	r24, r8
 526:	8e b9       	out	0x0e, r24	; 14
		getADC();
 528:	0e 94 0b 01 	call	0x216	; 0x216 <getADC>
		
		if (ADCarr[0] > ADCarr[1]) {
 52c:	f8 01       	movw	r30, r16
 52e:	80 81       	ld	r24, Z
 530:	91 81       	ldd	r25, Z+1	; 0x01
 532:	28 81       	ld	r18, Y
 534:	39 81       	ldd	r19, Y+1	; 0x01
 536:	28 17       	cp	r18, r24
 538:	39 07       	cpc	r19, r25
 53a:	1c f4       	brge	.+6      	; 0x542 <main+0x116>
			state = FORWARD;
 53c:	90 92 16 01 	sts	0x0116, r9
 540:	03 c0       	rjmp	.+6      	; 0x548 <main+0x11c>
			maxADC = ADCarr[0];
		}
		else {
			state = BACKWARD;
 542:	70 92 16 01 	sts	0x0116, r7
			maxADC = ADCarr[1];
 546:	c9 01       	movw	r24, r18
		}
		
		if (maxADC < thresholdhigh && maxADC > thresholdlow) {
 548:	80 32       	cpi	r24, 0x20	; 32
 54a:	f3 e0       	ldi	r31, 0x03	; 3
 54c:	9f 07       	cpc	r25, r31
 54e:	3c f4       	brge	.+14     	; 0x55e <main+0x132>
 550:	8d 3b       	cpi	r24, 0xBD	; 189
 552:	22 e0       	ldi	r18, 0x02	; 2
 554:	92 07       	cpc	r25, r18
 556:	54 f1       	brlt	.+84     	; 0x5ac <main+0x180>
			state = WAIT;
 558:	10 92 16 01 	sts	0x0116, r1
 55c:	d8 cf       	rjmp	.-80     	; 0x50e <main+0xe2>
	OCR1B = (unsigned int) (OCR1A * speed);
	OCR3B = (unsigned int) (ICR3 * speed);
}

int oppDir(int st) {
	if (st == 1) {
 55e:	20 91 16 01 	lds	r18, 0x0116
 562:	21 30       	cpi	r18, 0x01	; 1
 564:	11 f4       	brne	.+4      	; 0x56a <main+0x13e>
		return 2;
 566:	27 2d       	mov	r18, r7
 568:	01 c0       	rjmp	.+2      	; 0x56c <main+0x140>
	} else {
		return 1;
 56a:	29 2d       	mov	r18, r9
		
		if (maxADC < thresholdhigh && maxADC > thresholdlow) {
			state = WAIT;
		}
		else if (maxADC >= thresholdhigh) {
			state = oppDir(state);
 56c:	20 93 16 01 	sts	0x0116, r18
			spd = 1.0 - (1023 - maxADC) / (1023 - thresholdhigh);
 570:	f5 01       	movw	r30, r10
 572:	e8 1b       	sub	r30, r24
 574:	f9 0b       	sbc	r31, r25
 576:	cf 01       	movw	r24, r30
 578:	b6 01       	movw	r22, r12
 57a:	0e 94 a4 04 	call	0x948	; 0x948 <__divmodhi4>
 57e:	88 27       	eor	r24, r24
 580:	77 fd       	sbrc	r23, 7
 582:	80 95       	com	r24
 584:	98 2f       	mov	r25, r24
 586:	0e 94 b5 03 	call	0x76a	; 0x76a <__floatsisf>
 58a:	9b 01       	movw	r18, r22
 58c:	ac 01       	movw	r20, r24
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	80 e8       	ldi	r24, 0x80	; 128
 594:	9f e3       	ldi	r25, 0x3F	; 63
 596:	0e 94 22 03 	call	0x644	; 0x644 <__subsf3>
 59a:	60 93 12 01 	sts	0x0112, r22
 59e:	70 93 13 01 	sts	0x0113, r23
 5a2:	80 93 14 01 	sts	0x0114, r24
 5a6:	90 93 15 01 	sts	0x0115, r25
 5aa:	19 c0       	rjmp	.+50     	; 0x5de <main+0x1b2>
		}
		else {
			spd = 1.0 - (maxADC / thresholdlow);
 5ac:	b7 01       	movw	r22, r14
 5ae:	0e 94 a4 04 	call	0x948	; 0x948 <__divmodhi4>
 5b2:	88 27       	eor	r24, r24
 5b4:	77 fd       	sbrc	r23, 7
 5b6:	80 95       	com	r24
 5b8:	98 2f       	mov	r25, r24
 5ba:	0e 94 b5 03 	call	0x76a	; 0x76a <__floatsisf>
 5be:	9b 01       	movw	r18, r22
 5c0:	ac 01       	movw	r20, r24
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	80 e8       	ldi	r24, 0x80	; 128
 5c8:	9f e3       	ldi	r25, 0x3F	; 63
 5ca:	0e 94 22 03 	call	0x644	; 0x644 <__subsf3>
 5ce:	60 93 12 01 	sts	0x0112, r22
 5d2:	70 93 13 01 	sts	0x0113, r23
 5d6:	80 93 14 01 	sts	0x0114, r24
 5da:	90 93 15 01 	sts	0x0115, r25
		}
		
		switch (state) {
 5de:	80 91 16 01 	lds	r24, 0x0116
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	19 f0       	breq	.+6      	; 0x5ec <main+0x1c0>
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	69 f0       	breq	.+26     	; 0x604 <main+0x1d8>
 5ea:	91 cf       	rjmp	.-222    	; 0x50e <main+0xe2>
			case FORWARD:
				drive_straight(FORWARD, spd);
 5ec:	40 91 12 01 	lds	r20, 0x0112
 5f0:	50 91 13 01 	lds	r21, 0x0113
 5f4:	60 91 14 01 	lds	r22, 0x0114
 5f8:	70 91 15 01 	lds	r23, 0x0115
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <drive_straight>
				break;
 602:	83 cf       	rjmp	.-250    	; 0x50a <main+0xde>
			case BACKWARD:
				drive_straight(BACKWARD, spd);
 604:	40 91 12 01 	lds	r20, 0x0112
 608:	50 91 13 01 	lds	r21, 0x0113
 60c:	60 91 14 01 	lds	r22, 0x0114
 610:	70 91 15 01 	lds	r23, 0x0115
 614:	87 2d       	mov	r24, r7
 616:	0e 94 dd 01 	call	0x3ba	; 0x3ba <drive_straight>
				break;
 61a:	77 cf       	rjmp	.-274    	; 0x50a <main+0xde>

0000061c <__vector_29>:
		}
		
    }
}

ISR(ADC_vect) {
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
	//cli();
	conversion = 1;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	90 93 01 01 	sts	0x0101, r25
 632:	80 93 00 01 	sts	0x0100, r24
	//sei();
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	0f 90       	pop	r0
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	0f 90       	pop	r0
 640:	1f 90       	pop	r1
 642:	18 95       	reti

00000644 <__subsf3>:
 644:	50 58       	subi	r21, 0x80	; 128

00000646 <__addsf3>:
 646:	bb 27       	eor	r27, r27
 648:	aa 27       	eor	r26, r26
 64a:	0e d0       	rcall	.+28     	; 0x668 <__addsf3x>
 64c:	e0 c0       	rjmp	.+448    	; 0x80e <__fp_round>
 64e:	d1 d0       	rcall	.+418    	; 0x7f2 <__fp_pscA>
 650:	30 f0       	brcs	.+12     	; 0x65e <__addsf3+0x18>
 652:	d6 d0       	rcall	.+428    	; 0x800 <__fp_pscB>
 654:	20 f0       	brcs	.+8      	; 0x65e <__addsf3+0x18>
 656:	31 f4       	brne	.+12     	; 0x664 <__addsf3+0x1e>
 658:	9f 3f       	cpi	r25, 0xFF	; 255
 65a:	11 f4       	brne	.+4      	; 0x660 <__addsf3+0x1a>
 65c:	1e f4       	brtc	.+6      	; 0x664 <__addsf3+0x1e>
 65e:	c6 c0       	rjmp	.+396    	; 0x7ec <__fp_nan>
 660:	0e f4       	brtc	.+2      	; 0x664 <__addsf3+0x1e>
 662:	e0 95       	com	r30
 664:	e7 fb       	bst	r30, 7
 666:	bc c0       	rjmp	.+376    	; 0x7e0 <__fp_inf>

00000668 <__addsf3x>:
 668:	e9 2f       	mov	r30, r25
 66a:	e2 d0       	rcall	.+452    	; 0x830 <__fp_split3>
 66c:	80 f3       	brcs	.-32     	; 0x64e <__addsf3+0x8>
 66e:	ba 17       	cp	r27, r26
 670:	62 07       	cpc	r22, r18
 672:	73 07       	cpc	r23, r19
 674:	84 07       	cpc	r24, r20
 676:	95 07       	cpc	r25, r21
 678:	18 f0       	brcs	.+6      	; 0x680 <__addsf3x+0x18>
 67a:	71 f4       	brne	.+28     	; 0x698 <__addsf3x+0x30>
 67c:	9e f5       	brtc	.+102    	; 0x6e4 <__addsf3x+0x7c>
 67e:	fa c0       	rjmp	.+500    	; 0x874 <__fp_zero>
 680:	0e f4       	brtc	.+2      	; 0x684 <__addsf3x+0x1c>
 682:	e0 95       	com	r30
 684:	0b 2e       	mov	r0, r27
 686:	ba 2f       	mov	r27, r26
 688:	a0 2d       	mov	r26, r0
 68a:	0b 01       	movw	r0, r22
 68c:	b9 01       	movw	r22, r18
 68e:	90 01       	movw	r18, r0
 690:	0c 01       	movw	r0, r24
 692:	ca 01       	movw	r24, r20
 694:	a0 01       	movw	r20, r0
 696:	11 24       	eor	r1, r1
 698:	ff 27       	eor	r31, r31
 69a:	59 1b       	sub	r21, r25
 69c:	99 f0       	breq	.+38     	; 0x6c4 <__addsf3x+0x5c>
 69e:	59 3f       	cpi	r21, 0xF9	; 249
 6a0:	50 f4       	brcc	.+20     	; 0x6b6 <__addsf3x+0x4e>
 6a2:	50 3e       	cpi	r21, 0xE0	; 224
 6a4:	68 f1       	brcs	.+90     	; 0x700 <__addsf3x+0x98>
 6a6:	1a 16       	cp	r1, r26
 6a8:	f0 40       	sbci	r31, 0x00	; 0
 6aa:	a2 2f       	mov	r26, r18
 6ac:	23 2f       	mov	r18, r19
 6ae:	34 2f       	mov	r19, r20
 6b0:	44 27       	eor	r20, r20
 6b2:	58 5f       	subi	r21, 0xF8	; 248
 6b4:	f3 cf       	rjmp	.-26     	; 0x69c <__addsf3x+0x34>
 6b6:	46 95       	lsr	r20
 6b8:	37 95       	ror	r19
 6ba:	27 95       	ror	r18
 6bc:	a7 95       	ror	r26
 6be:	f0 40       	sbci	r31, 0x00	; 0
 6c0:	53 95       	inc	r21
 6c2:	c9 f7       	brne	.-14     	; 0x6b6 <__addsf3x+0x4e>
 6c4:	7e f4       	brtc	.+30     	; 0x6e4 <__addsf3x+0x7c>
 6c6:	1f 16       	cp	r1, r31
 6c8:	ba 0b       	sbc	r27, r26
 6ca:	62 0b       	sbc	r22, r18
 6cc:	73 0b       	sbc	r23, r19
 6ce:	84 0b       	sbc	r24, r20
 6d0:	ba f0       	brmi	.+46     	; 0x700 <__addsf3x+0x98>
 6d2:	91 50       	subi	r25, 0x01	; 1
 6d4:	a1 f0       	breq	.+40     	; 0x6fe <__addsf3x+0x96>
 6d6:	ff 0f       	add	r31, r31
 6d8:	bb 1f       	adc	r27, r27
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	c2 f7       	brpl	.-16     	; 0x6d2 <__addsf3x+0x6a>
 6e2:	0e c0       	rjmp	.+28     	; 0x700 <__addsf3x+0x98>
 6e4:	ba 0f       	add	r27, r26
 6e6:	62 1f       	adc	r22, r18
 6e8:	73 1f       	adc	r23, r19
 6ea:	84 1f       	adc	r24, r20
 6ec:	48 f4       	brcc	.+18     	; 0x700 <__addsf3x+0x98>
 6ee:	87 95       	ror	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b7 95       	ror	r27
 6f6:	f7 95       	ror	r31
 6f8:	9e 3f       	cpi	r25, 0xFE	; 254
 6fa:	08 f0       	brcs	.+2      	; 0x6fe <__addsf3x+0x96>
 6fc:	b3 cf       	rjmp	.-154    	; 0x664 <__addsf3+0x1e>
 6fe:	93 95       	inc	r25
 700:	88 0f       	add	r24, r24
 702:	08 f0       	brcs	.+2      	; 0x706 <__addsf3x+0x9e>
 704:	99 27       	eor	r25, r25
 706:	ee 0f       	add	r30, r30
 708:	97 95       	ror	r25
 70a:	87 95       	ror	r24
 70c:	08 95       	ret

0000070e <__fixunssfsi>:
 70e:	98 d0       	rcall	.+304    	; 0x840 <__fp_splitA>
 710:	88 f0       	brcs	.+34     	; 0x734 <__fixunssfsi+0x26>
 712:	9f 57       	subi	r25, 0x7F	; 127
 714:	90 f0       	brcs	.+36     	; 0x73a <__fixunssfsi+0x2c>
 716:	b9 2f       	mov	r27, r25
 718:	99 27       	eor	r25, r25
 71a:	b7 51       	subi	r27, 0x17	; 23
 71c:	a0 f0       	brcs	.+40     	; 0x746 <__fixunssfsi+0x38>
 71e:	d1 f0       	breq	.+52     	; 0x754 <__fixunssfsi+0x46>
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	1a f0       	brmi	.+6      	; 0x730 <__fixunssfsi+0x22>
 72a:	ba 95       	dec	r27
 72c:	c9 f7       	brne	.-14     	; 0x720 <__fixunssfsi+0x12>
 72e:	12 c0       	rjmp	.+36     	; 0x754 <__fixunssfsi+0x46>
 730:	b1 30       	cpi	r27, 0x01	; 1
 732:	81 f0       	breq	.+32     	; 0x754 <__fixunssfsi+0x46>
 734:	9f d0       	rcall	.+318    	; 0x874 <__fp_zero>
 736:	b1 e0       	ldi	r27, 0x01	; 1
 738:	08 95       	ret
 73a:	9c c0       	rjmp	.+312    	; 0x874 <__fp_zero>
 73c:	67 2f       	mov	r22, r23
 73e:	78 2f       	mov	r23, r24
 740:	88 27       	eor	r24, r24
 742:	b8 5f       	subi	r27, 0xF8	; 248
 744:	39 f0       	breq	.+14     	; 0x754 <__fixunssfsi+0x46>
 746:	b9 3f       	cpi	r27, 0xF9	; 249
 748:	cc f3       	brlt	.-14     	; 0x73c <__fixunssfsi+0x2e>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b3 95       	inc	r27
 752:	d9 f7       	brne	.-10     	; 0x74a <__fixunssfsi+0x3c>
 754:	3e f4       	brtc	.+14     	; 0x764 <__fixunssfsi+0x56>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__floatunsisf>:
 766:	e8 94       	clt
 768:	09 c0       	rjmp	.+18     	; 0x77c <__floatsisf+0x12>

0000076a <__floatsisf>:
 76a:	97 fb       	bst	r25, 7
 76c:	3e f4       	brtc	.+14     	; 0x77c <__floatsisf+0x12>
 76e:	90 95       	com	r25
 770:	80 95       	com	r24
 772:	70 95       	com	r23
 774:	61 95       	neg	r22
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	8f 4f       	sbci	r24, 0xFF	; 255
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	99 23       	and	r25, r25
 77e:	a9 f0       	breq	.+42     	; 0x7aa <__floatsisf+0x40>
 780:	f9 2f       	mov	r31, r25
 782:	96 e9       	ldi	r25, 0x96	; 150
 784:	bb 27       	eor	r27, r27
 786:	93 95       	inc	r25
 788:	f6 95       	lsr	r31
 78a:	87 95       	ror	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b7 95       	ror	r27
 792:	f1 11       	cpse	r31, r1
 794:	f8 cf       	rjmp	.-16     	; 0x786 <__floatsisf+0x1c>
 796:	fa f4       	brpl	.+62     	; 0x7d6 <__floatsisf+0x6c>
 798:	bb 0f       	add	r27, r27
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__floatsisf+0x36>
 79c:	60 ff       	sbrs	r22, 0
 79e:	1b c0       	rjmp	.+54     	; 0x7d6 <__floatsisf+0x6c>
 7a0:	6f 5f       	subi	r22, 0xFF	; 255
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	16 c0       	rjmp	.+44     	; 0x7d6 <__floatsisf+0x6c>
 7aa:	88 23       	and	r24, r24
 7ac:	11 f0       	breq	.+4      	; 0x7b2 <__floatsisf+0x48>
 7ae:	96 e9       	ldi	r25, 0x96	; 150
 7b0:	11 c0       	rjmp	.+34     	; 0x7d4 <__floatsisf+0x6a>
 7b2:	77 23       	and	r23, r23
 7b4:	21 f0       	breq	.+8      	; 0x7be <__floatsisf+0x54>
 7b6:	9e e8       	ldi	r25, 0x8E	; 142
 7b8:	87 2f       	mov	r24, r23
 7ba:	76 2f       	mov	r23, r22
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <__floatsisf+0x5e>
 7be:	66 23       	and	r22, r22
 7c0:	71 f0       	breq	.+28     	; 0x7de <__floatsisf+0x74>
 7c2:	96 e8       	ldi	r25, 0x86	; 134
 7c4:	86 2f       	mov	r24, r22
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	2a f0       	brmi	.+10     	; 0x7d6 <__floatsisf+0x6c>
 7cc:	9a 95       	dec	r25
 7ce:	66 0f       	add	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	da f7       	brpl	.-10     	; 0x7cc <__floatsisf+0x62>
 7d6:	88 0f       	add	r24, r24
 7d8:	96 95       	lsr	r25
 7da:	87 95       	ror	r24
 7dc:	97 f9       	bld	r25, 7
 7de:	08 95       	ret

000007e0 <__fp_inf>:
 7e0:	97 f9       	bld	r25, 7
 7e2:	9f 67       	ori	r25, 0x7F	; 127
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	08 95       	ret

000007ec <__fp_nan>:
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	08 95       	ret

000007f2 <__fp_pscA>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	09 06       	cpc	r0, r25
 7fe:	08 95       	ret

00000800 <__fp_pscB>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	05 06       	cpc	r0, r21
 80c:	08 95       	ret

0000080e <__fp_round>:
 80e:	09 2e       	mov	r0, r25
 810:	03 94       	inc	r0
 812:	00 0c       	add	r0, r0
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0xc>
 816:	88 23       	and	r24, r24
 818:	52 f0       	brmi	.+20     	; 0x82e <__fp_round+0x20>
 81a:	bb 0f       	add	r27, r27
 81c:	40 f4       	brcc	.+16     	; 0x82e <__fp_round+0x20>
 81e:	bf 2b       	or	r27, r31
 820:	11 f4       	brne	.+4      	; 0x826 <__fp_round+0x18>
 822:	60 ff       	sbrs	r22, 0
 824:	04 c0       	rjmp	.+8      	; 0x82e <__fp_round+0x20>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__fp_split3>:
 830:	57 fd       	sbrc	r21, 7
 832:	90 58       	subi	r25, 0x80	; 128
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	59 f0       	breq	.+22     	; 0x850 <__fp_splitA+0x10>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	71 f0       	breq	.+28     	; 0x85a <__fp_splitA+0x1a>
 83e:	47 95       	ror	r20

00000840 <__fp_splitA>:
 840:	88 0f       	add	r24, r24
 842:	97 fb       	bst	r25, 7
 844:	99 1f       	adc	r25, r25
 846:	61 f0       	breq	.+24     	; 0x860 <__fp_splitA+0x20>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	79 f0       	breq	.+30     	; 0x86a <__fp_splitA+0x2a>
 84c:	87 95       	ror	r24
 84e:	08 95       	ret
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	55 1f       	adc	r21, r21
 858:	f2 cf       	rjmp	.-28     	; 0x83e <__fp_split3+0xe>
 85a:	46 95       	lsr	r20
 85c:	f1 df       	rcall	.-30     	; 0x840 <__fp_splitA>
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__fp_splitA+0x30>
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	18 06       	cpc	r1, r24
 866:	99 1f       	adc	r25, r25
 868:	f1 cf       	rjmp	.-30     	; 0x84c <__fp_splitA+0xc>
 86a:	86 95       	lsr	r24
 86c:	71 05       	cpc	r23, r1
 86e:	61 05       	cpc	r22, r1
 870:	08 94       	sec
 872:	08 95       	ret

00000874 <__fp_zero>:
 874:	e8 94       	clt

00000876 <__fp_szero>:
 876:	bb 27       	eor	r27, r27
 878:	66 27       	eor	r22, r22
 87a:	77 27       	eor	r23, r23
 87c:	cb 01       	movw	r24, r22
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__mulsf3>:
 882:	0b d0       	rcall	.+22     	; 0x89a <__mulsf3x>
 884:	c4 cf       	rjmp	.-120    	; 0x80e <__fp_round>
 886:	b5 df       	rcall	.-150    	; 0x7f2 <__fp_pscA>
 888:	28 f0       	brcs	.+10     	; 0x894 <__mulsf3+0x12>
 88a:	ba df       	rcall	.-140    	; 0x800 <__fp_pscB>
 88c:	18 f0       	brcs	.+6      	; 0x894 <__mulsf3+0x12>
 88e:	95 23       	and	r25, r21
 890:	09 f0       	breq	.+2      	; 0x894 <__mulsf3+0x12>
 892:	a6 cf       	rjmp	.-180    	; 0x7e0 <__fp_inf>
 894:	ab cf       	rjmp	.-170    	; 0x7ec <__fp_nan>
 896:	11 24       	eor	r1, r1
 898:	ee cf       	rjmp	.-36     	; 0x876 <__fp_szero>

0000089a <__mulsf3x>:
 89a:	ca df       	rcall	.-108    	; 0x830 <__fp_split3>
 89c:	a0 f3       	brcs	.-24     	; 0x886 <__mulsf3+0x4>

0000089e <__mulsf3_pse>:
 89e:	95 9f       	mul	r25, r21
 8a0:	d1 f3       	breq	.-12     	; 0x896 <__mulsf3+0x14>
 8a2:	95 0f       	add	r25, r21
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	55 1f       	adc	r21, r21
 8a8:	62 9f       	mul	r22, r18
 8aa:	f0 01       	movw	r30, r0
 8ac:	72 9f       	mul	r23, r18
 8ae:	bb 27       	eor	r27, r27
 8b0:	f0 0d       	add	r31, r0
 8b2:	b1 1d       	adc	r27, r1
 8b4:	63 9f       	mul	r22, r19
 8b6:	aa 27       	eor	r26, r26
 8b8:	f0 0d       	add	r31, r0
 8ba:	b1 1d       	adc	r27, r1
 8bc:	aa 1f       	adc	r26, r26
 8be:	64 9f       	mul	r22, r20
 8c0:	66 27       	eor	r22, r22
 8c2:	b0 0d       	add	r27, r0
 8c4:	a1 1d       	adc	r26, r1
 8c6:	66 1f       	adc	r22, r22
 8c8:	82 9f       	mul	r24, r18
 8ca:	22 27       	eor	r18, r18
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	62 1f       	adc	r22, r18
 8d2:	73 9f       	mul	r23, r19
 8d4:	b0 0d       	add	r27, r0
 8d6:	a1 1d       	adc	r26, r1
 8d8:	62 1f       	adc	r22, r18
 8da:	83 9f       	mul	r24, r19
 8dc:	a0 0d       	add	r26, r0
 8de:	61 1d       	adc	r22, r1
 8e0:	22 1f       	adc	r18, r18
 8e2:	74 9f       	mul	r23, r20
 8e4:	33 27       	eor	r19, r19
 8e6:	a0 0d       	add	r26, r0
 8e8:	61 1d       	adc	r22, r1
 8ea:	23 1f       	adc	r18, r19
 8ec:	84 9f       	mul	r24, r20
 8ee:	60 0d       	add	r22, r0
 8f0:	21 1d       	adc	r18, r1
 8f2:	82 2f       	mov	r24, r18
 8f4:	76 2f       	mov	r23, r22
 8f6:	6a 2f       	mov	r22, r26
 8f8:	11 24       	eor	r1, r1
 8fa:	9f 57       	subi	r25, 0x7F	; 127
 8fc:	50 40       	sbci	r21, 0x00	; 0
 8fe:	8a f0       	brmi	.+34     	; 0x922 <__mulsf3_pse+0x84>
 900:	e1 f0       	breq	.+56     	; 0x93a <__mulsf3_pse+0x9c>
 902:	88 23       	and	r24, r24
 904:	4a f0       	brmi	.+18     	; 0x918 <__mulsf3_pse+0x7a>
 906:	ee 0f       	add	r30, r30
 908:	ff 1f       	adc	r31, r31
 90a:	bb 1f       	adc	r27, r27
 90c:	66 1f       	adc	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	91 50       	subi	r25, 0x01	; 1
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	a9 f7       	brne	.-22     	; 0x902 <__mulsf3_pse+0x64>
 918:	9e 3f       	cpi	r25, 0xFE	; 254
 91a:	51 05       	cpc	r21, r1
 91c:	70 f0       	brcs	.+28     	; 0x93a <__mulsf3_pse+0x9c>
 91e:	60 cf       	rjmp	.-320    	; 0x7e0 <__fp_inf>
 920:	aa cf       	rjmp	.-172    	; 0x876 <__fp_szero>
 922:	5f 3f       	cpi	r21, 0xFF	; 255
 924:	ec f3       	brlt	.-6      	; 0x920 <__mulsf3_pse+0x82>
 926:	98 3e       	cpi	r25, 0xE8	; 232
 928:	dc f3       	brlt	.-10     	; 0x920 <__mulsf3_pse+0x82>
 92a:	86 95       	lsr	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	b7 95       	ror	r27
 932:	f7 95       	ror	r31
 934:	e7 95       	ror	r30
 936:	9f 5f       	subi	r25, 0xFF	; 255
 938:	c1 f7       	brne	.-16     	; 0x92a <__mulsf3_pse+0x8c>
 93a:	fe 2b       	or	r31, r30
 93c:	88 0f       	add	r24, r24
 93e:	91 1d       	adc	r25, r1
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	97 f9       	bld	r25, 7
 946:	08 95       	ret

00000948 <__divmodhi4>:
 948:	97 fb       	bst	r25, 7
 94a:	07 2e       	mov	r0, r23
 94c:	16 f4       	brtc	.+4      	; 0x952 <__divmodhi4+0xa>
 94e:	00 94       	com	r0
 950:	07 d0       	rcall	.+14     	; 0x960 <__divmodhi4_neg1>
 952:	77 fd       	sbrc	r23, 7
 954:	09 d0       	rcall	.+18     	; 0x968 <__divmodhi4_neg2>
 956:	0e 94 be 04 	call	0x97c	; 0x97c <__udivmodhi4>
 95a:	07 fc       	sbrc	r0, 7
 95c:	05 d0       	rcall	.+10     	; 0x968 <__divmodhi4_neg2>
 95e:	3e f4       	brtc	.+14     	; 0x96e <__divmodhi4_exit>

00000960 <__divmodhi4_neg1>:
 960:	90 95       	com	r25
 962:	81 95       	neg	r24
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <__divmodhi4_neg2>:
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255

0000096e <__divmodhi4_exit>:
 96e:	08 95       	ret

00000970 <__tablejump2__>:
 970:	ee 0f       	add	r30, r30
 972:	ff 1f       	adc	r31, r31

00000974 <__tablejump__>:
 974:	05 90       	lpm	r0, Z+
 976:	f4 91       	lpm	r31, Z
 978:	e0 2d       	mov	r30, r0
 97a:	09 94       	ijmp

0000097c <__udivmodhi4>:
 97c:	aa 1b       	sub	r26, r26
 97e:	bb 1b       	sub	r27, r27
 980:	51 e1       	ldi	r21, 0x11	; 17
 982:	07 c0       	rjmp	.+14     	; 0x992 <__udivmodhi4_ep>

00000984 <__udivmodhi4_loop>:
 984:	aa 1f       	adc	r26, r26
 986:	bb 1f       	adc	r27, r27
 988:	a6 17       	cp	r26, r22
 98a:	b7 07       	cpc	r27, r23
 98c:	10 f0       	brcs	.+4      	; 0x992 <__udivmodhi4_ep>
 98e:	a6 1b       	sub	r26, r22
 990:	b7 0b       	sbc	r27, r23

00000992 <__udivmodhi4_ep>:
 992:	88 1f       	adc	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	5a 95       	dec	r21
 998:	a9 f7       	brne	.-22     	; 0x984 <__udivmodhi4_loop>
 99a:	80 95       	com	r24
 99c:	90 95       	com	r25
 99e:	bc 01       	movw	r22, r24
 9a0:	cd 01       	movw	r24, r26
 9a2:	08 95       	ret

000009a4 <_exit>:
 9a4:	f8 94       	cli

000009a6 <__stop_program>:
 9a6:	ff cf       	rjmp	.-2      	; 0x9a6 <__stop_program>
